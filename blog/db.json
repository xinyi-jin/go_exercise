{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/img_01.jpg","path":"img/img_01.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/orange_cat.png","path":"img/orange_cat.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven.jpg","path":"img/wallhaven.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1661239276498},{"_id":"source/_posts/test.md","hash":"c08fe2b74633b8d430e0390f45f6ba769c5da226","modified":1662713681412},{"_id":"source/about/index.md","hash":"f677c37f289c4d0ed16d62057f9fca28a637e4a5","modified":1661311848562},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1655372397000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1655372397000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1655372397000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1655372397000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1655372397000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1655372397000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1655372397000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1655372397000},{"_id":"themes/fluid/_config.yml","hash":"ebe26856c4cc286df3181136b5b391dd2e5f5ec7","modified":1655372397000},{"_id":"themes/fluid/package.json","hash":"0bc354a01c5e6e9de43bf67456dc16c59d400139","modified":1655372397000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1655372397000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1655372397000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1655372397000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1655372397000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1655372397000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1655372397000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1655372397000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1655372397000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1655372397000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1655372397000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1655372397000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1655372397000},{"_id":"themes/fluid/layout/index.ejs","hash":"b15d13877827e99e0ff783a6b13b13cca90bfe8c","modified":1655372397000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1655372397000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1655372397000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1655372397000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1655372397000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1655372397000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1655372397000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1655372397000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"776949aa697dffd54e9b1957d9245028879509a3","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1655372397000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1655372397000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1655372397000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1655372397000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1655372397000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1655372397000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1655372397000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1655372397000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1655372397000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1655372397000},{"_id":"themes/fluid/source/img/img_01.jpg","hash":"35e03e70ae7af35bd26faa6a0be7651a1c19e55b","modified":1662087409792},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1655372397000},{"_id":"themes/fluid/source/img/orange_cat.png","hash":"f693b51df69435524ce213c5bd23a9416c622f9a","modified":1662100399108},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1655372397000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1655372397000},{"_id":"themes/fluid/source/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1655372397000},{"_id":"themes/fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1655372397000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1655372397000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1655372397000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1655372397000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1655372397000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1655372397000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"cbcf6905f4990a22895a848e29dd4c05592a9043","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"94c1ce6e312932e876886ba24b082ae34515a038","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e74fb49526ddb14fee2c6360a560d17f57262ef7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1655372397000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1655372397000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1655372397000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"7054d79c9d5966fc57baf0adcdf3b19275987b62","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1655372397000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1655372397000},{"_id":"themes/fluid/source/img/wallhaven.jpg","hash":"c618634378d8dac47c262ec72d44e63ab051ee4f","modified":1662711038507},{"_id":"public/local-search.xml","hash":"56bcdd22a4c21d95001806b97f6a3831f8a50ab0","modified":1663213118305},{"_id":"public/about/index.html","hash":"08d6dcbb4bdc7f61e04bd81c86f91317d25f9ad3","modified":1663050606372},{"_id":"public/archives/index.html","hash":"b263a8d7fce760a152e567e8e77c9a0701e2ef66","modified":1663213118305},{"_id":"public/archives/2022/index.html","hash":"9ffb6f8e109bb644255a5d679138efba6d0d647d","modified":1663213118305},{"_id":"public/archives/2022/08/index.html","hash":"1a1f832408a3bcb740861b7e63e48b985166fe7c","modified":1663213118305},{"_id":"public/categories/Test/index.html","hash":"1f6e0d13e7cc214f7862a32bf9cfc2a6a65329a4","modified":1663050606372},{"_id":"public/index.html","hash":"5ebf21df774f3283523bd311d517c4cdfb5ec3f3","modified":1663213118305},{"_id":"public/tags/Test/index.html","hash":"31a37277d187425eec898770b2cc4eb7e73c1d61","modified":1663050606372},{"_id":"public/404.html","hash":"e62af0c7e74381490cd39dce8fb53bc44bc4ab4c","modified":1663050606372},{"_id":"public/tags/index.html","hash":"f6a6922d3579716831d37459000ae4e6196dc7a8","modified":1663213118305},{"_id":"public/categories/index.html","hash":"6339d22d584aa3dfc8b17fabcec74b9c78057f52","modified":1663213118305},{"_id":"public/links/index.html","hash":"bc42910cb49b358b160eee81954c2a67ff896af1","modified":1663050606372},{"_id":"public/2022/08/23/test/index.html","hash":"44e526f0c355b96958edda2506374ffbb9c02fe2","modified":1663060063723},{"_id":"public/2022/08/23/hello-world/index.html","hash":"e30fee22b17bda899ac112ca30a07925143b1c5b","modified":1663057764595},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1663050606372},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1663050606372},{"_id":"public/img/img_01.jpg","hash":"35e03e70ae7af35bd26faa6a0be7651a1c19e55b","modified":1663050606372},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1663050606372},{"_id":"public/img/orange_cat.png","hash":"f693b51df69435524ce213c5bd23a9416c622f9a","modified":1663050606372},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1663050606372},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1663050606372},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1663050606372},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1663050606372},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1663050606372},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1663050606372},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1663050606372},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1663050606372},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1663050606372},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1663050606372},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1663050606372},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1663050606372},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1663050606372},{"_id":"public/css/main.css","hash":"f7ce6ed5308c621930136e91fe5e47d1ad91130b","modified":1663050606372},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1663050606372},{"_id":"public/img/wallhaven.jpg","hash":"c618634378d8dac47c262ec72d44e63ab051ee4f","modified":1663050606372},{"_id":"source/_posts/file_tidying.md","hash":"efa44ab28787c5b4811c5584441e10031d87a735","modified":1663053401000},{"_id":"public/archives/2022/03/index.html","hash":"a14150d75dc55f567715fdc0dcb67853a1bd10fc","modified":1663213118305},{"_id":"public/categories/学习【资料整理记录】/index.html","hash":"ce7fc5d02c20e71756e723ff737f821fb58a1fff","modified":1663213118305},{"_id":"public/tags/文件整理/index.html","hash":"c252f5afa67851cec048f1d048d68d314ac1ca78","modified":1663057764595},{"_id":"public/2022/03/27/file_tidying/index.html","hash":"75656b24697fd28cc5064d6293cc023d0e6f2260","modified":1663053444523},{"_id":"source/_posts/绩效统计.md","hash":"d70d2bbd3b831b5bedbe62f3061a5e7424e26a14","modified":1663053665000},{"_id":"public/archives/2022/09/index.html","hash":"bd9acab49d782c615d67618829f89c5dbc52176f","modified":1663213118305},{"_id":"public/2022/09/01/绩效统计/index.html","hash":"7c585d4391ead32ba12cd6dabeee79594b0ab0cc","modified":1663053952816},{"_id":"source/_posts/Go源码阅读.md","hash":"77dbb224d9dc40f4fdb2bdb9f5a5a8b01bccae9e","modified":1663056049000},{"_id":"source/_posts/docker.md","hash":"58df2ccca860380f63ff6d96a849c2e970603114","modified":1663055079000},{"_id":"source/_posts/github-ssh.md","hash":"7bcbb4bd4f53d9bb4265a7eb55b4cfc6c98691fa","modified":1663055293000},{"_id":"source/_posts/goFunc.md","hash":"3ec0619d8f1c47eb71104c09072d5b72f3a5e3e6","modified":1663055463000},{"_id":"source/_posts/linuxCmd.md","hash":"2a5e73f4030fdf69b0576e27cd3b546046e108f0","modified":1663055830000},{"_id":"source/_posts/slot.md","hash":"195ce4a95522021c5b88991f0ac285531d008832","modified":1663055788000},{"_id":"source/_posts/windows_soft.md","hash":"00520a4b23fe6ad171e5c95c84d23127258d7c9a","modified":1663055824000},{"_id":"source/_posts/开发环境搭建.md","hash":"64c98e2df19989ae4e8afa52ce174f4f96abe28e","modified":1663055122000},{"_id":"source/_posts/文件整理.md","hash":"487a78c9cb22836851d8d97666c40e931128310e","modified":1663055100000},{"_id":"source/_posts/炸金花算法.md","hash":"5d87dbf68f030bed9f31c850ae782138f521e95e","modified":1663055092000},{"_id":"source/_posts/自学习内容.md","hash":"e764df3719ecc86017a836a4a953b7ca069ddf87","modified":1663055094000},{"_id":"source/_posts/跑得快算法.md","hash":"bfbd88d9e72e24f1abf482e48963181f1e94276b","modified":1663055112000},{"_id":"source/_posts/麻将算法.md","hash":"54cf6ca512fc2158f89e74b45a4feeda71a62892","modified":1663055108000},{"_id":"public/archives/page/2/index.html","hash":"ddfb4905b3b9f877ff53ced78af7f02ded239870","modified":1663213118305},{"_id":"public/archives/2020/index.html","hash":"d69082ac831381149be6d0b7477d60ff01694050","modified":1663213118305},{"_id":"public/archives/2020/03/index.html","hash":"65ec7deba6d9f9f5a878050fd68b7849382abbf6","modified":1663213118305},{"_id":"public/archives/2020/11/index.html","hash":"5ea8c9b089b45844e33c782b3082e13e418ee219","modified":1663213118305},{"_id":"public/archives/2021/index.html","hash":"c6136217c96378fdc35057403faa0f215a4d4307","modified":1663213118305},{"_id":"public/archives/2021/02/index.html","hash":"0a33708417756728677299f36a5f05a11f58af46","modified":1663213118305},{"_id":"public/archives/2021/03/index.html","hash":"e3ba48265cbc3c0f36b9070d507a980a67ffa6e7","modified":1663213118305},{"_id":"public/archives/2021/04/index.html","hash":"4d1c94593473fc199b93215790bc2cab73c5c26f","modified":1663213118305},{"_id":"public/archives/2021/10/index.html","hash":"74fb0769db8ddc9ae7111b6701259dbc664a57ad","modified":1663213118305},{"_id":"public/categories/工作【间歇性记录】/index.html","hash":"277efa539bc553c3026efd67c6abaf23b9510872","modified":1663057764595},{"_id":"public/tags/Docker/index.html","hash":"a385f3ca8463e7379dbbdd7cfe430b4ec4bee8c7","modified":1663057764595},{"_id":"public/tags/Git/index.html","hash":"97fa4df855e2a93286c376f287d5211910412c9f","modified":1663060063723},{"_id":"public/tags/Go/index.html","hash":"4f9ea3c514ffe8fdb84db7c6e61141495a77777b","modified":1663060063723},{"_id":"public/tags/服务部署/index.html","hash":"724bb5a1b233fc49f43fb40afc78711df727abf7","modified":1663057764595},{"_id":"public/tags/windows/index.html","hash":"2ead6e4fefd14119754b002cbf5e85d83fc783bf","modified":1663057764595},{"_id":"public/tags/麻将/index.html","hash":"c51015fc2364b8accda598b625f1924f2c1b1a91","modified":1663057764595},{"_id":"public/tags/算法/index.html","hash":"d0ad6fb640d9c862d9278fee389eba6d975aba5c","modified":1663213118305},{"_id":"public/tags/跑得快/index.html","hash":"c4c61318e4ae33f8e3021924fce43b55c32b90a5","modified":1663057764595},{"_id":"public/tags/炸金花/index.html","hash":"cb94b914b7107173690c730fe18168247d70bb67","modified":1663057764595},{"_id":"public/tags/数据结构/index.html","hash":"52895617e6707b07d8879219439cabc7cffc08da","modified":1663213118305},{"_id":"public/tags/设计模式/index.html","hash":"45a4815c0f494320f27cbc5324f1fbf2adc201df","modified":1663057764595},{"_id":"public/tags/框架/index.html","hash":"31b1125a27193fe97be4e3a55bb531ab6f1acc9a","modified":1663057764595},{"_id":"public/tags/更新策略/index.html","hash":"87951282b7e71d12812c9bbe06b241332f479279","modified":1663057764595},{"_id":"public/2022/09/13/github-ssh/index.html","hash":"97f769608a10b031d5e2146473d6f6310f746c1c","modified":1663060063723},{"_id":"public/2022/09/13/Go源码阅读/index.html","hash":"48a3515574f8435e6295601e850d7f68eb749bd6","modified":1663057764595},{"_id":"public/2022/08/23/docker/index.html","hash":"d0b775f03d9d9d9b4f6b189cab7227a0d84aed5c","modified":1663060063723},{"_id":"public/2022/03/27/文件整理/index.html","hash":"85a40a095c69a106d12f77b98f266e2168a8c496","modified":1663060063723},{"_id":"public/2021/10/12/自学习内容/index.html","hash":"16d6da3af9b4417fb448339058c660d7b6e2b16f","modified":1663060063723},{"_id":"public/2021/04/02/slot/index.html","hash":"399775d7f6933c9989eb56397ce7b672ad7171b3","modified":1663057764595},{"_id":"public/2021/03/16/炸金花算法/index.html","hash":"b8e4f722cafc687e90d09b68db81a49138eedf7e","modified":1663057764595},{"_id":"public/2021/03/05/麻将算法/index.html","hash":"5566fe615a6b50091aa84dee61c4c8f72e5c811d","modified":1663057764595},{"_id":"public/2021/03/03/开发环境搭建/index.html","hash":"856a22255a3d6e73cc45286dfb0ce8aea90e0780","modified":1663057764595},{"_id":"public/2021/02/27/跑得快算法/index.html","hash":"c9b8de8e4ce0a50748211018b1dde9a128c6105f","modified":1663057764595},{"_id":"public/2020/11/25/linuxCmd/index.html","hash":"fc27834e6e6d3043f1c39de7e018ae874549f547","modified":1663057764595},{"_id":"public/2020/11/25/windows_soft/index.html","hash":"bc91e0b701de18146dd1ce6c2c2ac5b97cdedff9","modified":1663062135871},{"_id":"public/2020/03/01/goFunc/index.html","hash":"dabde7696b7e294fdf7a4c82f2e74a2ae6279948","modified":1663060063723},{"_id":"public/page/2/index.html","hash":"b8dc6f5e17f903f8ac6b26cba97dc6f084333cc7","modified":1663213118305},{"_id":"source/_posts/Gin-web开发入门.md","hash":"e4ca16f97a9d82290160c2a26aee4c34732876a5","modified":1663061388000},{"_id":"source/_posts/Git命令的简单使用.md","hash":"cc7f0da0412f313e8e95ddbfe8603ffedfab1478","modified":1663061457000},{"_id":"source/_posts/GoLang中if临时变量的生存周期.md","hash":"9d575fd83be85d687ce96e1b8e08b89cd2df8ee8","modified":1663061539000},{"_id":"source/_posts/JDK的安装与环境配置.md","hash":"484a837c187fa230e7fae1145a7e86704ec76ac9","modified":1663061716000},{"_id":"source/_posts/JS两个日期之间计算时间差.md","hash":"e5fc930c2734a287d4622b4078dfc3eed451e1cd","modified":1663061840000},{"_id":"source/_posts/MySQL57的安装与使用.md","hash":"d19a38306014839b6e14695bd1508f7567f35c27","modified":1663061909000},{"_id":"source/_posts/MySQL中WHERE子句不等于的使用.md","hash":"8705d95ddb344b08879192c2deef7a045566a3d3","modified":1663062086000},{"_id":"source/_posts/MySQL按天建表.md","hash":"7b7be14efe5a9ded576427eec173767372ab4ebc","modified":1663062074000},{"_id":"source/_posts/int类型转string类型.md","hash":"dd939c1e4690078474705391ae129ecdd622a282","modified":1663061689000},{"_id":"source/_posts/maven的安装.md","hash":"6d79372f176e1b43d41d8e88c7540e9ed18bcde4","modified":1663061865000},{"_id":"source/_posts/二进制某位数0变1，1变0.md","hash":"537b51ee0afa0326eb20120b91547b25e7d3e8d4","modified":1663060815000},{"_id":"source/_posts/产品更新相关.md","hash":"d74ecfdab72feb8eb33ca3537524fd45ef3c221b","modified":1663060558000},{"_id":"source/_posts/去除windows脚本cmd小黑框.md","hash":"bd193156ef565a0e341a55bff7fea08adc8ab12b","modified":1663060932000},{"_id":"source/_posts/用Go在windows编译linux可执行文件.md","hash":"ac2656b525920191f833c114fd2f012daf099d12","modified":1663061157000},{"_id":"source/_posts/网站标签页如何添加左边的小图标.md","hash":"20afed1100cb6975c1fc8f4442c0a7ccd5b40d8f","modified":1663061025000},{"_id":"public/archives/page/3/index.html","hash":"8e291dff672f6886987e9042f3e2407c209c4b61","modified":1663213118305},{"_id":"public/archives/2019/index.html","hash":"18a73a0f38e509c9be01b4ff2df39e6177107b0a","modified":1663213118305},{"_id":"public/archives/2019/02/index.html","hash":"77c2e51d2d62f70feaf3fca2681afc0c08854404","modified":1663213118305},{"_id":"public/archives/2019/03/index.html","hash":"8e09a4baa77ec6da3bcb624e9dfe659ccb6bf4fe","modified":1663213118305},{"_id":"public/archives/2019/12/index.html","hash":"489acd7011e7a706f8b6b5781f31f77efef5f2d8","modified":1663213118305},{"_id":"public/archives/2020/01/index.html","hash":"cc82ed02ddf92d6fc527460a1ab46a24ad584857","modified":1663213118305},{"_id":"public/archives/2020/08/index.html","hash":"415114d8d2e22c3c8173643a700b530e9d1a0763","modified":1663213118305},{"_id":"public/archives/2022/02/index.html","hash":"b3b65abe9db010e00804e0317565a55cdc19069a","modified":1663213118305},{"_id":"public/categories/学习【资料整理记录】/page/2/index.html","hash":"cbb5f9648bf9081982a96b5d74d3dfd40ad0ba8c","modified":1663213118305},{"_id":"public/categories/学习【资料整理记录】/page/3/index.html","hash":"2d893cf277ef594ca90a5f14404d1bb556356bd8","modified":1663213118305},{"_id":"public/tags/Gin/index.html","hash":"587f81e6e0572648441cf661035fa20700d7a5f5","modified":1663060063723},{"_id":"public/tags/Java/index.html","hash":"bfd61659d0fbe128ccb28b1a3c7c6a61bebb1e20","modified":1663060063723},{"_id":"public/tags/JDK/index.html","hash":"fcc00d4c68d0142a73f51e811f9ebc9ac92fbdb7","modified":1663060063723},{"_id":"public/tags/Html/index.html","hash":"5d85607456d686376bf20c6ae7869c44d23854a3","modified":1663060063723},{"_id":"public/tags/Js/index.html","hash":"083998c3fcfbf0d794aea3a71df66dcd98a8a1d9","modified":1663060063723},{"_id":"public/tags/MySQL/index.html","hash":"92f297f32f3b208bc99d382555e55ed6c0fc5a0b","modified":1663060063723},{"_id":"public/tags/产品更新/index.html","hash":"3eb04ba12bef7f7e47343606b340760cfb073cfa","modified":1663060063723},{"_id":"public/tags/二进制/index.html","hash":"23199fdc64c69c10ca52b0cc95a0daf7b1e3875f","modified":1663060063723},{"_id":"public/tags/Windows/index.html","hash":"91d5b54313602c7ba74a84d5c85b4a3284b2758d","modified":1663060063723},{"_id":"public/tags/Linux/index.html","hash":"902766146c73adf042fedab3622fd6bc28151c0d","modified":1663060063723},{"_id":"public/tags/Maven/index.html","hash":"5ead4f509bd857c9443d58f25d6980746546b22e","modified":1663060063723},{"_id":"public/2022/09/13/hello-world/index.html","hash":"20530304071cd04e1ad09eda55f592c6116319ad","modified":1663213118305},{"_id":"public/2022/02/27/JDK的安装与环境配置/index.html","hash":"0d1b2197022e6730b2bae63cf51a8ee3c4d8304b","modified":1663062135871},{"_id":"public/2020/08/29/Gin-web开发入门/index.html","hash":"4438579959707ae4b0d42435b73248ac2b4d7050","modified":1663062135871},{"_id":"public/2020/03/25/GoLang中if临时变量的生存周期/index.html","hash":"4fb793b65c6ed65cc325e307681dd85049adb42e","modified":1663062135871},{"_id":"public/2020/03/25/int类型转string类型/index.html","hash":"2672e1fc435526e9965d577520146a5324c5e534","modified":1663062135871},{"_id":"public/2020/03/17/MySQL中WHERE子句不等于的使用/index.html","hash":"60ba61274f4ff4b3595044705e197e555ba230c2","modified":1663062135871},{"_id":"public/2020/03/17/产品更新相关/index.html","hash":"5dcf68b2035fb51f94bf8bb01bc593e7a010d151","modified":1663062135871},{"_id":"public/2020/03/17/去除windows脚本cmd小黑框/index.html","hash":"d7fd43c19301701597543e024ed8c71caef168ce","modified":1663062135871},{"_id":"public/2020/01/02/MySQL按天建表/index.html","hash":"789d9a9bb802141c3d0fc0c22a15d459079f28b5","modified":1663062135871},{"_id":"public/2019/12/28/二进制某位数0变1，1变0/index.html","hash":"638a889e4f8eebf1834da10c16a0d1777b8cd295","modified":1663062135871},{"_id":"public/2019/12/01/MySQL57的安装与使用/index.html","hash":"91449cbd60a592a30df51d4b2c6ef0b1e72301c7","modified":1663062135871},{"_id":"public/2019/12/01/用Go在windows编译linux可执行文件/index.html","hash":"669a71589f13e46b8dc7a1a7626b1c0dd1458896","modified":1663062135871},{"_id":"public/2019/12/01/maven的安装/index.html","hash":"cd4c723de58dc144f534b667374d75d43f4a7e9c","modified":1663062135871},{"_id":"public/2019/03/06/Git命令的简单使用/index.html","hash":"1c3a74dd26163fd6d3137b195d409bc5b1e1a1c4","modified":1663062135871},{"_id":"public/2019/03/06/JS两个日期之间计算时间差/index.html","hash":"d61a735259068f6916f57ee3345a0f34bfc0d304","modified":1663062135871},{"_id":"public/2019/02/28/网站标签页如何添加左边的小图标/index.html","hash":"435ed1d5f933dbfb1917b6bfd4e48caa538643df","modified":1663062135871},{"_id":"public/page/3/index.html","hash":"83adfaa41bbd7516c29debb9a8749517d06b64a2","modified":1663213118305},{"_id":"source/_posts/2022-09-14-数据结构与算法基础.md","hash":"1dd9424ee840870b7f4e804d6ea47454db462a9a","modified":1663213014000},{"_id":"source/_posts/2022-09-14-系统安全分析与设计.md","hash":"eba46f953f019f6471c7c48496e8c5ef0e7342d0","modified":1663211324000},{"_id":"source/_posts/2022-09-14-计算机网络.md","hash":"88d74bd113a92bcb53363440614b906d6d7c143d","modified":1663127379000},{"_id":"public/archives/page/4/index.html","hash":"62171cc6c48697a3a04ffa29fccace80531c149d","modified":1663213118305},{"_id":"public/tags/软件设计师【软考】/index.html","hash":"81bdfc302ace1da321112b6eb5e5eadf0cb775d9","modified":1663213118305},{"_id":"public/tags/系统安全分析与设计/index.html","hash":"f0ae18bec609d2678d691697e5f874df04bc3d10","modified":1663213118305},{"_id":"public/tags/计算机网络/index.html","hash":"7856264647b88785429d92dc4dd7cb23415ff6ad","modified":1663213118305},{"_id":"public/2022/09/15/2022-09-14-数据结构与算法基础/index.html","hash":"9c6d7f83390e16e82586c8aeb3268e9dac790cef","modified":1663213118305},{"_id":"public/2022/09/14/2022-09-14-系统安全分析与设计/index.html","hash":"96126dd3fe4d2cc93a776da7e29b7ca66243f758","modified":1663213118305},{"_id":"public/2022/09/14/2022-09-14-计算机网络/index.html","hash":"693d545c29a2ae2aea6319c884463523b32f8a51","modified":1663213118305},{"_id":"public/page/4/index.html","hash":"2ee2cfa7bdb1ab47c235795f15861521c3caf321","modified":1663213118305}],"Category":[{"name":"Test","_id":"cl7zte4mz00044qpv7k25ex2m"},{"name":"学习【资料整理记录】","_id":"cl7zv05ql0001nfpvaz6pdxyd"},{"name":"工作【间歇性记录】","_id":"cl7zwobn6000ksspva1upfn7z"}],"Data":[],"Page":[{"title":"关于","layout":"about","date":"2022-08-24T03:29:49.000Z","_content":"\n正文。。。\n","source":"about/index.md","raw":"---\ntitle: 关于\nlayout: about\ndate: 2022-08-24 11:29:49\n---\n\n正文。。。\n","updated":"2022-08-24T03:30:48.562Z","path":"about/index.html","comments":1,"_id":"cl7zte4mo00004qpv1x4ndfal","content":"<p>正文。。。</p>\n","site":{"data":{}},"wordcount":5,"excerpt":"","more":"<p>正文。。。</p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-09-13T09:42:06.650Z","updated":"2022-08-23T07:21:16.000Z","_id":"cl7zte4ms00014qpv1qfidbnz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"wordcount":367,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Test","date":"2022-08-23T07:55:08.000Z","updated":"2022-09-09T06:47:00.000Z","_content":"\n这里是公众号「宫水三叶的刷题日记」的 Github 仓库 🎉🎉\n\n\n\n![Anurag's GitHub stats](https://github-readme-stats.vercel.app/api?username=SharingSource&show_icons=true&theme=default)\n","source":"_posts/test.md","raw":"---\ntitle: Test\ndate: 2022-08-23 15:55:08\nupdated: 2022-09.09 14:47:00\ntags:\n- [Test]\ncategories:\n- [Test]\n---\n\n这里是公众号「宫水三叶的刷题日记」的 Github 仓库 🎉🎉\n\n\n\n![Anurag's GitHub stats](https://github-readme-stats.vercel.app/api?username=SharingSource&show_icons=true&theme=default)\n","slug":"test","published":1,"_id":"cl7zte4mw00024qpv41x13zww","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这里是公众号「宫水三叶的刷题日记」的 Github 仓库 🎉🎉</p>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=SharingSource&show_icons=true&theme=default\" alt=\"Anurag&#39;s GitHub stats\"></p>\n","site":{"data":{}},"wordcount":30,"excerpt":"","more":"<p>这里是公众号「宫水三叶的刷题日记」的 Github 仓库 🎉🎉</p>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=SharingSource&show_icons=true&theme=default\" alt=\"Anurag&#39;s GitHub stats\"></p>\n"},{"title":"自学习内容","date":"2022-08-23T04:00:00.000Z","_content":"\n## docker\n\ndocker容器不保持任何数据\n重要数据请使用外部卷存储（数据持久化）\n容器可以挂载真实机目录或共享存储为卷\n\n### 主机卷映射：\n\n- 宿主机到docker容器映射：\n\n```csharp\ndocker run -it -v /var/data:/abc myos\n```\n\n- 自定义容器内部网络\n\n```\ndocker network create --subnet=172.18.0.0/16 mynet\n```\n\n- 使用自定义网络运行容器,再次重启时就不会按照启动顺序分配172.17.0.1网段的ip地址了\n\n```\ndocker run -itd --name vm  --net bind --ip 172.18.0.103 centos /sbin/init\n```\n\n原文地址：https://cloud.tencent.com/developer/article/1966389\n\n## 修复: “Error: Failed to download metadata for repo appstream” – CentOS 8系统错误\n\n**解决方案：迁移到 CentOS Stream 8 或替代发行版**\n\n```\ndnf --disablerepo '*' --enablerepo=extras swap centos-linux-repos centos-stream-repos \ndnf distro-sync\n```\n\ndocker 桥接方式映射宿主机IP端口，并挂载宿主机文件卷，初始化容器环境，赋予最高操作权限\n\n```\ndocker run -itd --name goservice -p 41002:31002 -p 10989:9898 --privileged -v /root/hn_match_debug/:/root/hn_match_debug/ centos /sbin/init\n```\n\n\n\n注册mongod服务\n\nmogod.conf\n\n```\n# ip\n\nbind_ip=0.0.0.0\n\n# mongodb port number\n\nport=27017\n\n# mongodb data file path\n\ndbpath=/var/lib/mongo\n\n# mongodb log file path\n\nlogpath=/var/log/mongodb/mongod.log\n\n# mongodb automatically append log files\n\nlogappend=true\n```\n\nmongod\n\n进入 /etc/init.d/ 目录\n`# cd /etc/init.d/`\n创建并编辑mongodb文件\n`# vim mongodb`\n\n```\n#!/bin/bash\n#chkconfig:345 61 61\n#description:mongod\n\n# mongoDB shell version v5.0.9\n\n# connecting to: mongodb://0.0.0.0:27017\n\n# MongoDB server version: 5.0.9\n\nMONGO_PATH=/usr/local/mongodb5/bin/mongod\nMONGO_PID=`ps -ef|grep 'mongod' | grep -v grep|awk '{print $2}'`\ntest -x $MONGO_PATH || exit 0\n\ncase \"$1\" in\n  start)\n     ulimit -n 2000\n     echo \"starting mongod server\"\n     $MONGO_PATH --fork --quiet -f /usr/local/mongodb5/mongod.conf\n     echo \"started mongod server\"\n     ;;\n  stop)\n     echo \"stopping mongod server\"\n     if [ ! -z \"$MONGO_PID\" ]; then\n        kill -15 $MONGO_PID\n     fi\n        echo \"stopped mongod server\"\n     ;;\n  status)\n     ;;\n  *)\n     echo \"usage: mongod {start|stop|status}\"\n     exit 1\nesac\n\nexit 0\n```\n\n上述文件配置完成后，执行一下几条命令\n\n```\n# chmod +x /etc/init.d/mongod\n# chkconfig --add mongod\n# chkconfig mongod on\n```\n\n启动时去除ip绑定\n\n```\nmongod --bind_ip 0.0.0.0\n```\n\n## 一：通过修改配置文件修改docker容器端口映射\n\n1.使用**docker ps -a**命令找到要修改容器的**CONTAINER ID**\n\n2.运行以下命令，进入该容器目录\n\n```text\ndocker inspect【CONTAINER ID】| grep Id\ncd /var/lib/docker/containers\n```\n\n2.停止容器\n\n```text\ndocker stop [容器id]\n```\n\n3.停止主机docker服务\n\n```text\nsystemctl stop docker\n```\n\n4.进入2得到的文件夹内，修改hostconfig.json 和 config.v2.json\n\n```text\nvi hostconfig.json\n\n比如新增一个 80 端口，在PortBindings下边添加以下内容，端口配置之间用英文字符逗号隔开\n\n\"80/tcp\": [ \n{\n \"HostIp\": \"0.0.0.0\",\n \"HostPort\": \"80\"\n }\n]\n接着修改vi config.v2.json, 找到ExposedPorts和Ports  仿照之前内容添加端口映射\n\"ExposedPorts\":  {\n    \"2000/tcp\":   {}\n},\n\n\"Ports\":{\n   \"2000/tcp\":[\n        {\n         \"HostIp\": \"0.0.0.0\",\n         \"HostPort\":  \"2000\"\n         }\n]\n},\n```\n\n5.保存之后重启docker服务和容器\n\n```text\nsystemctl start docker\ndocker start [docker id]\n```\n\n## 二：把运行中的容器生成新的镜像，再新建容器\n\n1.提交一个运行中的容器为镜像\n\n```text\ndocker commit [containerid] [new_imagename]\n```\n\n2.运行新建的镜像并添加端口映射\n\n```text\ndocker run -d -p 8000:80  [imagename] /bin/sh\n```\n\n## 三：修改主机iptables端口映射\n\n> docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。\n\n如果我们有一个容器的8000端口映射到主机的9000端口，先查看iptabes设置了什么规则：\n\n```text\nsudo iptables -t nat -vnL\n```\n\n结果中有一条：\n\n```text\nChain DOCKER (2 references)\npkts bytes target prot opt in     out     source        destination         \n 98  5872 RETURN  all  --  docker0 *     0.0.0.0/0     0.0.0.0/0           \n237 14316 DNAT    tcp  --  !docker0 *    0.0.0.0/0    0.0.0.0/0    tcp dpt:9000 to:172.17.0.3:8000\n```\n\n我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放8000端口的容器的ip是172.17.0.3。\n\n也可以通过inspect命令查看容器ip\n\n```text\ndocker inspect [containerId] |grep IPAddress\n```\n\n我们想再增加一个端口映射，比如`8081->81`，就在这个链条是再加一条规则：\n\n```text\nsudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81\n```\n\n加错了或者想修改：先显示行号查看\n\n```text\nsudo iptables -t nat -vnL DOCKER --line-number\n```\n\n删除规则3\n\n```text\nsudo iptables -t nat -D DOCKER 3\n```\n\n","source":"_posts/docker.md","raw":"---\ntitle: 自学习内容\ndate: 2022-08-23 12:00:00\ntags:\n- Docker\ncategories:\n- 学习【资料整理记录】\n---\n\n## docker\n\ndocker容器不保持任何数据\n重要数据请使用外部卷存储（数据持久化）\n容器可以挂载真实机目录或共享存储为卷\n\n### 主机卷映射：\n\n- 宿主机到docker容器映射：\n\n```csharp\ndocker run -it -v /var/data:/abc myos\n```\n\n- 自定义容器内部网络\n\n```\ndocker network create --subnet=172.18.0.0/16 mynet\n```\n\n- 使用自定义网络运行容器,再次重启时就不会按照启动顺序分配172.17.0.1网段的ip地址了\n\n```\ndocker run -itd --name vm  --net bind --ip 172.18.0.103 centos /sbin/init\n```\n\n原文地址：https://cloud.tencent.com/developer/article/1966389\n\n## 修复: “Error: Failed to download metadata for repo appstream” – CentOS 8系统错误\n\n**解决方案：迁移到 CentOS Stream 8 或替代发行版**\n\n```\ndnf --disablerepo '*' --enablerepo=extras swap centos-linux-repos centos-stream-repos \ndnf distro-sync\n```\n\ndocker 桥接方式映射宿主机IP端口，并挂载宿主机文件卷，初始化容器环境，赋予最高操作权限\n\n```\ndocker run -itd --name goservice -p 41002:31002 -p 10989:9898 --privileged -v /root/hn_match_debug/:/root/hn_match_debug/ centos /sbin/init\n```\n\n\n\n注册mongod服务\n\nmogod.conf\n\n```\n# ip\n\nbind_ip=0.0.0.0\n\n# mongodb port number\n\nport=27017\n\n# mongodb data file path\n\ndbpath=/var/lib/mongo\n\n# mongodb log file path\n\nlogpath=/var/log/mongodb/mongod.log\n\n# mongodb automatically append log files\n\nlogappend=true\n```\n\nmongod\n\n进入 /etc/init.d/ 目录\n`# cd /etc/init.d/`\n创建并编辑mongodb文件\n`# vim mongodb`\n\n```\n#!/bin/bash\n#chkconfig:345 61 61\n#description:mongod\n\n# mongoDB shell version v5.0.9\n\n# connecting to: mongodb://0.0.0.0:27017\n\n# MongoDB server version: 5.0.9\n\nMONGO_PATH=/usr/local/mongodb5/bin/mongod\nMONGO_PID=`ps -ef|grep 'mongod' | grep -v grep|awk '{print $2}'`\ntest -x $MONGO_PATH || exit 0\n\ncase \"$1\" in\n  start)\n     ulimit -n 2000\n     echo \"starting mongod server\"\n     $MONGO_PATH --fork --quiet -f /usr/local/mongodb5/mongod.conf\n     echo \"started mongod server\"\n     ;;\n  stop)\n     echo \"stopping mongod server\"\n     if [ ! -z \"$MONGO_PID\" ]; then\n        kill -15 $MONGO_PID\n     fi\n        echo \"stopped mongod server\"\n     ;;\n  status)\n     ;;\n  *)\n     echo \"usage: mongod {start|stop|status}\"\n     exit 1\nesac\n\nexit 0\n```\n\n上述文件配置完成后，执行一下几条命令\n\n```\n# chmod +x /etc/init.d/mongod\n# chkconfig --add mongod\n# chkconfig mongod on\n```\n\n启动时去除ip绑定\n\n```\nmongod --bind_ip 0.0.0.0\n```\n\n## 一：通过修改配置文件修改docker容器端口映射\n\n1.使用**docker ps -a**命令找到要修改容器的**CONTAINER ID**\n\n2.运行以下命令，进入该容器目录\n\n```text\ndocker inspect【CONTAINER ID】| grep Id\ncd /var/lib/docker/containers\n```\n\n2.停止容器\n\n```text\ndocker stop [容器id]\n```\n\n3.停止主机docker服务\n\n```text\nsystemctl stop docker\n```\n\n4.进入2得到的文件夹内，修改hostconfig.json 和 config.v2.json\n\n```text\nvi hostconfig.json\n\n比如新增一个 80 端口，在PortBindings下边添加以下内容，端口配置之间用英文字符逗号隔开\n\n\"80/tcp\": [ \n{\n \"HostIp\": \"0.0.0.0\",\n \"HostPort\": \"80\"\n }\n]\n接着修改vi config.v2.json, 找到ExposedPorts和Ports  仿照之前内容添加端口映射\n\"ExposedPorts\":  {\n    \"2000/tcp\":   {}\n},\n\n\"Ports\":{\n   \"2000/tcp\":[\n        {\n         \"HostIp\": \"0.0.0.0\",\n         \"HostPort\":  \"2000\"\n         }\n]\n},\n```\n\n5.保存之后重启docker服务和容器\n\n```text\nsystemctl start docker\ndocker start [docker id]\n```\n\n## 二：把运行中的容器生成新的镜像，再新建容器\n\n1.提交一个运行中的容器为镜像\n\n```text\ndocker commit [containerid] [new_imagename]\n```\n\n2.运行新建的镜像并添加端口映射\n\n```text\ndocker run -d -p 8000:80  [imagename] /bin/sh\n```\n\n## 三：修改主机iptables端口映射\n\n> docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。\n\n如果我们有一个容器的8000端口映射到主机的9000端口，先查看iptabes设置了什么规则：\n\n```text\nsudo iptables -t nat -vnL\n```\n\n结果中有一条：\n\n```text\nChain DOCKER (2 references)\npkts bytes target prot opt in     out     source        destination         \n 98  5872 RETURN  all  --  docker0 *     0.0.0.0/0     0.0.0.0/0           \n237 14316 DNAT    tcp  --  !docker0 *    0.0.0.0/0    0.0.0.0/0    tcp dpt:9000 to:172.17.0.3:8000\n```\n\n我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放8000端口的容器的ip是172.17.0.3。\n\n也可以通过inspect命令查看容器ip\n\n```text\ndocker inspect [containerId] |grep IPAddress\n```\n\n我们想再增加一个端口映射，比如`8081->81`，就在这个链条是再加一条规则：\n\n```text\nsudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81\n```\n\n加错了或者想修改：先显示行号查看\n\n```text\nsudo iptables -t nat -vnL DOCKER --line-number\n```\n\n删除规则3\n\n```text\nsudo iptables -t nat -D DOCKER 3\n```\n\n","slug":"docker","published":1,"updated":"2022-09-13T07:44:39.000Z","_id":"cl7zwlnyj0000sspv0g8a7dlg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p>docker容器不保持任何数据<br>重要数据请使用外部卷存储（数据持久化）<br>容器可以挂载真实机目录或共享存储为卷</p>\n<h3 id=\"主机卷映射：\"><a href=\"#主机卷映射：\" class=\"headerlink\" title=\"主机卷映射：\"></a>主机卷映射：</h3><ul>\n<li>宿主机到docker容器映射：</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">docker run -it -v /<span class=\"hljs-keyword\">var</span>/data:/abc myos<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义容器内部网络</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker<span class=\"hljs-built_in\"> network </span>create <span class=\"hljs-attribute\">--subnet</span>=172.18.0.0/16 mynet<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用自定义网络运行容器,再次重启时就不会按照启动顺序分配172.17.0.1网段的ip地址了</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">docker run -itd <span class=\"hljs-params\">--name</span> vm  <span class=\"hljs-params\">--net</span> bind <span class=\"hljs-params\">--ip</span> 172.18.0.103 centos <span class=\"hljs-string\">/sbin/init</span><br></code></pre></td></tr></table></figure>\n\n<p>原文地址：<a href=\"https://cloud.tencent.com/developer/article/1966389\">https://cloud.tencent.com/developer/article/1966389</a></p>\n<h2 id=\"修复-“Error-Failed-to-download-metadata-for-repo-appstream”-–-CentOS-8系统错误\"><a href=\"#修复-“Error-Failed-to-download-metadata-for-repo-appstream”-–-CentOS-8系统错误\" class=\"headerlink\" title=\"修复: “Error: Failed to download metadata for repo appstream” – CentOS 8系统错误\"></a>修复: “Error: Failed to download metadata for repo appstream” – CentOS 8系统错误</h2><p><strong>解决方案：迁移到 CentOS Stream 8 或替代发行版</strong></p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">dnf</span> <span class=\"hljs-built_in\">--disablerepo</span> <span class=\"hljs-string\">&#x27;*&#x27;</span> <span class=\"hljs-built_in\">--enablerepo=extras</span> <span class=\"hljs-string\">swap</span> <span class=\"hljs-string\">centos-linux-repos</span> <span class=\"hljs-string\">centos-stream-repos</span> <br><span class=\"hljs-string\">dnf</span> <span class=\"hljs-string\">distro-sync</span><br></code></pre></td></tr></table></figure>\n\n<p>docker 桥接方式映射宿主机IP端口，并挂载宿主机文件卷，初始化容器环境，赋予最高操作权限</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -itd --name goservice -p <span class=\"hljs-number\">41002</span>:<span class=\"hljs-number\">31002</span> -p <span class=\"hljs-number\">10989</span>:<span class=\"hljs-number\">9898</span> --privileged -v <span class=\"hljs-regexp\">/root/</span>hn_match_debug<span class=\"hljs-regexp\">/:/</span>root<span class=\"hljs-regexp\">/hn_match_debug/</span> centos <span class=\"hljs-regexp\">/sbin/i</span>nit<br></code></pre></td></tr></table></figure>\n\n\n\n<p>注册mongod服务</p>\n<p>mogod.conf</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># ip</span><br><br><span class=\"hljs-attr\">bind_ip</span>=<span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">0.0</span><br><br><span class=\"hljs-comment\"># mongodb port number</span><br><br><span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">27017</span><br><br><span class=\"hljs-comment\"># mongodb data file path</span><br><br><span class=\"hljs-attr\">dbpath</span>=/var/lib/mongo<br><br><span class=\"hljs-comment\"># mongodb log file path</span><br><br><span class=\"hljs-attr\">logpath</span>=/var/log/mongodb/mongod.log<br><br><span class=\"hljs-comment\"># mongodb automatically append log files</span><br><br><span class=\"hljs-attr\">logappend</span>=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>mongod</p>\n<p>进入 /etc/init.d/ 目录<br><code># cd /etc/init.d/</code><br>创建并编辑mongodb文件<br><code># vim mongodb</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#!/bin/bash</span><br><span class=\"hljs-comment\">#chkconfig:345 61 61</span><br><span class=\"hljs-comment\">#description:mongod</span><br><br><span class=\"hljs-comment\"># mongoDB shell version v5.0.9</span><br><br><span class=\"hljs-comment\"># connecting to: mongodb://0.0.0.0:27017</span><br><br><span class=\"hljs-comment\"># MongoDB server version: 5.0.9</span><br><br>MONGO_PATH=<span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/mongodb5/</span>bin/mongod<br>MONGO_PID=`ps -ef|grep <span class=\"hljs-string\">&#x27;mongod&#x27;</span> | grep -v grep|awk <span class=\"hljs-string\">&#x27;&#123;print $2&#125;&#x27;</span>`<br>test -x <span class=\"hljs-variable\">$MONGO_PATH</span> || <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">0</span><br><br>case <span class=\"hljs-string\">&quot;$1&quot;</span> <span class=\"hljs-keyword\">in</span><br>  start)<br>     ulimit -n <span class=\"hljs-number\">2000</span><br>     echo <span class=\"hljs-string\">&quot;starting mongod server&quot;</span><br>     <span class=\"hljs-variable\">$MONGO_PATH</span> --fork --quiet -f <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/mongodb5/m</span>ongod.conf<br>     echo <span class=\"hljs-string\">&quot;started mongod server&quot;</span><br>     ;;<br>  stop)<br>     echo <span class=\"hljs-string\">&quot;stopping mongod server&quot;</span><br>     <span class=\"hljs-keyword\">if</span> [ ! -z <span class=\"hljs-string\">&quot;$MONGO_PID&quot;</span> ]; then<br>        kill -<span class=\"hljs-number\">15</span> <span class=\"hljs-variable\">$MONGO_PID</span><br>     fi<br>        echo <span class=\"hljs-string\">&quot;stopped mongod server&quot;</span><br>     ;;<br>  status)<br>     ;;<br>  *)<br>     echo <span class=\"hljs-string\">&quot;usage: mongod &#123;start|stop|status&#125;&quot;</span><br>     <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">1</span><br>esac<br><br><span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>上述文件配置完成后，执行一下几条命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">chmod</span> +x /etc/init.d/mongod</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">chkconfig --add mongod</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">chkconfig mongod on</span><br></code></pre></td></tr></table></figure>\n\n<p>启动时去除ip绑定</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">mongod</span> --bind_ip <span class=\"hljs-number\">0.0.0.0</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"一：通过修改配置文件修改docker容器端口映射\"><a href=\"#一：通过修改配置文件修改docker容器端口映射\" class=\"headerlink\" title=\"一：通过修改配置文件修改docker容器端口映射\"></a>一：通过修改配置文件修改docker容器端口映射</h2><p>1.使用<strong>docker ps -a</strong>命令找到要修改容器的<strong>CONTAINER ID</strong></p>\n<p>2.运行以下命令，进入该容器目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker inspect【CONTAINER ID】| grep Id<br>cd /var/lib/docker/containers<br></code></pre></td></tr></table></figure>\n\n<p>2.停止容器</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker stop [容器id]<br></code></pre></td></tr></table></figure>\n\n<p>3.停止主机docker服务</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">systemctl stop docker<br></code></pre></td></tr></table></figure>\n\n<p>4.进入2得到的文件夹内，修改hostconfig.json 和 config.v2.json</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">vi hostconfig.json<br><br>比如新增一个 80 端口，在PortBindings下边添加以下内容，端口配置之间用英文字符逗号隔开<br><br>&quot;80/tcp&quot;: [ <br>&#123;<br> &quot;HostIp&quot;: &quot;0.0.0.0&quot;,<br> &quot;HostPort&quot;: &quot;80&quot;<br> &#125;<br>]<br>接着修改vi config.v2.json, 找到ExposedPorts和Ports  仿照之前内容添加端口映射<br>&quot;ExposedPorts&quot;:  &#123;<br>    &quot;2000/tcp&quot;:   &#123;&#125;<br>&#125;,<br><br>&quot;Ports&quot;:&#123;<br>   &quot;2000/tcp&quot;:[<br>        &#123;<br>         &quot;HostIp&quot;: &quot;0.0.0.0&quot;,<br>         &quot;HostPort&quot;:  &quot;2000&quot;<br>         &#125;<br>]<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<p>5.保存之后重启docker服务和容器</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">systemctl start docker<br>docker start [docker id]<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二：把运行中的容器生成新的镜像，再新建容器\"><a href=\"#二：把运行中的容器生成新的镜像，再新建容器\" class=\"headerlink\" title=\"二：把运行中的容器生成新的镜像，再新建容器\"></a>二：把运行中的容器生成新的镜像，再新建容器</h2><p>1.提交一个运行中的容器为镜像</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker commit [containerid] [new_imagename]<br></code></pre></td></tr></table></figure>\n\n<p>2.运行新建的镜像并添加端口映射</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker run -d -p 8000:80  [imagename] /bin/sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三：修改主机iptables端口映射\"><a href=\"#三：修改主机iptables端口映射\" class=\"headerlink\" title=\"三：修改主机iptables端口映射\"></a>三：修改主机iptables端口映射</h2><blockquote>\n<p>docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。</p>\n</blockquote>\n<p>如果我们有一个容器的8000端口映射到主机的9000端口，先查看iptabes设置了什么规则：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">sudo iptables -t nat -vnL<br></code></pre></td></tr></table></figure>\n\n<p>结果中有一条：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">Chain DOCKER (2 references)<br>pkts bytes target prot opt in     out     source        destination         <br> 98  5872 RETURN  all  --  docker0 *     0.0.0.0/0     0.0.0.0/0           <br>237 14316 DNAT    tcp  --  !docker0 *    0.0.0.0/0    0.0.0.0/0    tcp dpt:9000 to:172.17.0.3:8000<br></code></pre></td></tr></table></figure>\n\n<p>我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放8000端口的容器的ip是172.17.0.3。</p>\n<p>也可以通过inspect命令查看容器ip</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker inspect [containerId] |grep IPAddress<br></code></pre></td></tr></table></figure>\n\n<p>我们想再增加一个端口映射，比如<code>8081-&gt;81</code>，就在这个链条是再加一条规则：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81<br></code></pre></td></tr></table></figure>\n\n<p>加错了或者想修改：先显示行号查看</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">sudo iptables -t nat -vnL DOCKER --line-number<br></code></pre></td></tr></table></figure>\n\n<p>删除规则3</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">sudo iptables -t nat -D DOCKER 3<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":3454,"excerpt":"","more":"<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p>docker容器不保持任何数据<br>重要数据请使用外部卷存储（数据持久化）<br>容器可以挂载真实机目录或共享存储为卷</p>\n<h3 id=\"主机卷映射：\"><a href=\"#主机卷映射：\" class=\"headerlink\" title=\"主机卷映射：\"></a>主机卷映射：</h3><ul>\n<li>宿主机到docker容器映射：</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">docker run -it -v /<span class=\"hljs-keyword\">var</span>/data:/abc myos<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义容器内部网络</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker<span class=\"hljs-built_in\"> network </span>create <span class=\"hljs-attribute\">--subnet</span>=172.18.0.0/16 mynet<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用自定义网络运行容器,再次重启时就不会按照启动顺序分配172.17.0.1网段的ip地址了</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">docker run -itd <span class=\"hljs-params\">--name</span> vm  <span class=\"hljs-params\">--net</span> bind <span class=\"hljs-params\">--ip</span> 172.18.0.103 centos <span class=\"hljs-string\">/sbin/init</span><br></code></pre></td></tr></table></figure>\n\n<p>原文地址：<a href=\"https://cloud.tencent.com/developer/article/1966389\">https://cloud.tencent.com/developer/article/1966389</a></p>\n<h2 id=\"修复-“Error-Failed-to-download-metadata-for-repo-appstream”-–-CentOS-8系统错误\"><a href=\"#修复-“Error-Failed-to-download-metadata-for-repo-appstream”-–-CentOS-8系统错误\" class=\"headerlink\" title=\"修复: “Error: Failed to download metadata for repo appstream” – CentOS 8系统错误\"></a>修复: “Error: Failed to download metadata for repo appstream” – CentOS 8系统错误</h2><p><strong>解决方案：迁移到 CentOS Stream 8 或替代发行版</strong></p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">dnf</span> <span class=\"hljs-built_in\">--disablerepo</span> <span class=\"hljs-string\">&#x27;*&#x27;</span> <span class=\"hljs-built_in\">--enablerepo=extras</span> <span class=\"hljs-string\">swap</span> <span class=\"hljs-string\">centos-linux-repos</span> <span class=\"hljs-string\">centos-stream-repos</span> <br><span class=\"hljs-string\">dnf</span> <span class=\"hljs-string\">distro-sync</span><br></code></pre></td></tr></table></figure>\n\n<p>docker 桥接方式映射宿主机IP端口，并挂载宿主机文件卷，初始化容器环境，赋予最高操作权限</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -itd --name goservice -p <span class=\"hljs-number\">41002</span>:<span class=\"hljs-number\">31002</span> -p <span class=\"hljs-number\">10989</span>:<span class=\"hljs-number\">9898</span> --privileged -v <span class=\"hljs-regexp\">/root/</span>hn_match_debug<span class=\"hljs-regexp\">/:/</span>root<span class=\"hljs-regexp\">/hn_match_debug/</span> centos <span class=\"hljs-regexp\">/sbin/i</span>nit<br></code></pre></td></tr></table></figure>\n\n\n\n<p>注册mongod服务</p>\n<p>mogod.conf</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># ip</span><br><br><span class=\"hljs-attr\">bind_ip</span>=<span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">0.0</span><br><br><span class=\"hljs-comment\"># mongodb port number</span><br><br><span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">27017</span><br><br><span class=\"hljs-comment\"># mongodb data file path</span><br><br><span class=\"hljs-attr\">dbpath</span>=/var/lib/mongo<br><br><span class=\"hljs-comment\"># mongodb log file path</span><br><br><span class=\"hljs-attr\">logpath</span>=/var/log/mongodb/mongod.log<br><br><span class=\"hljs-comment\"># mongodb automatically append log files</span><br><br><span class=\"hljs-attr\">logappend</span>=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>mongod</p>\n<p>进入 /etc/init.d/ 目录<br><code># cd /etc/init.d/</code><br>创建并编辑mongodb文件<br><code># vim mongodb</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#!/bin/bash</span><br><span class=\"hljs-comment\">#chkconfig:345 61 61</span><br><span class=\"hljs-comment\">#description:mongod</span><br><br><span class=\"hljs-comment\"># mongoDB shell version v5.0.9</span><br><br><span class=\"hljs-comment\"># connecting to: mongodb://0.0.0.0:27017</span><br><br><span class=\"hljs-comment\"># MongoDB server version: 5.0.9</span><br><br>MONGO_PATH=<span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/mongodb5/</span>bin/mongod<br>MONGO_PID=`ps -ef|grep <span class=\"hljs-string\">&#x27;mongod&#x27;</span> | grep -v grep|awk <span class=\"hljs-string\">&#x27;&#123;print $2&#125;&#x27;</span>`<br>test -x <span class=\"hljs-variable\">$MONGO_PATH</span> || <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">0</span><br><br>case <span class=\"hljs-string\">&quot;$1&quot;</span> <span class=\"hljs-keyword\">in</span><br>  start)<br>     ulimit -n <span class=\"hljs-number\">2000</span><br>     echo <span class=\"hljs-string\">&quot;starting mongod server&quot;</span><br>     <span class=\"hljs-variable\">$MONGO_PATH</span> --fork --quiet -f <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/mongodb5/m</span>ongod.conf<br>     echo <span class=\"hljs-string\">&quot;started mongod server&quot;</span><br>     ;;<br>  stop)<br>     echo <span class=\"hljs-string\">&quot;stopping mongod server&quot;</span><br>     <span class=\"hljs-keyword\">if</span> [ ! -z <span class=\"hljs-string\">&quot;$MONGO_PID&quot;</span> ]; then<br>        kill -<span class=\"hljs-number\">15</span> <span class=\"hljs-variable\">$MONGO_PID</span><br>     fi<br>        echo <span class=\"hljs-string\">&quot;stopped mongod server&quot;</span><br>     ;;<br>  status)<br>     ;;<br>  *)<br>     echo <span class=\"hljs-string\">&quot;usage: mongod &#123;start|stop|status&#125;&quot;</span><br>     <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">1</span><br>esac<br><br><span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>上述文件配置完成后，执行一下几条命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">chmod</span> +x /etc/init.d/mongod</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">chkconfig --add mongod</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">chkconfig mongod on</span><br></code></pre></td></tr></table></figure>\n\n<p>启动时去除ip绑定</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">mongod</span> --bind_ip <span class=\"hljs-number\">0.0.0.0</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"一：通过修改配置文件修改docker容器端口映射\"><a href=\"#一：通过修改配置文件修改docker容器端口映射\" class=\"headerlink\" title=\"一：通过修改配置文件修改docker容器端口映射\"></a>一：通过修改配置文件修改docker容器端口映射</h2><p>1.使用<strong>docker ps -a</strong>命令找到要修改容器的<strong>CONTAINER ID</strong></p>\n<p>2.运行以下命令，进入该容器目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker inspect【CONTAINER ID】| grep Id<br>cd /var/lib/docker/containers<br></code></pre></td></tr></table></figure>\n\n<p>2.停止容器</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker stop [容器id]<br></code></pre></td></tr></table></figure>\n\n<p>3.停止主机docker服务</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">systemctl stop docker<br></code></pre></td></tr></table></figure>\n\n<p>4.进入2得到的文件夹内，修改hostconfig.json 和 config.v2.json</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">vi hostconfig.json<br><br>比如新增一个 80 端口，在PortBindings下边添加以下内容，端口配置之间用英文字符逗号隔开<br><br>&quot;80/tcp&quot;: [ <br>&#123;<br> &quot;HostIp&quot;: &quot;0.0.0.0&quot;,<br> &quot;HostPort&quot;: &quot;80&quot;<br> &#125;<br>]<br>接着修改vi config.v2.json, 找到ExposedPorts和Ports  仿照之前内容添加端口映射<br>&quot;ExposedPorts&quot;:  &#123;<br>    &quot;2000/tcp&quot;:   &#123;&#125;<br>&#125;,<br><br>&quot;Ports&quot;:&#123;<br>   &quot;2000/tcp&quot;:[<br>        &#123;<br>         &quot;HostIp&quot;: &quot;0.0.0.0&quot;,<br>         &quot;HostPort&quot;:  &quot;2000&quot;<br>         &#125;<br>]<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<p>5.保存之后重启docker服务和容器</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">systemctl start docker<br>docker start [docker id]<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二：把运行中的容器生成新的镜像，再新建容器\"><a href=\"#二：把运行中的容器生成新的镜像，再新建容器\" class=\"headerlink\" title=\"二：把运行中的容器生成新的镜像，再新建容器\"></a>二：把运行中的容器生成新的镜像，再新建容器</h2><p>1.提交一个运行中的容器为镜像</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker commit [containerid] [new_imagename]<br></code></pre></td></tr></table></figure>\n\n<p>2.运行新建的镜像并添加端口映射</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker run -d -p 8000:80  [imagename] /bin/sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三：修改主机iptables端口映射\"><a href=\"#三：修改主机iptables端口映射\" class=\"headerlink\" title=\"三：修改主机iptables端口映射\"></a>三：修改主机iptables端口映射</h2><blockquote>\n<p>docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。</p>\n</blockquote>\n<p>如果我们有一个容器的8000端口映射到主机的9000端口，先查看iptabes设置了什么规则：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">sudo iptables -t nat -vnL<br></code></pre></td></tr></table></figure>\n\n<p>结果中有一条：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">Chain DOCKER (2 references)<br>pkts bytes target prot opt in     out     source        destination         <br> 98  5872 RETURN  all  --  docker0 *     0.0.0.0/0     0.0.0.0/0           <br>237 14316 DNAT    tcp  --  !docker0 *    0.0.0.0/0    0.0.0.0/0    tcp dpt:9000 to:172.17.0.3:8000<br></code></pre></td></tr></table></figure>\n\n<p>我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放8000端口的容器的ip是172.17.0.3。</p>\n<p>也可以通过inspect命令查看容器ip</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">docker inspect [containerId] |grep IPAddress<br></code></pre></td></tr></table></figure>\n\n<p>我们想再增加一个端口映射，比如<code>8081-&gt;81</code>，就在这个链条是再加一条规则：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81<br></code></pre></td></tr></table></figure>\n\n<p>加错了或者想修改：先显示行号查看</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">sudo iptables -t nat -vnL DOCKER --line-number<br></code></pre></td></tr></table></figure>\n\n<p>删除规则3</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">sudo iptables -t nat -D DOCKER 3<br></code></pre></td></tr></table></figure>\n\n"},{"title":"git ssh连接","date":"2022-09-13T04:00:00.000Z","_content":"\ngithub ssh\n\n1. // 配置git用户\n\n```\ngit config --global user.email \"iezhuhe@163.com\"\ngit config --global user.name \"xinyi-jin\"\n```\n\n2. // genssh\n\n```\nssh-keygen -t rsa -C \"iezhuhe@163.com\"\n```\n\n3. // verssh\n\n```\nssh -T git@github.com\n```\n\n","source":"_posts/github-ssh.md","raw":"---\ntitle: git ssh连接\ndate: 2022-09-13 12:00:00\ntags:\n- Git\ncategories:\n- 学习【资料整理记录】\n---\n\ngithub ssh\n\n1. // 配置git用户\n\n```\ngit config --global user.email \"iezhuhe@163.com\"\ngit config --global user.name \"xinyi-jin\"\n```\n\n2. // genssh\n\n```\nssh-keygen -t rsa -C \"iezhuhe@163.com\"\n```\n\n3. // verssh\n\n```\nssh -T git@github.com\n```\n\n","slug":"github-ssh","published":1,"updated":"2022-09-13T07:48:13.000Z","_id":"cl7zwlsgp0004sspv58kdd5kk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>github ssh</p>\n<ol>\n<li>// 配置git用户</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">git config <span class=\"hljs-attr\">--global</span> user<span class=\"hljs-selector-class\">.email</span> <span class=\"hljs-string\">&quot;iezhuhe@163.com&quot;</span><br>git config <span class=\"hljs-attr\">--global</span> user<span class=\"hljs-selector-class\">.name</span> <span class=\"hljs-string\">&quot;xinyi-jin&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>// genssh</li>\n</ol>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;iezhuhe@163.com&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>// verssh</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -T git<span class=\"hljs-variable\">@github</span>.com<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":202,"excerpt":"","more":"<p>github ssh</p>\n<ol>\n<li>// 配置git用户</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">git config <span class=\"hljs-attr\">--global</span> user<span class=\"hljs-selector-class\">.email</span> <span class=\"hljs-string\">&quot;iezhuhe@163.com&quot;</span><br>git config <span class=\"hljs-attr\">--global</span> user<span class=\"hljs-selector-class\">.name</span> <span class=\"hljs-string\">&quot;xinyi-jin&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>// genssh</li>\n</ol>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;iezhuhe@163.com&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>// verssh</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -T git<span class=\"hljs-variable\">@github</span>.com<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Go源码阅读","date":"2022-09-13T04:00:00.000Z","_content":"\nGo 源码阅读\nfmt：\n\nrand:\n\n​\tTop Function level 简单思路阅读 未深究数据 只阅读了核心思想\n","source":"_posts/Go源码阅读.md","raw":"---\ntitle: Go源码阅读\ndate: 2022-09-13 12:00:00\ntags:\n- Go\ncategories:\n- 学习【资料整理记录】\n---\n\nGo 源码阅读\nfmt：\n\nrand:\n\n​\tTop Function level 简单思路阅读 未深究数据 只阅读了核心思想\n","slug":"Go源码阅读","published":1,"updated":"2022-09-13T08:00:49.000Z","_id":"cl7zwn0900008sspv3s4c8n6g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Go 源码阅读<br>fmt：</p>\n<p>rand:</p>\n<p>​    Top Function level 简单思路阅读 未深究数据 只阅读了核心思想</p>\n","site":{"data":{}},"wordcount":51,"excerpt":"","more":"<p>Go 源码阅读<br>fmt：</p>\n<p>rand:</p>\n<p>​    Top Function level 简单思路阅读 未深究数据 只阅读了核心思想</p>\n"},{"title":"go func","date":"2020-03-01T04:00:00.000Z","_content":"\n## 2020.03.01\n\ngolang 匿名函数\n\n​\t可赋值给变量，使用变量名调用\n```\n\n\tf:=func(){\n\n\t\t...\n\n\t}\n\n\tf()\n```\n\n\n​\t闭包\n```\n\tfunc(a int){\n\n\t\t...\n\n\t}(1)\n```\n\n\n​\t匿名函数用作回调函数\n\n \n\n​\t// 遍历切片的每个元素, 通过给定函数进行元素访问\n```\n\tfunc visit(list []int, f func(int)) {\n\n  \tfor _, v := range list {\n\n    \tf(v)\n\n  \t}\n\n\t}\n```\n  // 使用匿名函数打印切片内容\n```\n  visit([]int{1, 2, 3, 4}, func(v int) {\n\n    fmt.Println(v)\n\n  })\n```\n\n\n​\t封装匿名函数，实现动态调用\n```\n\tvar fMap = map[string]{\n\n\t\t\"temp\" : func(a int){\n\n\t\t\t...\n\n\t\t}\n\n\t}\n\n \n\n\tf := fMap[\"temp\"]\n\n\tf(1)\n```","source":"_posts/goFunc.md","raw":"---\ntitle: go func\ndate: 2020-03-01 12:00:00\ntags:\n- Go\ncategories:\n- 学习【资料整理记录】\n---\n\n## 2020.03.01\n\ngolang 匿名函数\n\n​\t可赋值给变量，使用变量名调用\n```\n\n\tf:=func(){\n\n\t\t...\n\n\t}\n\n\tf()\n```\n\n\n​\t闭包\n```\n\tfunc(a int){\n\n\t\t...\n\n\t}(1)\n```\n\n\n​\t匿名函数用作回调函数\n\n \n\n​\t// 遍历切片的每个元素, 通过给定函数进行元素访问\n```\n\tfunc visit(list []int, f func(int)) {\n\n  \tfor _, v := range list {\n\n    \tf(v)\n\n  \t}\n\n\t}\n```\n  // 使用匿名函数打印切片内容\n```\n  visit([]int{1, 2, 3, 4}, func(v int) {\n\n    fmt.Println(v)\n\n  })\n```\n\n\n​\t封装匿名函数，实现动态调用\n```\n\tvar fMap = map[string]{\n\n\t\t\"temp\" : func(a int){\n\n\t\t\t...\n\n\t\t}\n\n\t}\n\n \n\n\tf := fMap[\"temp\"]\n\n\tf(1)\n```","slug":"goFunc","published":1,"updated":"2022-09-13T07:51:03.000Z","_id":"cl7zwn1xq000csspv2nzz6r7s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"2020-03-01\"><a href=\"#2020-03-01\" class=\"headerlink\" title=\"2020.03.01\"></a>2020.03.01</h2><p>golang 匿名函数</p>\n<p>​    可赋值给变量，使用变量名调用</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><br>f:=<span class=\"hljs-built_in\">func</span>()&#123;<br><br>\t...<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span><br></code></pre></td></tr></table></figure>\n\n\n<p>​    闭包</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a <span class=\"hljs-type\">int</span>)</span></span>&#123;<br><br>\t...<br><br>&#125;(<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n\n\n<p>​    匿名函数用作回调函数</p>\n<p>​    // 遍历切片的每个元素, 通过给定函数进行元素访问</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">visit</span><span class=\"hljs-params\">(list []<span class=\"hljs-type\">int</span>, f <span class=\"hljs-keyword\">func</span>(<span class=\"hljs-type\">int</span>)</span></span>) &#123;<br><br> \t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> list &#123;<br><br>   \tf(v)<br><br> \t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>  // 使用匿名函数打印切片内容</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">visit([]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(v <span class=\"hljs-type\">int</span>)</span></span> &#123;<br><br>  fmt.Println(v)<br><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n<p>​    封装匿名函数，实现动态调用</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-tag\">var</span> fMap = map<span class=\"hljs-selector-attr\">[string]</span>&#123;<br><br>\t<span class=\"hljs-string\">&quot;temp&quot;</span> : <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-selector-tag\">a</span> int)&#123;<br><br>\t\t...<br><br>\t&#125;<br><br>&#125;<br><br><br><br>f := fMap<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">&quot;temp&quot;</span>]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":451,"excerpt":"","more":"<h2 id=\"2020-03-01\"><a href=\"#2020-03-01\" class=\"headerlink\" title=\"2020.03.01\"></a>2020.03.01</h2><p>golang 匿名函数</p>\n<p>​    可赋值给变量，使用变量名调用</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><br>f:=<span class=\"hljs-built_in\">func</span>()&#123;<br><br>\t...<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span><br></code></pre></td></tr></table></figure>\n\n\n<p>​    闭包</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a <span class=\"hljs-type\">int</span>)</span></span>&#123;<br><br>\t...<br><br>&#125;(<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n\n\n<p>​    匿名函数用作回调函数</p>\n<p>​    // 遍历切片的每个元素, 通过给定函数进行元素访问</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">visit</span><span class=\"hljs-params\">(list []<span class=\"hljs-type\">int</span>, f <span class=\"hljs-keyword\">func</span>(<span class=\"hljs-type\">int</span>)</span></span>) &#123;<br><br> \t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> list &#123;<br><br>   \tf(v)<br><br> \t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>  // 使用匿名函数打印切片内容</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">visit([]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(v <span class=\"hljs-type\">int</span>)</span></span> &#123;<br><br>  fmt.Println(v)<br><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n<p>​    封装匿名函数，实现动态调用</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-tag\">var</span> fMap = map<span class=\"hljs-selector-attr\">[string]</span>&#123;<br><br>\t<span class=\"hljs-string\">&quot;temp&quot;</span> : <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-selector-tag\">a</span> int)&#123;<br><br>\t\t...<br><br>\t&#125;<br><br>&#125;<br><br><br><br>f := fMap<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">&quot;temp&quot;</span>]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span><br></code></pre></td></tr></table></figure>"},{"title":"linuxCmd","date":"2020-11-25T04:00:00.000Z","_content":"\n```\nnohup ./game_private_server -Config=./config/game_config_mjjxhzzm_61.cfg >> log/game_private_server_mjjxhzzm_61.log 2>&1 &\n\nnohup ./game_private_server -Config=./config/game_config_mjhnwxd_61.cfg >> log/game_private_server_mjhnwxdd_61.log 2>&1 &\n\nnohup ./game_private_server -Config=./config/game_config_mjhnayhx_88.cfg mjhnayhx_88 >> log/game_private_server_mjhnayhx_88.log 2>&1 &\n```\n\nredis 添加测试\n\n```\nauth qwe123!@#\nselect 9\nhset haunters id 1，\nHEXISTS haunters\n```\n\nRedis 设置密码\n\n```\n  config set requirepass password\n  auth password\n  config get requirepass\n```\n\n\n\n\n```\ncmd:\n  config set requirepass qwe123!@#\n  auth qwe123!@#\n  config get requirepass\n```\n\noptional string PassWord = 3;\t\t// 密码\n\n  ./protoc.exe --go_out=. ./*.proto\n\n  \"notice#body\"\n\n  624691\n\n\n-- mysql开启事件命令\n\n```\nshow variables like '%sche%';\n\nset global event_scheduler =1\n```\n\n天天 userid 406570\n\n// ssh连接服务器\n\n```\nsudo ssh root@39.100.68.248\n```\n\n// 上传文件到服务器\n\n```\nsudo scp /Users/xinyi-jin/Desktop/test.txt root@39.100.68.248:/root/server/\n```\n\n// 上传文件到服务器，不会影响当前正在运行的程序\n\n```\nsudo rsync -av /Users/xinyi-jin/go/src/jxserver/bin/xiangque/* root@39.100.68.248:/root/server\n```\n\n```\ncygwin错误 \n原因：ssh.exe可能会与git下边的版本冲突\n解决办法：可使用-e参数指定ssh.exe\n\nrsync -av -e D:\\soft\\cwrsync_6.2.4_x64_free\\bin\\ssh.exe robot/robot root@47.107.37.120:/root/%1/robot/\n```\n\n// mac 交叉编译linux\n\n```\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build gripper.go\n```\n\n\nGitshell中输入如下命令解决：\n\n```\ngit config --global core.autocrlf false\n```\nGo 自动生成测试文件\n```\ngotests -only IntToRoman -w intToRoman.go\n```\n\nWinSCP命令\n\n```\n./WinSCP.com   进入winscp命令行\nopen sftp://root@47.107.37.120 -privatekey=C:\\Users\\Administrator\\.ssh\\id_rsa.ppk   连接远端\n```\n\n","source":"_posts/linuxCmd.md","raw":"---\ntitle: linuxCmd\ndate: 2020-11-25 12:00:00\ntags:\n- 服务部署\ncategories:\n- 学习【资料整理记录】\n---\n\n```\nnohup ./game_private_server -Config=./config/game_config_mjjxhzzm_61.cfg >> log/game_private_server_mjjxhzzm_61.log 2>&1 &\n\nnohup ./game_private_server -Config=./config/game_config_mjhnwxd_61.cfg >> log/game_private_server_mjhnwxdd_61.log 2>&1 &\n\nnohup ./game_private_server -Config=./config/game_config_mjhnayhx_88.cfg mjhnayhx_88 >> log/game_private_server_mjhnayhx_88.log 2>&1 &\n```\n\nredis 添加测试\n\n```\nauth qwe123!@#\nselect 9\nhset haunters id 1，\nHEXISTS haunters\n```\n\nRedis 设置密码\n\n```\n  config set requirepass password\n  auth password\n  config get requirepass\n```\n\n\n\n\n```\ncmd:\n  config set requirepass qwe123!@#\n  auth qwe123!@#\n  config get requirepass\n```\n\noptional string PassWord = 3;\t\t// 密码\n\n  ./protoc.exe --go_out=. ./*.proto\n\n  \"notice#body\"\n\n  624691\n\n\n-- mysql开启事件命令\n\n```\nshow variables like '%sche%';\n\nset global event_scheduler =1\n```\n\n天天 userid 406570\n\n// ssh连接服务器\n\n```\nsudo ssh root@39.100.68.248\n```\n\n// 上传文件到服务器\n\n```\nsudo scp /Users/xinyi-jin/Desktop/test.txt root@39.100.68.248:/root/server/\n```\n\n// 上传文件到服务器，不会影响当前正在运行的程序\n\n```\nsudo rsync -av /Users/xinyi-jin/go/src/jxserver/bin/xiangque/* root@39.100.68.248:/root/server\n```\n\n```\ncygwin错误 \n原因：ssh.exe可能会与git下边的版本冲突\n解决办法：可使用-e参数指定ssh.exe\n\nrsync -av -e D:\\soft\\cwrsync_6.2.4_x64_free\\bin\\ssh.exe robot/robot root@47.107.37.120:/root/%1/robot/\n```\n\n// mac 交叉编译linux\n\n```\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build gripper.go\n```\n\n\nGitshell中输入如下命令解决：\n\n```\ngit config --global core.autocrlf false\n```\nGo 自动生成测试文件\n```\ngotests -only IntToRoman -w intToRoman.go\n```\n\nWinSCP命令\n\n```\n./WinSCP.com   进入winscp命令行\nopen sftp://root@47.107.37.120 -privatekey=C:\\Users\\Administrator\\.ssh\\id_rsa.ppk   连接远端\n```\n\n","slug":"linuxCmd","published":1,"updated":"2022-09-13T07:57:10.000Z","_id":"cl7zwn7ld000fsspv116deer9","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">nohup</span> ./game_private_server -Config=./config/game_config_mjjxhzzm_61.cfg &gt;&gt; <span class=\"hljs-built_in\">log</span>/game_private_server_mjjxhzzm_61.<span class=\"hljs-built_in\">log</span> 2&gt;&amp;1 &amp;<br><br><span class=\"hljs-built_in\">nohup</span> ./game_private_server -Config=./config/game_config_mjhnwxd_61.cfg &gt;&gt; <span class=\"hljs-built_in\">log</span>/game_private_server_mjhnwxdd_61.<span class=\"hljs-built_in\">log</span> 2&gt;&amp;1 &amp;<br><br><span class=\"hljs-built_in\">nohup</span> ./game_private_server -Config=./config/game_config_mjhnayhx_88.cfg mjhnayhx_88 &gt;&gt; <span class=\"hljs-built_in\">log</span>/game_private_server_mjhnayhx_88.<span class=\"hljs-built_in\">log</span> 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure>\n\n<p>redis 添加测试</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">auth</span> qwe123!@<span class=\"hljs-comment\">#</span><br><span class=\"hljs-literal\">select</span> <span class=\"hljs-number\">9</span><br>hset haunters id <span class=\"hljs-number\">1</span>，<br>HEXISTS haunters<br></code></pre></td></tr></table></figure>\n\n<p>Redis 设置密码</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">config <span class=\"hljs-built_in\">set</span> requirepass password<br>auth password<span class=\"hljs-built_in\"></span><br><span class=\"hljs-built_in\">config </span><span class=\"hljs-built_in\">get</span> requirepass<br></code></pre></td></tr></table></figure>\n\n\n\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">cmd:<br> <span class=\"hljs-built_in\"> config </span><span class=\"hljs-built_in\">set</span> requirepass qwe123!@#<br>  auth qwe123!@#<br> <span class=\"hljs-built_in\"> config </span><span class=\"hljs-built_in\">get</span> requirepass<br></code></pre></td></tr></table></figure>\n\n<p>optional string PassWord = 3;        // 密码</p>\n<p>  ./protoc.exe –go_out=. ./*.proto</p>\n<p>  “notice#body”</p>\n<p>  624691</p>\n<p>– mysql开启事件命令</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">show <span class=\"hljs-keyword\">variables</span> like <span class=\"hljs-comment\">&#x27;%sche%&#x27;</span>;<br><br><span class=\"hljs-keyword\">set</span> global <span class=\"hljs-comment\">event_scheduler =1</span><br></code></pre></td></tr></table></figure>\n\n<p>天天 userid 406570</p>\n<p>// ssh连接服务器</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">sudo</span> ssh root@<span class=\"hljs-number\">39.100.68.248</span><br></code></pre></td></tr></table></figure>\n\n<p>// 上传文件到服务器</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo scp <span class=\"hljs-regexp\">/Users/</span>xinyi-jin<span class=\"hljs-regexp\">/Desktop/</span>test.txt root@<span class=\"hljs-number\">39.100</span>.<span class=\"hljs-number\">68.248</span>:<span class=\"hljs-regexp\">/root/</span>server/<br></code></pre></td></tr></table></figure>\n\n<p>// 上传文件到服务器，不会影响当前正在运行的程序</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo rsync -av <span class=\"hljs-regexp\">/Users/</span>xinyi-jin<span class=\"hljs-regexp\">/go/</span>src<span class=\"hljs-regexp\">/jxserver/</span>bin<span class=\"hljs-regexp\">/xiangque/</span>* root@<span class=\"hljs-number\">39.100</span>.<span class=\"hljs-number\">68.248</span>:<span class=\"hljs-regexp\">/root/</span>server<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">cygwin错误 <br>原因：ssh.exe可能会与git下边的版本冲突<br>解决办法：可使用-e参数指定ssh.exe<br><br>rsync -av -e <span class=\"hljs-symbol\">D:</span>\\soft\\cwrsync_6.<span class=\"hljs-number\">2.4_</span>x64_free\\bin\\ssh.exe robot/robot root<span class=\"hljs-variable\">@47</span>.<span class=\"hljs-number\">107.37</span>.<span class=\"hljs-number\">120</span><span class=\"hljs-symbol\">:/root/%</span><span class=\"hljs-number\">1</span>/robot/<br></code></pre></td></tr></table></figure>\n\n<p>// mac 交叉编译linux</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-attribute\">CGO_ENABLED</span>=0 <span class=\"hljs-attribute\">GOOS</span>=linux <span class=\"hljs-attribute\">GOARCH</span>=amd64 go build gripper.go<br></code></pre></td></tr></table></figure>\n\n\n<p>Gitshell中输入如下命令解决：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">git config --global core.<span class=\"hljs-built_in\">auto</span>crlf <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n<p>Go 自动生成测试文件</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">gotests -<span class=\"hljs-keyword\">only</span> IntToRoman -<span class=\"hljs-keyword\">w</span> intToRoman.<span class=\"hljs-keyword\">go</span><br></code></pre></td></tr></table></figure>\n\n<p>WinSCP命令</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">./WinSCP.com</span>   进入winscp命令行<br>open sftp:<span class=\"hljs-string\">//root</span>@47.107.37.120 -privatekey=C:\\Users\\Administrator\\<span class=\"hljs-string\">.ssh</span>\\id_rsa.ppk   连接远端<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1463,"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">nohup</span> ./game_private_server -Config=./config/game_config_mjjxhzzm_61.cfg &gt;&gt; <span class=\"hljs-built_in\">log</span>/game_private_server_mjjxhzzm_61.<span class=\"hljs-built_in\">log</span> 2&gt;&amp;1 &amp;<br><br><span class=\"hljs-built_in\">nohup</span> ./game_private_server -Config=./config/game_config_mjhnwxd_61.cfg &gt;&gt; <span class=\"hljs-built_in\">log</span>/game_private_server_mjhnwxdd_61.<span class=\"hljs-built_in\">log</span> 2&gt;&amp;1 &amp;<br><br><span class=\"hljs-built_in\">nohup</span> ./game_private_server -Config=./config/game_config_mjhnayhx_88.cfg mjhnayhx_88 &gt;&gt; <span class=\"hljs-built_in\">log</span>/game_private_server_mjhnayhx_88.<span class=\"hljs-built_in\">log</span> 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure>\n\n<p>redis 添加测试</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">auth</span> qwe123!@<span class=\"hljs-comment\">#</span><br><span class=\"hljs-literal\">select</span> <span class=\"hljs-number\">9</span><br>hset haunters id <span class=\"hljs-number\">1</span>，<br>HEXISTS haunters<br></code></pre></td></tr></table></figure>\n\n<p>Redis 设置密码</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">config <span class=\"hljs-built_in\">set</span> requirepass password<br>auth password<span class=\"hljs-built_in\"></span><br><span class=\"hljs-built_in\">config </span><span class=\"hljs-built_in\">get</span> requirepass<br></code></pre></td></tr></table></figure>\n\n\n\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">cmd:<br> <span class=\"hljs-built_in\"> config </span><span class=\"hljs-built_in\">set</span> requirepass qwe123!@#<br>  auth qwe123!@#<br> <span class=\"hljs-built_in\"> config </span><span class=\"hljs-built_in\">get</span> requirepass<br></code></pre></td></tr></table></figure>\n\n<p>optional string PassWord = 3;        // 密码</p>\n<p>  ./protoc.exe –go_out=. ./*.proto</p>\n<p>  “notice#body”</p>\n<p>  624691</p>\n<p>– mysql开启事件命令</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">show <span class=\"hljs-keyword\">variables</span> like <span class=\"hljs-comment\">&#x27;%sche%&#x27;</span>;<br><br><span class=\"hljs-keyword\">set</span> global <span class=\"hljs-comment\">event_scheduler =1</span><br></code></pre></td></tr></table></figure>\n\n<p>天天 userid 406570</p>\n<p>// ssh连接服务器</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">sudo</span> ssh root@<span class=\"hljs-number\">39.100.68.248</span><br></code></pre></td></tr></table></figure>\n\n<p>// 上传文件到服务器</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo scp <span class=\"hljs-regexp\">/Users/</span>xinyi-jin<span class=\"hljs-regexp\">/Desktop/</span>test.txt root@<span class=\"hljs-number\">39.100</span>.<span class=\"hljs-number\">68.248</span>:<span class=\"hljs-regexp\">/root/</span>server/<br></code></pre></td></tr></table></figure>\n\n<p>// 上传文件到服务器，不会影响当前正在运行的程序</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo rsync -av <span class=\"hljs-regexp\">/Users/</span>xinyi-jin<span class=\"hljs-regexp\">/go/</span>src<span class=\"hljs-regexp\">/jxserver/</span>bin<span class=\"hljs-regexp\">/xiangque/</span>* root@<span class=\"hljs-number\">39.100</span>.<span class=\"hljs-number\">68.248</span>:<span class=\"hljs-regexp\">/root/</span>server<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">cygwin错误 <br>原因：ssh.exe可能会与git下边的版本冲突<br>解决办法：可使用-e参数指定ssh.exe<br><br>rsync -av -e <span class=\"hljs-symbol\">D:</span>\\soft\\cwrsync_6.<span class=\"hljs-number\">2.4_</span>x64_free\\bin\\ssh.exe robot/robot root<span class=\"hljs-variable\">@47</span>.<span class=\"hljs-number\">107.37</span>.<span class=\"hljs-number\">120</span><span class=\"hljs-symbol\">:/root/%</span><span class=\"hljs-number\">1</span>/robot/<br></code></pre></td></tr></table></figure>\n\n<p>// mac 交叉编译linux</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-attribute\">CGO_ENABLED</span>=0 <span class=\"hljs-attribute\">GOOS</span>=linux <span class=\"hljs-attribute\">GOARCH</span>=amd64 go build gripper.go<br></code></pre></td></tr></table></figure>\n\n\n<p>Gitshell中输入如下命令解决：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">git config --global core.<span class=\"hljs-built_in\">auto</span>crlf <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n<p>Go 自动生成测试文件</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">gotests -<span class=\"hljs-keyword\">only</span> IntToRoman -<span class=\"hljs-keyword\">w</span> intToRoman.<span class=\"hljs-keyword\">go</span><br></code></pre></td></tr></table></figure>\n\n<p>WinSCP命令</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">./WinSCP.com</span>   进入winscp命令行<br>open sftp:<span class=\"hljs-string\">//root</span>@47.107.37.120 -privatekey=C:\\Users\\Administrator\\<span class=\"hljs-string\">.ssh</span>\\id_rsa.ppk   连接远端<br></code></pre></td></tr></table></figure>\n\n"},{"title":"slot","date":"2021-04-02T04:00:00.000Z","_content":"\n## 2021.04.02\n\n------\n\nslot设计：\n\n通信协议设计：\n\nC====>>S\n\n- 开始游戏\t需携带参数（压注线，压注数）\n- 游戏记录    参数（玩家id，可唯一确认玩家信息的标志都可）\n\nS====>>C\n\n- 开始游戏返回\t玩家中奖信息，或者转换游戏场景（特殊奖励阶段）\n- 返回游戏记录列表    \n\n游戏图标：\n\n- bonus 触发独立奖励\n\n- wild 万能图标\n- east is land 5连线触发独立奖励\n- 其他按照连线处理中奖，至少3连线\n\n 所有线条数组\n0 \t3 \t6\t 9 \t\t12\n1 \t4 \t7 \t10 \t\t13\n2 \t5 \t8 \t11 \t\t14\n\n 所有线条数组（新版本）\n0 \t1\t2\t3\t4\n\n5\t6\t7\t8\t9\n\n10\t11\t12\t13\t14\n\n\n\n## 2021.04.07 \n\n------\n\nonStart()\n\n- 初始化场景数据","source":"_posts/slot.md","raw":"---\ntitle: slot\ndate: 2021-04-02 12:00:00\ntags:\n- \ncategories:\n- 工作【间歇性记录】\n---\n\n## 2021.04.02\n\n------\n\nslot设计：\n\n通信协议设计：\n\nC====>>S\n\n- 开始游戏\t需携带参数（压注线，压注数）\n- 游戏记录    参数（玩家id，可唯一确认玩家信息的标志都可）\n\nS====>>C\n\n- 开始游戏返回\t玩家中奖信息，或者转换游戏场景（特殊奖励阶段）\n- 返回游戏记录列表    \n\n游戏图标：\n\n- bonus 触发独立奖励\n\n- wild 万能图标\n- east is land 5连线触发独立奖励\n- 其他按照连线处理中奖，至少3连线\n\n 所有线条数组\n0 \t3 \t6\t 9 \t\t12\n1 \t4 \t7 \t10 \t\t13\n2 \t5 \t8 \t11 \t\t14\n\n 所有线条数组（新版本）\n0 \t1\t2\t3\t4\n\n5\t6\t7\t8\t9\n\n10\t11\t12\t13\t14\n\n\n\n## 2021.04.07 \n\n------\n\nonStart()\n\n- 初始化场景数据","slug":"slot","published":1,"updated":"2022-09-13T07:56:28.000Z","_id":"cl7zwobn5000jsspvccjw7p8p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"2021-04-02\"><a href=\"#2021-04-02\" class=\"headerlink\" title=\"2021.04.02\"></a>2021.04.02</h2><hr>\n<p>slot设计：</p>\n<p>通信协议设计：</p>\n<p>C====&gt;&gt;S</p>\n<ul>\n<li>开始游戏    需携带参数（压注线，压注数）</li>\n<li>游戏记录    参数（玩家id，可唯一确认玩家信息的标志都可）</li>\n</ul>\n<p>S====&gt;&gt;C</p>\n<ul>\n<li>开始游戏返回    玩家中奖信息，或者转换游戏场景（特殊奖励阶段）</li>\n<li>返回游戏记录列表    </li>\n</ul>\n<p>游戏图标：</p>\n<ul>\n<li><p>bonus 触发独立奖励</p>\n</li>\n<li><p>wild 万能图标</p>\n</li>\n<li><p>east is land 5连线触发独立奖励</p>\n</li>\n<li><p>其他按照连线处理中奖，至少3连线</p>\n</li>\n</ul>\n<p> 所有线条数组<br>0     3     6     9         12<br>1     4     7     10         13<br>2     5     8     11         14</p>\n<p> 所有线条数组（新版本）<br>0     1    2    3    4</p>\n<p>5    6    7    8    9</p>\n<p>10    11    12    13    14</p>\n<h2 id=\"2021-04-07\"><a href=\"#2021-04-07\" class=\"headerlink\" title=\"2021.04.07\"></a>2021.04.07</h2><hr>\n<p>onStart()</p>\n<ul>\n<li>初始化场景数据</li>\n</ul>\n","site":{"data":{}},"wordcount":276,"excerpt":"","more":"<h2 id=\"2021-04-02\"><a href=\"#2021-04-02\" class=\"headerlink\" title=\"2021.04.02\"></a>2021.04.02</h2><hr>\n<p>slot设计：</p>\n<p>通信协议设计：</p>\n<p>C====&gt;&gt;S</p>\n<ul>\n<li>开始游戏    需携带参数（压注线，压注数）</li>\n<li>游戏记录    参数（玩家id，可唯一确认玩家信息的标志都可）</li>\n</ul>\n<p>S====&gt;&gt;C</p>\n<ul>\n<li>开始游戏返回    玩家中奖信息，或者转换游戏场景（特殊奖励阶段）</li>\n<li>返回游戏记录列表    </li>\n</ul>\n<p>游戏图标：</p>\n<ul>\n<li><p>bonus 触发独立奖励</p>\n</li>\n<li><p>wild 万能图标</p>\n</li>\n<li><p>east is land 5连线触发独立奖励</p>\n</li>\n<li><p>其他按照连线处理中奖，至少3连线</p>\n</li>\n</ul>\n<p> 所有线条数组<br>0     3     6     9         12<br>1     4     7     10         13<br>2     5     8     11         14</p>\n<p> 所有线条数组（新版本）<br>0     1    2    3    4</p>\n<p>5    6    7    8    9</p>\n<p>10    11    12    13    14</p>\n<h2 id=\"2021-04-07\"><a href=\"#2021-04-07\" class=\"headerlink\" title=\"2021.04.07\"></a>2021.04.07</h2><hr>\n<p>onStart()</p>\n<ul>\n<li>初始化场景数据</li>\n</ul>\n"},{"title":"windows安装软件","date":"2020-11-25T04:00:00.000Z","_content":"\n## windows 安装软件列表\n\n### 1.视频剪辑类：\n\n- flash\n- 格式工厂\n- PopPlayer\n\n### 2.远程控制：\n- TeamViewer\n- 向日葵\n\n### 3.屏幕保护：\n- 护眼宝\n\n### 4.驱动系列：\n- MSI官网 Ge72 6QF相关驱动软件\n\n### 5.办公系列：\n- WPS Office\n- 有道词典\n\n### 6.翻墙VPN：\n- 蓝灯 lantern\n- 自由门\n\n### 7.浏览器\n- 谷歌浏览器\n- 油猴相关插件\n\n### 8.开发相关\n- 必备软件\n- VSCode\n- Git\n- MySQL\n- MongoDB\n- Redis\n- SubineText\n\t- 可根据需要选装\n\t- OpenSSH-win64  ssh工具\n\t- 运行Game使用Python27,3版本的不支持\n\t- XShell\n\t- Xftp\n\t- winscp\n\t- explore++\n\t- ......\n\n### 9.输入法\n- 搜狗输入法\n\n### 10.聊天交流\n- QQ\n- 微信\n\n### 11.文件搜索、编辑、备份、解压工具\n- Typora\n- Listary\n- 百度云盘\n- winRAR\n\n### 12.截图软件\n\n- Snipaste（支持Windows和Mac ，多截屏贴图）\n\n### 13.抓包工具\n\n- wires hark 推荐\n- burp\n","source":"_posts/windows_soft.md","raw":"---\ntitle: windows安装软件\ndate: 2020-11-25 12:00:00\ntags:\n- windows\ncategories:\n- 学习【资料整理记录】\n---\n\n## windows 安装软件列表\n\n### 1.视频剪辑类：\n\n- flash\n- 格式工厂\n- PopPlayer\n\n### 2.远程控制：\n- TeamViewer\n- 向日葵\n\n### 3.屏幕保护：\n- 护眼宝\n\n### 4.驱动系列：\n- MSI官网 Ge72 6QF相关驱动软件\n\n### 5.办公系列：\n- WPS Office\n- 有道词典\n\n### 6.翻墙VPN：\n- 蓝灯 lantern\n- 自由门\n\n### 7.浏览器\n- 谷歌浏览器\n- 油猴相关插件\n\n### 8.开发相关\n- 必备软件\n- VSCode\n- Git\n- MySQL\n- MongoDB\n- Redis\n- SubineText\n\t- 可根据需要选装\n\t- OpenSSH-win64  ssh工具\n\t- 运行Game使用Python27,3版本的不支持\n\t- XShell\n\t- Xftp\n\t- winscp\n\t- explore++\n\t- ......\n\n### 9.输入法\n- 搜狗输入法\n\n### 10.聊天交流\n- QQ\n- 微信\n\n### 11.文件搜索、编辑、备份、解压工具\n- Typora\n- Listary\n- 百度云盘\n- winRAR\n\n### 12.截图软件\n\n- Snipaste（支持Windows和Mac ，多截屏贴图）\n\n### 13.抓包工具\n\n- wires hark 推荐\n- burp\n","slug":"windows_soft","published":1,"updated":"2022-09-13T09:41:32.000Z","_id":"cl7zwoczc000msspv2g6v8ey7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"windows-安装软件列表\"><a href=\"#windows-安装软件列表\" class=\"headerlink\" title=\"windows 安装软件列表\"></a>windows 安装软件列表</h2><h3 id=\"1-视频剪辑类：\"><a href=\"#1-视频剪辑类：\" class=\"headerlink\" title=\"1.视频剪辑类：\"></a>1.视频剪辑类：</h3><ul>\n<li>flash</li>\n<li>格式工厂</li>\n<li>PopPlayer</li>\n</ul>\n<h3 id=\"2-远程控制：\"><a href=\"#2-远程控制：\" class=\"headerlink\" title=\"2.远程控制：\"></a>2.远程控制：</h3><ul>\n<li>TeamViewer</li>\n<li>向日葵</li>\n</ul>\n<h3 id=\"3-屏幕保护：\"><a href=\"#3-屏幕保护：\" class=\"headerlink\" title=\"3.屏幕保护：\"></a>3.屏幕保护：</h3><ul>\n<li>护眼宝</li>\n</ul>\n<h3 id=\"4-驱动系列：\"><a href=\"#4-驱动系列：\" class=\"headerlink\" title=\"4.驱动系列：\"></a>4.驱动系列：</h3><ul>\n<li>MSI官网 Ge72 6QF相关驱动软件</li>\n</ul>\n<h3 id=\"5-办公系列：\"><a href=\"#5-办公系列：\" class=\"headerlink\" title=\"5.办公系列：\"></a>5.办公系列：</h3><ul>\n<li>WPS Office</li>\n<li>有道词典</li>\n</ul>\n<h3 id=\"6-翻墙VPN：\"><a href=\"#6-翻墙VPN：\" class=\"headerlink\" title=\"6.翻墙VPN：\"></a>6.翻墙VPN：</h3><ul>\n<li>蓝灯 lantern</li>\n<li>自由门</li>\n</ul>\n<h3 id=\"7-浏览器\"><a href=\"#7-浏览器\" class=\"headerlink\" title=\"7.浏览器\"></a>7.浏览器</h3><ul>\n<li>谷歌浏览器</li>\n<li>油猴相关插件</li>\n</ul>\n<h3 id=\"8-开发相关\"><a href=\"#8-开发相关\" class=\"headerlink\" title=\"8.开发相关\"></a>8.开发相关</h3><ul>\n<li>必备软件</li>\n<li>VSCode</li>\n<li>Git</li>\n<li>MySQL</li>\n<li>MongoDB</li>\n<li>Redis</li>\n<li>SubineText<ul>\n<li>可根据需要选装</li>\n<li>OpenSSH-win64  ssh工具</li>\n<li>运行Game使用Python27,3版本的不支持</li>\n<li>XShell</li>\n<li>Xftp</li>\n<li>winscp</li>\n<li>explore++</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"9-输入法\"><a href=\"#9-输入法\" class=\"headerlink\" title=\"9.输入法\"></a>9.输入法</h3><ul>\n<li>搜狗输入法</li>\n</ul>\n<h3 id=\"10-聊天交流\"><a href=\"#10-聊天交流\" class=\"headerlink\" title=\"10.聊天交流\"></a>10.聊天交流</h3><ul>\n<li>QQ</li>\n<li>微信</li>\n</ul>\n<h3 id=\"11-文件搜索、编辑、备份、解压工具\"><a href=\"#11-文件搜索、编辑、备份、解压工具\" class=\"headerlink\" title=\"11.文件搜索、编辑、备份、解压工具\"></a>11.文件搜索、编辑、备份、解压工具</h3><ul>\n<li>Typora</li>\n<li>Listary</li>\n<li>百度云盘</li>\n<li>winRAR</li>\n</ul>\n<h3 id=\"12-截图软件\"><a href=\"#12-截图软件\" class=\"headerlink\" title=\"12.截图软件\"></a>12.截图软件</h3><ul>\n<li>Snipaste（支持Windows和Mac ，多截屏贴图）</li>\n</ul>\n<h3 id=\"13-抓包工具\"><a href=\"#13-抓包工具\" class=\"headerlink\" title=\"13.抓包工具\"></a>13.抓包工具</h3><ul>\n<li>wires hark 推荐</li>\n<li>burp</li>\n</ul>\n","site":{"data":{}},"wordcount":392,"excerpt":"","more":"<h2 id=\"windows-安装软件列表\"><a href=\"#windows-安装软件列表\" class=\"headerlink\" title=\"windows 安装软件列表\"></a>windows 安装软件列表</h2><h3 id=\"1-视频剪辑类：\"><a href=\"#1-视频剪辑类：\" class=\"headerlink\" title=\"1.视频剪辑类：\"></a>1.视频剪辑类：</h3><ul>\n<li>flash</li>\n<li>格式工厂</li>\n<li>PopPlayer</li>\n</ul>\n<h3 id=\"2-远程控制：\"><a href=\"#2-远程控制：\" class=\"headerlink\" title=\"2.远程控制：\"></a>2.远程控制：</h3><ul>\n<li>TeamViewer</li>\n<li>向日葵</li>\n</ul>\n<h3 id=\"3-屏幕保护：\"><a href=\"#3-屏幕保护：\" class=\"headerlink\" title=\"3.屏幕保护：\"></a>3.屏幕保护：</h3><ul>\n<li>护眼宝</li>\n</ul>\n<h3 id=\"4-驱动系列：\"><a href=\"#4-驱动系列：\" class=\"headerlink\" title=\"4.驱动系列：\"></a>4.驱动系列：</h3><ul>\n<li>MSI官网 Ge72 6QF相关驱动软件</li>\n</ul>\n<h3 id=\"5-办公系列：\"><a href=\"#5-办公系列：\" class=\"headerlink\" title=\"5.办公系列：\"></a>5.办公系列：</h3><ul>\n<li>WPS Office</li>\n<li>有道词典</li>\n</ul>\n<h3 id=\"6-翻墙VPN：\"><a href=\"#6-翻墙VPN：\" class=\"headerlink\" title=\"6.翻墙VPN：\"></a>6.翻墙VPN：</h3><ul>\n<li>蓝灯 lantern</li>\n<li>自由门</li>\n</ul>\n<h3 id=\"7-浏览器\"><a href=\"#7-浏览器\" class=\"headerlink\" title=\"7.浏览器\"></a>7.浏览器</h3><ul>\n<li>谷歌浏览器</li>\n<li>油猴相关插件</li>\n</ul>\n<h3 id=\"8-开发相关\"><a href=\"#8-开发相关\" class=\"headerlink\" title=\"8.开发相关\"></a>8.开发相关</h3><ul>\n<li>必备软件</li>\n<li>VSCode</li>\n<li>Git</li>\n<li>MySQL</li>\n<li>MongoDB</li>\n<li>Redis</li>\n<li>SubineText<ul>\n<li>可根据需要选装</li>\n<li>OpenSSH-win64  ssh工具</li>\n<li>运行Game使用Python27,3版本的不支持</li>\n<li>XShell</li>\n<li>Xftp</li>\n<li>winscp</li>\n<li>explore++</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"9-输入法\"><a href=\"#9-输入法\" class=\"headerlink\" title=\"9.输入法\"></a>9.输入法</h3><ul>\n<li>搜狗输入法</li>\n</ul>\n<h3 id=\"10-聊天交流\"><a href=\"#10-聊天交流\" class=\"headerlink\" title=\"10.聊天交流\"></a>10.聊天交流</h3><ul>\n<li>QQ</li>\n<li>微信</li>\n</ul>\n<h3 id=\"11-文件搜索、编辑、备份、解压工具\"><a href=\"#11-文件搜索、编辑、备份、解压工具\" class=\"headerlink\" title=\"11.文件搜索、编辑、备份、解压工具\"></a>11.文件搜索、编辑、备份、解压工具</h3><ul>\n<li>Typora</li>\n<li>Listary</li>\n<li>百度云盘</li>\n<li>winRAR</li>\n</ul>\n<h3 id=\"12-截图软件\"><a href=\"#12-截图软件\" class=\"headerlink\" title=\"12.截图软件\"></a>12.截图软件</h3><ul>\n<li>Snipaste（支持Windows和Mac ，多截屏贴图）</li>\n</ul>\n<h3 id=\"13-抓包工具\"><a href=\"#13-抓包工具\" class=\"headerlink\" title=\"13.抓包工具\"></a>13.抓包工具</h3><ul>\n<li>wires hark 推荐</li>\n<li>burp</li>\n</ul>\n"},{"title":"开发环境搭建","date":"2021-03-03T04:00:00.000Z","_content":"\n## 开发环境搭建\n\n2021.03.03\n\n------\n\n1. 安装开发软件\n\n\t- Mysql、MongoDB\n\t\n\t\t安装MongoDB的时候，不要勾选Compress\n\t\n\t- sublimeText3\n\t\n\t```\n\t\t// 安装PrettyJson\n\t\t// 按Ctrl+Shift+p打开命令框，搜索PCI，打开package安装框\t\t\n\t\t// 搜索PrettyJson，点击条目安装\n\t\t// Ctrl+Alt+J就可格式化json数据\n\t```\n\t\n\t- vscode\n\t\n\t\t使用GitHub账号同步插件设置\n\t\n\t- navicatPremium\n\t\n\t- Git\n\t\n\t- svn\n\t\n\t- go\n\t\n\t- python27\n\t\n\t- SourceTree\n\t\n\t- WinScp\n\t\n\t- Typora\n2. 配置开发环境\n\t- go\n\t\t配置gopath\n\t\t配置代理\n\t\t配置GO111MODULE\n\t- vscode\n\t\tvscode相关插件安装(chinese,go,svn...)\n\t\t安装go相关插件\n\t\t安装svn，并配置svn.path 路径使用\\\\分隔\n\n## docker\n\n------\n\n```\ndocker network create --subnet=192.168.1.152/16 --gateway 192.168.1.1 mynetwork\ndocker run -itd --name dgserver --mac-address 00-E0-6B-68-05-A7  -v  E:/docker_server/server:/root/server --net mynetwork --ip 192.168.1.152 centos:centos8 /bin/bash\n```\n\nDocker安装后，默认会创建下面三种网络类型\n启动 Docker的时候，用 --network 参数，可以指定网络类型\n\n```\ndocker run -itd --name test1 --network bridge --ip 172.17.0.10 centos:latest /bin/bash\n```\n\nbridge：桥接网络\n默认情况下启动的Docker容器，都是使用 bridge，Docker安装时创建的桥接网络，每次Docker容器重启时，会按照顺序获取对应的IP地址，这个就导致重启下，Docker的IP地址就变了\n\nnone：无指定网络\n使用 --network=none ，docker 容器就不会分配局域网的IP\n\nhost： 主机网络\n使用 --network=host，此时，Docker 容器的网络会附属在主机上，两者是互通的。\n例如，在容器中运行一个Web服务，监听8080端口，则主机的8080端口就会自动映射到容器中。\n\n创建自定义网络：（设置固定IP）\n启动Docker容器的时候，使用默认的网络是不支持指派固定IP的，如下\n\n步骤1: 创建自定义网络\n```\ndocker network ls\nNETWORK ID     NAME        DRIVER       SCOPE\n9781b1f585ae    bridge       bridge       local\n1252da701e55    host        host        local\n4f11ae9c85de    mynetwork      bridge       local\n237ea3d5cfbf    none        null        local\n```\n\n步骤2: 创建Docker容器\n```\ndocker run -itd --name networkTest1 --net mynetwork --ip 172.18.0.2 centos:latest /bin/bash\n```","source":"_posts/开发环境搭建.md","raw":"---\ntitle: 开发环境搭建\ndate: 2021-03-03 12:00:00\ntags:\n- Go\ncategories:\n- 工作【间歇性记录】\n---\n\n## 开发环境搭建\n\n2021.03.03\n\n------\n\n1. 安装开发软件\n\n\t- Mysql、MongoDB\n\t\n\t\t安装MongoDB的时候，不要勾选Compress\n\t\n\t- sublimeText3\n\t\n\t```\n\t\t// 安装PrettyJson\n\t\t// 按Ctrl+Shift+p打开命令框，搜索PCI，打开package安装框\t\t\n\t\t// 搜索PrettyJson，点击条目安装\n\t\t// Ctrl+Alt+J就可格式化json数据\n\t```\n\t\n\t- vscode\n\t\n\t\t使用GitHub账号同步插件设置\n\t\n\t- navicatPremium\n\t\n\t- Git\n\t\n\t- svn\n\t\n\t- go\n\t\n\t- python27\n\t\n\t- SourceTree\n\t\n\t- WinScp\n\t\n\t- Typora\n2. 配置开发环境\n\t- go\n\t\t配置gopath\n\t\t配置代理\n\t\t配置GO111MODULE\n\t- vscode\n\t\tvscode相关插件安装(chinese,go,svn...)\n\t\t安装go相关插件\n\t\t安装svn，并配置svn.path 路径使用\\\\分隔\n\n## docker\n\n------\n\n```\ndocker network create --subnet=192.168.1.152/16 --gateway 192.168.1.1 mynetwork\ndocker run -itd --name dgserver --mac-address 00-E0-6B-68-05-A7  -v  E:/docker_server/server:/root/server --net mynetwork --ip 192.168.1.152 centos:centos8 /bin/bash\n```\n\nDocker安装后，默认会创建下面三种网络类型\n启动 Docker的时候，用 --network 参数，可以指定网络类型\n\n```\ndocker run -itd --name test1 --network bridge --ip 172.17.0.10 centos:latest /bin/bash\n```\n\nbridge：桥接网络\n默认情况下启动的Docker容器，都是使用 bridge，Docker安装时创建的桥接网络，每次Docker容器重启时，会按照顺序获取对应的IP地址，这个就导致重启下，Docker的IP地址就变了\n\nnone：无指定网络\n使用 --network=none ，docker 容器就不会分配局域网的IP\n\nhost： 主机网络\n使用 --network=host，此时，Docker 容器的网络会附属在主机上，两者是互通的。\n例如，在容器中运行一个Web服务，监听8080端口，则主机的8080端口就会自动映射到容器中。\n\n创建自定义网络：（设置固定IP）\n启动Docker容器的时候，使用默认的网络是不支持指派固定IP的，如下\n\n步骤1: 创建自定义网络\n```\ndocker network ls\nNETWORK ID     NAME        DRIVER       SCOPE\n9781b1f585ae    bridge       bridge       local\n1252da701e55    host        host        local\n4f11ae9c85de    mynetwork      bridge       local\n237ea3d5cfbf    none        null        local\n```\n\n步骤2: 创建Docker容器\n```\ndocker run -itd --name networkTest1 --net mynetwork --ip 172.18.0.2 centos:latest /bin/bash\n```","slug":"开发环境搭建","published":1,"updated":"2022-09-13T07:45:22.000Z","_id":"cl7zwofed000qsspv4l0qhszi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><p>2021.03.03</p>\n<hr>\n<ol>\n<li><p>安装开发软件</p>\n<ul>\n<li>Mysql、MongoDB  安装MongoDB的时候，不要勾选Compress</li>\n<li>sublimeText3</li>\n</ul>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 安装PrettyJson<br><span class=\"hljs-regexp\">//</span> 按Ctrl+Shift+p打开命令框，搜索PCI，打开package安装框\t\t<br><span class=\"hljs-regexp\">//</span> 搜索PrettyJson，点击条目安装<br><span class=\"hljs-regexp\">//</span> Ctrl+Alt+J就可格式化json数据<br></code></pre></td></tr></table></figure>\n<ul>\n<li>vscode  使用GitHub账号同步插件设置</li>\n<li>navicatPremium</li>\n<li>Git</li>\n<li>svn</li>\n<li>go</li>\n<li>python27</li>\n<li>SourceTree</li>\n<li>WinScp</li>\n<li>Typora</li>\n</ul>\n</li>\n<li><p>配置开发环境</p>\n<ul>\n<li>go<br>  配置gopath<br>  配置代理<br>  配置GO111MODULE</li>\n<li>vscode<br>  vscode相关插件安装(chinese,go,svn…)<br>  安装go相关插件<br>  安装svn，并配置svn.path 路径使用\\分隔</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><hr>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">docker network create --subnet=<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.152</span>/<span class=\"hljs-number\">16</span> --gateway <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.1</span> mynetwork<br>docker run -itd --name dgserver --mac-address <span class=\"hljs-number\">00</span>-E0-<span class=\"hljs-number\">6B-68</span>-<span class=\"hljs-number\">05</span>-A7  -v  E:/docker_server/server:/root/server --net mynetwork --ip <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.152</span> centos:centos8 /bin/bash<br></code></pre></td></tr></table></figure>\n\n<p>Docker安装后，默认会创建下面三种网络类型<br>启动 Docker的时候，用 –network 参数，可以指定网络类型</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">docker run -itd <span class=\"hljs-params\">--name</span> test1 <span class=\"hljs-params\">--network</span> bridge <span class=\"hljs-params\">--ip</span> 172.17.0.10 centos<span class=\"hljs-function\">:latest</span> <span class=\"hljs-string\">/bin/bash</span><br></code></pre></td></tr></table></figure>\n\n<p>bridge：桥接网络<br>默认情况下启动的Docker容器，都是使用 bridge，Docker安装时创建的桥接网络，每次Docker容器重启时，会按照顺序获取对应的IP地址，这个就导致重启下，Docker的IP地址就变了</p>\n<p>none：无指定网络<br>使用 –network=none ，docker 容器就不会分配局域网的IP</p>\n<p>host： 主机网络<br>使用 –network=host，此时，Docker 容器的网络会附属在主机上，两者是互通的。<br>例如，在容器中运行一个Web服务，监听8080端口，则主机的8080端口就会自动映射到容器中。</p>\n<p>创建自定义网络：（设置固定IP）<br>启动Docker容器的时候，使用默认的网络是不支持指派固定IP的，如下</p>\n<p>步骤1: 创建自定义网络</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">docker network ls<br>NETWORK ID     NAME        DRIVER       <span class=\"hljs-keyword\">SCOPE</span><br><span class=\"hljs-number\">9781</span>b1f585ae    bridge       bridge       <span class=\"hljs-keyword\">local</span><br><span class=\"hljs-number\">1252</span>da701e55    host        host        <span class=\"hljs-keyword\">local</span><br><span class=\"hljs-number\">4</span>f11ae9c85de    mynetwork      bridge       <span class=\"hljs-keyword\">local</span><br><span class=\"hljs-number\">237</span>ea3d5cfbf    <span class=\"hljs-keyword\">none</span>        <span class=\"hljs-keyword\">null</span>        <span class=\"hljs-keyword\">local</span><br></code></pre></td></tr></table></figure>\n\n<p>步骤2: 创建Docker容器</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">docker run -itd <span class=\"hljs-params\">--name</span> networkTest1 <span class=\"hljs-params\">--net</span> mynetwork <span class=\"hljs-params\">--ip</span> 172.18.0.2 centos<span class=\"hljs-function\">:latest</span> <span class=\"hljs-string\">/bin/bash</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1277,"excerpt":"","more":"<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><p>2021.03.03</p>\n<hr>\n<ol>\n<li><p>安装开发软件</p>\n<ul>\n<li>Mysql、MongoDB  安装MongoDB的时候，不要勾选Compress</li>\n<li>sublimeText3</li>\n</ul>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 安装PrettyJson<br><span class=\"hljs-regexp\">//</span> 按Ctrl+Shift+p打开命令框，搜索PCI，打开package安装框\t\t<br><span class=\"hljs-regexp\">//</span> 搜索PrettyJson，点击条目安装<br><span class=\"hljs-regexp\">//</span> Ctrl+Alt+J就可格式化json数据<br></code></pre></td></tr></table></figure>\n<ul>\n<li>vscode  使用GitHub账号同步插件设置</li>\n<li>navicatPremium</li>\n<li>Git</li>\n<li>svn</li>\n<li>go</li>\n<li>python27</li>\n<li>SourceTree</li>\n<li>WinScp</li>\n<li>Typora</li>\n</ul>\n</li>\n<li><p>配置开发环境</p>\n<ul>\n<li>go<br>  配置gopath<br>  配置代理<br>  配置GO111MODULE</li>\n<li>vscode<br>  vscode相关插件安装(chinese,go,svn…)<br>  安装go相关插件<br>  安装svn，并配置svn.path 路径使用\\分隔</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><hr>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">docker network create --subnet=<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.152</span>/<span class=\"hljs-number\">16</span> --gateway <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.1</span> mynetwork<br>docker run -itd --name dgserver --mac-address <span class=\"hljs-number\">00</span>-E0-<span class=\"hljs-number\">6B-68</span>-<span class=\"hljs-number\">05</span>-A7  -v  E:/docker_server/server:/root/server --net mynetwork --ip <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.152</span> centos:centos8 /bin/bash<br></code></pre></td></tr></table></figure>\n\n<p>Docker安装后，默认会创建下面三种网络类型<br>启动 Docker的时候，用 –network 参数，可以指定网络类型</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">docker run -itd <span class=\"hljs-params\">--name</span> test1 <span class=\"hljs-params\">--network</span> bridge <span class=\"hljs-params\">--ip</span> 172.17.0.10 centos<span class=\"hljs-function\">:latest</span> <span class=\"hljs-string\">/bin/bash</span><br></code></pre></td></tr></table></figure>\n\n<p>bridge：桥接网络<br>默认情况下启动的Docker容器，都是使用 bridge，Docker安装时创建的桥接网络，每次Docker容器重启时，会按照顺序获取对应的IP地址，这个就导致重启下，Docker的IP地址就变了</p>\n<p>none：无指定网络<br>使用 –network=none ，docker 容器就不会分配局域网的IP</p>\n<p>host： 主机网络<br>使用 –network=host，此时，Docker 容器的网络会附属在主机上，两者是互通的。<br>例如，在容器中运行一个Web服务，监听8080端口，则主机的8080端口就会自动映射到容器中。</p>\n<p>创建自定义网络：（设置固定IP）<br>启动Docker容器的时候，使用默认的网络是不支持指派固定IP的，如下</p>\n<p>步骤1: 创建自定义网络</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">docker network ls<br>NETWORK ID     NAME        DRIVER       <span class=\"hljs-keyword\">SCOPE</span><br><span class=\"hljs-number\">9781</span>b1f585ae    bridge       bridge       <span class=\"hljs-keyword\">local</span><br><span class=\"hljs-number\">1252</span>da701e55    host        host        <span class=\"hljs-keyword\">local</span><br><span class=\"hljs-number\">4</span>f11ae9c85de    mynetwork      bridge       <span class=\"hljs-keyword\">local</span><br><span class=\"hljs-number\">237</span>ea3d5cfbf    <span class=\"hljs-keyword\">none</span>        <span class=\"hljs-keyword\">null</span>        <span class=\"hljs-keyword\">local</span><br></code></pre></td></tr></table></figure>\n\n<p>步骤2: 创建Docker容器</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">docker run -itd <span class=\"hljs-params\">--name</span> networkTest1 <span class=\"hljs-params\">--net</span> mynetwork <span class=\"hljs-params\">--ip</span> 172.18.0.2 centos<span class=\"hljs-function\">:latest</span> <span class=\"hljs-string\">/bin/bash</span><br></code></pre></td></tr></table></figure>"},{"title":"框架通信","date":"2021-03-05T04:00:00.000Z","update":"2021-03-11T04:00:00.000Z","_content":"\n2021.03.05\n=========================================\n\n0\t1\t2\t3\t4\t5\t6\t7\t8\t// 1-9筒\n9\t10 \t11\t12\t13\t14\t15\t16\t17\t// 1-9条\n18\t19\t20\t21\t22\t23\t24\t25\t26\t// 1-9万\n27\t28\t29 \t30\t// 东南西北\n31\t32\t33\t// 中发白\n\n可增加花牌\n34\t35\t36\t37 // 春夏秋冬\n\n\n2021.03.08\n=========================================\n创建麻将游戏场景的时候，就会初始化麻将牌，ps.buf 并洗牌\nDrawnCard(card,bool) 发牌\ncardpool 当前模式整副牌\npos 当前状态下的牌索引\n\n获取万牌数量：100, 200, 800, 900, 800, 0, 0, 0, 0, 1500, 2500, 2000, 800, 400   sum 10000\n\n随机 0-9999 其中一个数字\n\n权重. 可通过调整json 配置文件，动态调整麻将发牌类型的概率，而后经过计算各个牌型的分值，计算出该手牌的牌型分数\n\n根据牌型分数 加之其他策略，决定是否把好牌发给机器人\tplayer1 player2  handcard1 handcard2\n\n\n2021.03.09\n=========================================\n发牌逻辑：玩家听牌后摸到的牌直接替换成自己可以胡的牌，通过客户端传的playerop opcode10 来开启功能。\n\n\n分析其他玩家操作当前出牌，数据结构使用队列。 依次把 胡 杠 碰 吃 操作写入。\n\ncanHu() 分析玩家能否胡牌\n\n思路 把当前手牌大于2张的牌，依次看做将牌，带入计算，获取顺子 和刻子 看是否能胡牌\t风扑，将扑\n\n\n胡牌数据结构图：\n\t\t\t\t\t\troot\n\t1-9筒\t1-9万\t1-9条\t东南西北\t\t中发白\t\t//去除2张将牌\n1\t2\t3\t4\t\t\t\t\t\t\t\t\t\t//构建顺牌，添加刻子\n\n\n时间复杂度：最坏情况下 14*34*3 O(n²)\n空间复杂度：拷贝一份，然后传递指针 O(n)\n\n2021.03.10\n=========================================\n玩家操作： 思路，直接把玩家摸牌和其他玩家打牌，分开分别处理。就不存在判断供牌玩家，胡牌玩家了。\n\t自身摸牌时操作，由客户端进行处理。\n\twaitdiscard 阶段，接收客户端发送的 出牌 暗杠，补杠，胡，过操作\n\n\t别人打出的牌进行操作，根据玩家进行压栈操作。依次压入 胡 碰杠 吃\n\twaitcpkh 阶段，接收客户端根据服务器返回操作 而发送的 胡，抢杠胡，碰杠，吃，过操作\n\n2021.03.11\n=========================================\n上午详细研究 吃碰杠胡算法\n然后研究框架\n\n胡牌 去除将牌，去除刻子，看剩余手牌是否可以组成顺子\n碰牌 当前牌数量是否>=2\n杠牌 当前牌数量是否==3\n吃牌 枚举所有情况 123 456 789  9种吃牌情况\n\n1 23\n12 3\n123\n\n789\n78 9\n7 89\n\n\n123 789 \n456\n\n1\t2\t3\t4\t5\t6\t7\t8\t9\n1\t4\t3\t1\t1\t1\t1\t1\t1\n\n3 2","source":"_posts/麻将算法.md","raw":"---\ntitle: 框架通信\ndate: 2021-03-05 12:00:00\nupdate: 2021-03-11 12:00:00\ntags:\n- 麻将\n- 算法\ncategories:\n- 工作【间歇性记录】\n---\n\n2021.03.05\n=========================================\n\n0\t1\t2\t3\t4\t5\t6\t7\t8\t// 1-9筒\n9\t10 \t11\t12\t13\t14\t15\t16\t17\t// 1-9条\n18\t19\t20\t21\t22\t23\t24\t25\t26\t// 1-9万\n27\t28\t29 \t30\t// 东南西北\n31\t32\t33\t// 中发白\n\n可增加花牌\n34\t35\t36\t37 // 春夏秋冬\n\n\n2021.03.08\n=========================================\n创建麻将游戏场景的时候，就会初始化麻将牌，ps.buf 并洗牌\nDrawnCard(card,bool) 发牌\ncardpool 当前模式整副牌\npos 当前状态下的牌索引\n\n获取万牌数量：100, 200, 800, 900, 800, 0, 0, 0, 0, 1500, 2500, 2000, 800, 400   sum 10000\n\n随机 0-9999 其中一个数字\n\n权重. 可通过调整json 配置文件，动态调整麻将发牌类型的概率，而后经过计算各个牌型的分值，计算出该手牌的牌型分数\n\n根据牌型分数 加之其他策略，决定是否把好牌发给机器人\tplayer1 player2  handcard1 handcard2\n\n\n2021.03.09\n=========================================\n发牌逻辑：玩家听牌后摸到的牌直接替换成自己可以胡的牌，通过客户端传的playerop opcode10 来开启功能。\n\n\n分析其他玩家操作当前出牌，数据结构使用队列。 依次把 胡 杠 碰 吃 操作写入。\n\ncanHu() 分析玩家能否胡牌\n\n思路 把当前手牌大于2张的牌，依次看做将牌，带入计算，获取顺子 和刻子 看是否能胡牌\t风扑，将扑\n\n\n胡牌数据结构图：\n\t\t\t\t\t\troot\n\t1-9筒\t1-9万\t1-9条\t东南西北\t\t中发白\t\t//去除2张将牌\n1\t2\t3\t4\t\t\t\t\t\t\t\t\t\t//构建顺牌，添加刻子\n\n\n时间复杂度：最坏情况下 14*34*3 O(n²)\n空间复杂度：拷贝一份，然后传递指针 O(n)\n\n2021.03.10\n=========================================\n玩家操作： 思路，直接把玩家摸牌和其他玩家打牌，分开分别处理。就不存在判断供牌玩家，胡牌玩家了。\n\t自身摸牌时操作，由客户端进行处理。\n\twaitdiscard 阶段，接收客户端发送的 出牌 暗杠，补杠，胡，过操作\n\n\t别人打出的牌进行操作，根据玩家进行压栈操作。依次压入 胡 碰杠 吃\n\twaitcpkh 阶段，接收客户端根据服务器返回操作 而发送的 胡，抢杠胡，碰杠，吃，过操作\n\n2021.03.11\n=========================================\n上午详细研究 吃碰杠胡算法\n然后研究框架\n\n胡牌 去除将牌，去除刻子，看剩余手牌是否可以组成顺子\n碰牌 当前牌数量是否>=2\n杠牌 当前牌数量是否==3\n吃牌 枚举所有情况 123 456 789  9种吃牌情况\n\n1 23\n12 3\n123\n\n789\n78 9\n7 89\n\n\n123 789 \n456\n\n1\t2\t3\t4\t5\t6\t7\t8\t9\n1\t4\t3\t1\t1\t1\t1\t1\t1\n\n3 2","slug":"麻将算法","published":1,"updated":"2022-09-13T07:45:08.000Z","_id":"cl7zwouzk000tsspvcn0i7p24","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2021-03-05\"><a href=\"#2021-03-05\" class=\"headerlink\" title=\"2021.03.05\"></a>2021.03.05</h1><p>0    1    2    3    4    5    6    7    8    // 1-9筒<br>9    10     11    12    13    14    15    16    17    // 1-9条<br>18    19    20    21    22    23    24    25    26    // 1-9万<br>27    28    29     30    // 东南西北<br>31    32    33    // 中发白</p>\n<p>可增加花牌<br>34    35    36    37 // 春夏秋冬</p>\n<h1 id=\"2021-03-08\"><a href=\"#2021-03-08\" class=\"headerlink\" title=\"2021.03.08\"></a>2021.03.08</h1><p>创建麻将游戏场景的时候，就会初始化麻将牌，ps.buf 并洗牌<br>DrawnCard(card,bool) 发牌<br>cardpool 当前模式整副牌<br>pos 当前状态下的牌索引</p>\n<p>获取万牌数量：100, 200, 800, 900, 800, 0, 0, 0, 0, 1500, 2500, 2000, 800, 400   sum 10000</p>\n<p>随机 0-9999 其中一个数字</p>\n<p>权重. 可通过调整json 配置文件，动态调整麻将发牌类型的概率，而后经过计算各个牌型的分值，计算出该手牌的牌型分数</p>\n<p>根据牌型分数 加之其他策略，决定是否把好牌发给机器人    player1 player2  handcard1 handcard2</p>\n<h1 id=\"2021-03-09\"><a href=\"#2021-03-09\" class=\"headerlink\" title=\"2021.03.09\"></a>2021.03.09</h1><p>发牌逻辑：玩家听牌后摸到的牌直接替换成自己可以胡的牌，通过客户端传的playerop opcode10 来开启功能。</p>\n<p>分析其他玩家操作当前出牌，数据结构使用队列。 依次把 胡 杠 碰 吃 操作写入。</p>\n<p>canHu() 分析玩家能否胡牌</p>\n<p>思路 把当前手牌大于2张的牌，依次看做将牌，带入计算，获取顺子 和刻子 看是否能胡牌    风扑，将扑</p>\n<p>胡牌数据结构图：<br>                        root<br>    1-9筒    1-9万    1-9条    东南西北        中发白        //去除2张将牌<br>1    2    3    4                                        //构建顺牌，添加刻子</p>\n<p>时间复杂度：最坏情况下 14<em>34</em>3 O(n²)<br>空间复杂度：拷贝一份，然后传递指针 O(n)</p>\n<h1 id=\"2021-03-10\"><a href=\"#2021-03-10\" class=\"headerlink\" title=\"2021.03.10\"></a>2021.03.10</h1><p>玩家操作： 思路，直接把玩家摸牌和其他玩家打牌，分开分别处理。就不存在判断供牌玩家，胡牌玩家了。<br>    自身摸牌时操作，由客户端进行处理。<br>    waitdiscard 阶段，接收客户端发送的 出牌 暗杠，补杠，胡，过操作</p>\n<pre><code class=\"hljs\">别人打出的牌进行操作，根据玩家进行压栈操作。依次压入 胡 碰杠 吃\nwaitcpkh 阶段，接收客户端根据服务器返回操作 而发送的 胡，抢杠胡，碰杠，吃，过操作\n</code></pre>\n<h1 id=\"2021-03-11\"><a href=\"#2021-03-11\" class=\"headerlink\" title=\"2021.03.11\"></a>2021.03.11</h1><p>上午详细研究 吃碰杠胡算法<br>然后研究框架</p>\n<p>胡牌 去除将牌，去除刻子，看剩余手牌是否可以组成顺子<br>碰牌 当前牌数量是否&gt;=2<br>杠牌 当前牌数量是否==3<br>吃牌 枚举所有情况 123 456 789  9种吃牌情况</p>\n<p>1 23<br>12 3<br>123</p>\n<p>789<br>78 9<br>7 89</p>\n<p>123 789<br>456</p>\n<p>1    2    3    4    5    6    7    8    9<br>1    4    3    1    1    1    1    1    1</p>\n<p>3 2</p>\n","site":{"data":{}},"wordcount":984,"excerpt":"","more":"<h1 id=\"2021-03-05\"><a href=\"#2021-03-05\" class=\"headerlink\" title=\"2021.03.05\"></a>2021.03.05</h1><p>0    1    2    3    4    5    6    7    8    // 1-9筒<br>9    10     11    12    13    14    15    16    17    // 1-9条<br>18    19    20    21    22    23    24    25    26    // 1-9万<br>27    28    29     30    // 东南西北<br>31    32    33    // 中发白</p>\n<p>可增加花牌<br>34    35    36    37 // 春夏秋冬</p>\n<h1 id=\"2021-03-08\"><a href=\"#2021-03-08\" class=\"headerlink\" title=\"2021.03.08\"></a>2021.03.08</h1><p>创建麻将游戏场景的时候，就会初始化麻将牌，ps.buf 并洗牌<br>DrawnCard(card,bool) 发牌<br>cardpool 当前模式整副牌<br>pos 当前状态下的牌索引</p>\n<p>获取万牌数量：100, 200, 800, 900, 800, 0, 0, 0, 0, 1500, 2500, 2000, 800, 400   sum 10000</p>\n<p>随机 0-9999 其中一个数字</p>\n<p>权重. 可通过调整json 配置文件，动态调整麻将发牌类型的概率，而后经过计算各个牌型的分值，计算出该手牌的牌型分数</p>\n<p>根据牌型分数 加之其他策略，决定是否把好牌发给机器人    player1 player2  handcard1 handcard2</p>\n<h1 id=\"2021-03-09\"><a href=\"#2021-03-09\" class=\"headerlink\" title=\"2021.03.09\"></a>2021.03.09</h1><p>发牌逻辑：玩家听牌后摸到的牌直接替换成自己可以胡的牌，通过客户端传的playerop opcode10 来开启功能。</p>\n<p>分析其他玩家操作当前出牌，数据结构使用队列。 依次把 胡 杠 碰 吃 操作写入。</p>\n<p>canHu() 分析玩家能否胡牌</p>\n<p>思路 把当前手牌大于2张的牌，依次看做将牌，带入计算，获取顺子 和刻子 看是否能胡牌    风扑，将扑</p>\n<p>胡牌数据结构图：<br>                        root<br>    1-9筒    1-9万    1-9条    东南西北        中发白        //去除2张将牌<br>1    2    3    4                                        //构建顺牌，添加刻子</p>\n<p>时间复杂度：最坏情况下 14<em>34</em>3 O(n²)<br>空间复杂度：拷贝一份，然后传递指针 O(n)</p>\n<h1 id=\"2021-03-10\"><a href=\"#2021-03-10\" class=\"headerlink\" title=\"2021.03.10\"></a>2021.03.10</h1><p>玩家操作： 思路，直接把玩家摸牌和其他玩家打牌，分开分别处理。就不存在判断供牌玩家，胡牌玩家了。<br>    自身摸牌时操作，由客户端进行处理。<br>    waitdiscard 阶段，接收客户端发送的 出牌 暗杠，补杠，胡，过操作</p>\n<pre><code>别人打出的牌进行操作，根据玩家进行压栈操作。依次压入 胡 碰杠 吃\nwaitcpkh 阶段，接收客户端根据服务器返回操作 而发送的 胡，抢杠胡，碰杠，吃，过操作\n</code></pre>\n<h1 id=\"2021-03-11\"><a href=\"#2021-03-11\" class=\"headerlink\" title=\"2021.03.11\"></a>2021.03.11</h1><p>上午详细研究 吃碰杠胡算法<br>然后研究框架</p>\n<p>胡牌 去除将牌，去除刻子，看剩余手牌是否可以组成顺子<br>碰牌 当前牌数量是否&gt;=2<br>杠牌 当前牌数量是否==3<br>吃牌 枚举所有情况 123 456 789  9种吃牌情况</p>\n<p>1 23<br>12 3<br>123</p>\n<p>789<br>78 9<br>7 89</p>\n<p>123 789<br>456</p>\n<p>1    2    3    4    5    6    7    8    9<br>1    4    3    1    1    1    1    1    1</p>\n<p>3 2</p>\n"},{"title":"跑得快算法","date":"2021-02-27T04:00:00.000Z","update":"2021-02-27T04:00:00.000Z","_content":"\n2021.02.27\n==================================================\n\nvar CardValueMap = map[int]int{\nPOKER_EMPTY: -1,\n 2: 0,\n  3: 1,\n   4: 2,\n    5: 3,\n     6: 4,\n      7: 5,\n       8: 6,\n        9: 7,\n\n\t10: 8,\n\t 11: 9,\n\t  12: 10,\n\t   0: 11,\n\t    1: 12\n\t    }\n\n// 跑得快,底层数据结构\n 0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t//方片\n 13\t14\t15\t16\t17\t18\t19\t20\t21\t22\t23\t24\t25\t//梅花\n 26\t27\t28\t29\t30\t31\t32\t33\t34\t35\t36\t37\t38\t//红桃\n 39\t40\t41\t42\t43\t44\t45\t46\t47\t48\t49\t50\t51\t//黑桃\n 52\t53\t//小王,大王\n\ncard % 13 取模计算得出 牌值切片的索引值\n\ncard % 13 + 1 计算得出牌值\n根据card值区分花色\n\n使用链表生成树，实现牌型算法：\n\t\t\t\t\t\t\t\t\tA\n\t\t\t\t\t\t\t\t=========\n\t\t\t\t\t\t\t\t|\t\t|\n\t\t\t\t\t\t\t\tK\t\tK\n\t\t\t\t\t\t\t=========\n\t\t\t\t\t\t\t|\t\t|\n\t\t\t\t\t\t\tQ\t\tQ\n\t\t\t\t\t\t=========\n\t\t\t\t\t\t|\t\t|\n\t\t\t\t\t\tJ\t\tJ\n\t\t\t\t\t=========\n\t\t\t\t\t|\t\t|\n\t\t\t\t\t10\t\t10\t\t//实现并非使用二叉树\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\troot\n\t\t\t\t\t\t\t\t\t\t\t\t=====================================================================\n\t\t\t\t\t\t\t\t\t\t \t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n\t\t==================================================================================================\t\t=========\t...依次类推\n\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\n\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\t10\t\tJ\t\tQ\t\tK\t\tA \t\t2\t\t33  --- 22\n\t=========\t...依次类推\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t=========\t...依次类推\n\t|\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t|\n\t4  ---  2\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t44  --- 22\n=========\n|\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...依次类推\n5  ---  2\n\n...依次类推\n\n\n\n\n构建出牌树：\n\t1.先排除炸弹\n\t2.从最小牌开始 (递增逐个判断)\n\t\tA 一张\n\t\t\ta.A\t\t\t找到所有单牌 \n\t\t\tb.ABCDE\t\t使用所有单牌构建顺子 (从最小单张开始 递增逐个判断)\n\t\t\tc.AAAB\t\t找到所有的3张，构建三带一 (从最小3张开始 递增逐个判断)\n\t\t\td.AAABBBCD\t使用所有的3张构建飞机带单牌 (从最长的开始)\n\n\t\tB 两张\n\t\t\ta.AA \t\t找到所有对子\n\t\t\tb.AABB\t\t使用所有对子构建顺子\n\t\t\tc.AAABB \t找到所有的3张，构建三带二\n\t\t\td.AAABBBCCDD使用所有的3张构建飞机带对牌\n\t\n\t\tC 三张\n\t\t\ta.AAABB \t\t找到所有的3张，构建三带二\n\t\t\tb.AAABBB \t\t使用所有的三张构建飞机\n\t\t\tc.AAABBBCCDD\t使用所有的3张构建飞机带对牌\n\t\tD 四张\n\t\t\ta.AAAA\t找到所有的4张\n\n超时自动出牌：\n\tAutoShowCard\n\t\tgetAutoShowCard\n\t\t\t首出牌：getBestAutoSuggestCards, 首出最长的牌, 剩余3张和下家报单特殊处理\n\t\t\t压牌：getAutoSuggestFunc 首先判断炸弹出牌顺序，相同牌型先出，其次拆牌出，其次出炸弹\n\n计算树的深度，找出最短的子树：\n\t计算树的最小深度\n\t分析所有叶子节点\n\t计算叶子结点到根节点的路径长度，长度等于最小深度 。即是最短的子树。\n\t计算排序中单牌数量最少的链表\n\t链表排序 按照牌型中最大的牌值\n\t","source":"_posts/跑得快算法.md","raw":"---\ntitle: 跑得快算法\ndate: 2021-02-27 12:00:00\nupdate: 2021-02-27 12:00:00\ntags:\n- 跑得快\n- 算法\ncategories:\n- 工作【间歇性记录】\n---\n\n2021.02.27\n==================================================\n\nvar CardValueMap = map[int]int{\nPOKER_EMPTY: -1,\n 2: 0,\n  3: 1,\n   4: 2,\n    5: 3,\n     6: 4,\n      7: 5,\n       8: 6,\n        9: 7,\n\n\t10: 8,\n\t 11: 9,\n\t  12: 10,\n\t   0: 11,\n\t    1: 12\n\t    }\n\n// 跑得快,底层数据结构\n 0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t//方片\n 13\t14\t15\t16\t17\t18\t19\t20\t21\t22\t23\t24\t25\t//梅花\n 26\t27\t28\t29\t30\t31\t32\t33\t34\t35\t36\t37\t38\t//红桃\n 39\t40\t41\t42\t43\t44\t45\t46\t47\t48\t49\t50\t51\t//黑桃\n 52\t53\t//小王,大王\n\ncard % 13 取模计算得出 牌值切片的索引值\n\ncard % 13 + 1 计算得出牌值\n根据card值区分花色\n\n使用链表生成树，实现牌型算法：\n\t\t\t\t\t\t\t\t\tA\n\t\t\t\t\t\t\t\t=========\n\t\t\t\t\t\t\t\t|\t\t|\n\t\t\t\t\t\t\t\tK\t\tK\n\t\t\t\t\t\t\t=========\n\t\t\t\t\t\t\t|\t\t|\n\t\t\t\t\t\t\tQ\t\tQ\n\t\t\t\t\t\t=========\n\t\t\t\t\t\t|\t\t|\n\t\t\t\t\t\tJ\t\tJ\n\t\t\t\t\t=========\n\t\t\t\t\t|\t\t|\n\t\t\t\t\t10\t\t10\t\t//实现并非使用二叉树\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\troot\n\t\t\t\t\t\t\t\t\t\t\t\t=====================================================================\n\t\t\t\t\t\t\t\t\t\t \t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n\t\t==================================================================================================\t\t=========\t...依次类推\n\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\t|\t\n\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\t10\t\tJ\t\tQ\t\tK\t\tA \t\t2\t\t33  --- 22\n\t=========\t...依次类推\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t=========\t...依次类推\n\t|\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t|\n\t4  ---  2\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t44  --- 22\n=========\n|\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...依次类推\n5  ---  2\n\n...依次类推\n\n\n\n\n构建出牌树：\n\t1.先排除炸弹\n\t2.从最小牌开始 (递增逐个判断)\n\t\tA 一张\n\t\t\ta.A\t\t\t找到所有单牌 \n\t\t\tb.ABCDE\t\t使用所有单牌构建顺子 (从最小单张开始 递增逐个判断)\n\t\t\tc.AAAB\t\t找到所有的3张，构建三带一 (从最小3张开始 递增逐个判断)\n\t\t\td.AAABBBCD\t使用所有的3张构建飞机带单牌 (从最长的开始)\n\n\t\tB 两张\n\t\t\ta.AA \t\t找到所有对子\n\t\t\tb.AABB\t\t使用所有对子构建顺子\n\t\t\tc.AAABB \t找到所有的3张，构建三带二\n\t\t\td.AAABBBCCDD使用所有的3张构建飞机带对牌\n\t\n\t\tC 三张\n\t\t\ta.AAABB \t\t找到所有的3张，构建三带二\n\t\t\tb.AAABBB \t\t使用所有的三张构建飞机\n\t\t\tc.AAABBBCCDD\t使用所有的3张构建飞机带对牌\n\t\tD 四张\n\t\t\ta.AAAA\t找到所有的4张\n\n超时自动出牌：\n\tAutoShowCard\n\t\tgetAutoShowCard\n\t\t\t首出牌：getBestAutoSuggestCards, 首出最长的牌, 剩余3张和下家报单特殊处理\n\t\t\t压牌：getAutoSuggestFunc 首先判断炸弹出牌顺序，相同牌型先出，其次拆牌出，其次出炸弹\n\n计算树的深度，找出最短的子树：\n\t计算树的最小深度\n\t分析所有叶子节点\n\t计算叶子结点到根节点的路径长度，长度等于最小深度 。即是最短的子树。\n\t计算排序中单牌数量最少的链表\n\t链表排序 按照牌型中最大的牌值\n\t","slug":"跑得快算法","published":1,"updated":"2022-09-13T07:45:12.000Z","_id":"cl7zwow9t000zsspvcju187oo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2021-02-27\"><a href=\"#2021-02-27\" class=\"headerlink\" title=\"2021.02.27\"></a>2021.02.27</h1><p>var CardValueMap = map[int]int{<br>POKER_EMPTY: -1,<br> 2: 0,<br>  3: 1,<br>   4: 2,<br>    5: 3,<br>     6: 4,<br>      7: 5,<br>       8: 6,<br>        9: 7,</p>\n<pre><code class=\"hljs\">10: 8,\n 11: 9,\n  12: 10,\n   0: 11,\n    1: 12\n    &#125;\n</code></pre>\n<p>// 跑得快,底层数据结构<br> 0    1    2    3    4    5    6    7    8    9    10    11    12    //方片<br> 13    14    15    16    17    18    19    20    21    22    23    24    25    //梅花<br> 26    27    28    29    30    31    32    33    34    35    36    37    38    //红桃<br> 39    40    41    42    43    44    45    46    47    48    49    50    51    //黑桃<br> 52    53    //小王,大王</p>\n<p>card % 13 取模计算得出 牌值切片的索引值</p>\n<p>card % 13 + 1 计算得出牌值<br>根据card值区分花色</p>\n<p>使用链表生成树，实现牌型算法：<br>                                    A<br>                                =========<br>                                |        |<br>                                K        K<br>                            =========<br>                            |        |<br>                            Q        Q<br>                        =========<br>                        |        |<br>                        J        J<br>                    =========<br>                    |        |<br>                    10        10        //实现并非使用二叉树</p>\n<pre><code class=\"hljs\">                                                                            root\n                                            =====================================================================\n                                             |                                                                    |\n    ==================================================================================================        =========    ...依次类推\n    |        |        |        |        |        |        |        |        |        |        |        |        |        |        |    \n    3        4        5        6        7        8        9        10        J        Q        K        A         2        33  --- 22\n=========    ...依次类推                                                                                    =========    ...依次类推\n|        |                                                                                                |        |\n4  ---  2                                                                                                44  --- 22\n</code></pre>\n<p>=========<br>|        |                                                                                                …依次类推<br>5  —  2</p>\n<p>…依次类推</p>\n<p>构建出牌树：<br>    1.先排除炸弹<br>    2.从最小牌开始 (递增逐个判断)<br>        A 一张<br>            a.A            找到所有单牌<br>            b.ABCDE        使用所有单牌构建顺子 (从最小单张开始 递增逐个判断)<br>            c.AAAB        找到所有的3张，构建三带一 (从最小3张开始 递增逐个判断)<br>            d.AAABBBCD    使用所有的3张构建飞机带单牌 (从最长的开始)</p>\n<pre><code class=\"hljs\">    B 两张\n        a.AA         找到所有对子\n        b.AABB        使用所有对子构建顺子\n        c.AAABB     找到所有的3张，构建三带二\n        d.AAABBBCCDD使用所有的3张构建飞机带对牌\n\n    C 三张\n        a.AAABB         找到所有的3张，构建三带二\n        b.AAABBB         使用所有的三张构建飞机\n        c.AAABBBCCDD    使用所有的3张构建飞机带对牌\n    D 四张\n        a.AAAA    找到所有的4张\n</code></pre>\n<p>超时自动出牌：<br>    AutoShowCard<br>        getAutoShowCard<br>            首出牌：getBestAutoSuggestCards, 首出最长的牌, 剩余3张和下家报单特殊处理<br>            压牌：getAutoSuggestFunc 首先判断炸弹出牌顺序，相同牌型先出，其次拆牌出，其次出炸弹</p>\n<p>计算树的深度，找出最短的子树：<br>    计算树的最小深度<br>    分析所有叶子节点<br>    计算叶子结点到根节点的路径长度，长度等于最小深度 。即是最短的子树。<br>    计算排序中单牌数量最少的链表<br>    链表排序 按照牌型中最大的牌值\n    </p>\n","site":{"data":{}},"wordcount":1196,"excerpt":"","more":"<h1 id=\"2021-02-27\"><a href=\"#2021-02-27\" class=\"headerlink\" title=\"2021.02.27\"></a>2021.02.27</h1><p>var CardValueMap = map[int]int{<br>POKER_EMPTY: -1,<br> 2: 0,<br>  3: 1,<br>   4: 2,<br>    5: 3,<br>     6: 4,<br>      7: 5,<br>       8: 6,<br>        9: 7,</p>\n<pre><code>10: 8,\n 11: 9,\n  12: 10,\n   0: 11,\n    1: 12\n    &#125;\n</code></pre>\n<p>// 跑得快,底层数据结构<br> 0    1    2    3    4    5    6    7    8    9    10    11    12    //方片<br> 13    14    15    16    17    18    19    20    21    22    23    24    25    //梅花<br> 26    27    28    29    30    31    32    33    34    35    36    37    38    //红桃<br> 39    40    41    42    43    44    45    46    47    48    49    50    51    //黑桃<br> 52    53    //小王,大王</p>\n<p>card % 13 取模计算得出 牌值切片的索引值</p>\n<p>card % 13 + 1 计算得出牌值<br>根据card值区分花色</p>\n<p>使用链表生成树，实现牌型算法：<br>                                    A<br>                                =========<br>                                |        |<br>                                K        K<br>                            =========<br>                            |        |<br>                            Q        Q<br>                        =========<br>                        |        |<br>                        J        J<br>                    =========<br>                    |        |<br>                    10        10        //实现并非使用二叉树</p>\n<pre><code>                                                                            root\n                                            =====================================================================\n                                             |                                                                    |\n    ==================================================================================================        =========    ...依次类推\n    |        |        |        |        |        |        |        |        |        |        |        |        |        |        |    \n    3        4        5        6        7        8        9        10        J        Q        K        A         2        33  --- 22\n=========    ...依次类推                                                                                    =========    ...依次类推\n|        |                                                                                                |        |\n4  ---  2                                                                                                44  --- 22\n</code></pre>\n<p>=========<br>|        |                                                                                                …依次类推<br>5  —  2</p>\n<p>…依次类推</p>\n<p>构建出牌树：<br>    1.先排除炸弹<br>    2.从最小牌开始 (递增逐个判断)<br>        A 一张<br>            a.A            找到所有单牌<br>            b.ABCDE        使用所有单牌构建顺子 (从最小单张开始 递增逐个判断)<br>            c.AAAB        找到所有的3张，构建三带一 (从最小3张开始 递增逐个判断)<br>            d.AAABBBCD    使用所有的3张构建飞机带单牌 (从最长的开始)</p>\n<pre><code>    B 两张\n        a.AA         找到所有对子\n        b.AABB        使用所有对子构建顺子\n        c.AAABB     找到所有的3张，构建三带二\n        d.AAABBBCCDD使用所有的3张构建飞机带对牌\n\n    C 三张\n        a.AAABB         找到所有的3张，构建三带二\n        b.AAABBB         使用所有的三张构建飞机\n        c.AAABBBCCDD    使用所有的3张构建飞机带对牌\n    D 四张\n        a.AAAA    找到所有的4张\n</code></pre>\n<p>超时自动出牌：<br>    AutoShowCard<br>        getAutoShowCard<br>            首出牌：getBestAutoSuggestCards, 首出最长的牌, 剩余3张和下家报单特殊处理<br>            压牌：getAutoSuggestFunc 首先判断炸弹出牌顺序，相同牌型先出，其次拆牌出，其次出炸弹</p>\n<p>计算树的深度，找出最短的子树：<br>    计算树的最小深度<br>    分析所有叶子节点<br>    计算叶子结点到根节点的路径长度，长度等于最小深度 。即是最短的子树。<br>    计算排序中单牌数量最少的链表<br>    链表排序 按照牌型中最大的牌值\n    </p>\n"},{"title":"文件整理","date":"2022-03-27T04:00:00.000Z","_content":"\n# 文件整理\n\n## 2022.03.27\n\n----\n\n1. 软件安装包\n2. 文档记录\n3. 源码文件\n4. 资源列表\n\n","source":"_posts/文件整理.md","raw":"---\ntitle: 文件整理\ndate: 2022-03-27 12:00:00\ntags:\n- 文件整理\ncategories:\n- 学习【资料整理记录】\n---\n\n# 文件整理\n\n## 2022.03.27\n\n----\n\n1. 软件安装包\n2. 文档记录\n3. 源码文件\n4. 资源列表\n\n","slug":"文件整理","published":1,"updated":"2022-09-13T07:45:00.000Z","_id":"cl7zwoy8b0014sspv5x446ttz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"文件整理\"><a href=\"#文件整理\" class=\"headerlink\" title=\"文件整理\"></a>文件整理</h1><h2 id=\"2022-03-27\"><a href=\"#2022-03-27\" class=\"headerlink\" title=\"2022.03.27\"></a>2022.03.27</h2><hr>\n<ol>\n<li>软件安装包</li>\n<li>文档记录</li>\n<li>源码文件</li>\n<li>资源列表</li>\n</ol>\n","site":{"data":{}},"wordcount":31,"excerpt":"","more":"<h1 id=\"文件整理\"><a href=\"#文件整理\" class=\"headerlink\" title=\"文件整理\"></a>文件整理</h1><h2 id=\"2022-03-27\"><a href=\"#2022-03-27\" class=\"headerlink\" title=\"2022.03.27\"></a>2022.03.27</h2><hr>\n<ol>\n<li>软件安装包</li>\n<li>文档记录</li>\n<li>源码文件</li>\n<li>资源列表</li>\n</ol>\n"},{"title":"炸金花算法","date":"2021-03-16T04:00:00.000Z","_content":"\n2021.03.16\n==================================\n炸金花\n牌型大小：\tmin\t\tmax\t\t牌型\n\t豹子\t\t222\t\tAAA\t\t5\n\t顺金\t\t234\t\tAKQ\t\t4\n\t金花\t\t352\t\tAKJ\t\t3\n\t顺子\t\t234\t\tAKQ\t\t2\n\t对子\t\t223\t\tAAK\t\t1\n\t高牌\t\t235\t\tAKJ\t\t0\n\n牌值大小：\n\tA \t==>\t12\n\tK\t==>\t11\n\tQ\t==>\t10\n\tJ\t==>\t9\n\t10\t==>\t8\n\t9\t==>\t7\n\t8\t==>\t6\n\t7\t==>\t5\n\t6\t==>\t4\n\t5\t==>\t3\n\t4\t==>\t2\n\t3\t==>\t1\n\t2\t==>\t0\n\n牌型 牌值 = 牌力\n\nexamples \n0  \t5\t1280\n0\tA \t4096\n\n1\t2\t4608\n1\tA \t69693","source":"_posts/炸金花算法.md","raw":"---\ntitle: 炸金花算法\ndate: 2021-03-16 12:00:00\ntags:\n- 炸金花\n- 算法\ncategories:\n- 工作【间歇性记录】\n---\n\n2021.03.16\n==================================\n炸金花\n牌型大小：\tmin\t\tmax\t\t牌型\n\t豹子\t\t222\t\tAAA\t\t5\n\t顺金\t\t234\t\tAKQ\t\t4\n\t金花\t\t352\t\tAKJ\t\t3\n\t顺子\t\t234\t\tAKQ\t\t2\n\t对子\t\t223\t\tAAK\t\t1\n\t高牌\t\t235\t\tAKJ\t\t0\n\n牌值大小：\n\tA \t==>\t12\n\tK\t==>\t11\n\tQ\t==>\t10\n\tJ\t==>\t9\n\t10\t==>\t8\n\t9\t==>\t7\n\t8\t==>\t6\n\t7\t==>\t5\n\t6\t==>\t4\n\t5\t==>\t3\n\t4\t==>\t2\n\t3\t==>\t1\n\t2\t==>\t0\n\n牌型 牌值 = 牌力\n\nexamples \n0  \t5\t1280\n0\tA \t4096\n\n1\t2\t4608\n1\tA \t69693","slug":"炸金花算法","published":1,"updated":"2022-09-13T07:44:52.000Z","_id":"cl7zwozmx0017sspv3osndhzo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2021-03-16\"><a href=\"#2021-03-16\" class=\"headerlink\" title=\"2021.03.16\"></a>2021.03.16</h1><p>炸金花<br>牌型大小：    min        max        牌型<br>    豹子        222        AAA        5<br>    顺金        234        AKQ        4<br>    金花        352        AKJ        3<br>    顺子        234        AKQ        2<br>    对子        223        AAK        1<br>    高牌        235        AKJ        0</p>\n<p>牌值大小：<br>    A     ==&gt;    12<br>    K    ==&gt;    11<br>    Q    ==&gt;    10<br>    J    ==&gt;    9<br>    10    ==&gt;    8<br>    9    ==&gt;    7<br>    8    ==&gt;    6<br>    7    ==&gt;    5<br>    6    ==&gt;    4<br>    5    ==&gt;    3<br>    4    ==&gt;    2<br>    3    ==&gt;    1<br>    2    ==&gt;    0</p>\n<p>牌型 牌值 = 牌力</p>\n<p>examples<br>0      5    1280<br>0    A     4096</p>\n<p>1    2    4608<br>1    A     69693</p>\n","site":{"data":{}},"wordcount":233,"excerpt":"","more":"<h1 id=\"2021-03-16\"><a href=\"#2021-03-16\" class=\"headerlink\" title=\"2021.03.16\"></a>2021.03.16</h1><p>炸金花<br>牌型大小：    min        max        牌型<br>    豹子        222        AAA        5<br>    顺金        234        AKQ        4<br>    金花        352        AKJ        3<br>    顺子        234        AKQ        2<br>    对子        223        AAK        1<br>    高牌        235        AKJ        0</p>\n<p>牌值大小：<br>    A     ==&gt;    12<br>    K    ==&gt;    11<br>    Q    ==&gt;    10<br>    J    ==&gt;    9<br>    10    ==&gt;    8<br>    9    ==&gt;    7<br>    8    ==&gt;    6<br>    7    ==&gt;    5<br>    6    ==&gt;    4<br>    5    ==&gt;    3<br>    4    ==&gt;    2<br>    3    ==&gt;    1<br>    2    ==&gt;    0</p>\n<p>牌型 牌值 = 牌力</p>\n<p>examples<br>0      5    1280<br>0    A     4096</p>\n<p>1    2    4608<br>1    A     69693</p>\n"},{"title":"自学习内容","date":"2021-10-12T04:00:00.000Z","_content":"\n需要学习的地方：\n老系统 网关服务与多个服务器之间的调度 gate center login game\n\n中心服务 拥有网关服务 登陆服务 游戏服务 连接 可以暂时理解为 中心化部署的分布式服务 可动态添加网关服务 以及各个网关主机服务所拥有的 登陆和游戏服务器\n\ngate 连接 中心服务\ndb 注册rpc\ncenter 中心服务 启动rpc服务 http服务 开启其他服务注册监听\nlogin 初始化nats 注册到center \n\n2021.10.12\n=======================================\n开始首局游戏的时候,预留客户端加载资源时间 6s\n\n引用外部包的时候时候可以更改别人包中代码，只要本地一直有修改过的版本即可，否则拉取的是外部包最新代码，没有自己修改过的版本内容。\n\nnats相关文档\n\nmysql 57与8.0版本差异\n速度 默认字符集格式\n\n什么算作代码整洁，代码整洁与性能优先考虑点 可阅读代码整洁之道 寻求答案\n\n为什么系统中同时存在nsq和nats的使用 (nats不支持持久化)\n\n\n有时间可以阅读的源码库：\ncache2go  临时内存缓冲使用\ngob\trpc数据传输封装\n\nGo源码 尽快找时间阅读\n\narchive\nbufio\nbulitin\nbytes\ncmd\ncompress\ncontainer\ncontext\ncrypto\ndatabase\ndebug\nencoding\nerrors\nexpvar\nflag\nfmt\ngo\nhash\nhtml\nimage\nindex\ninternal\nio\nlog\nmath\nmime\nnet\nos\npath\nplugin\nreflect\nregexp\nruntime\nsort\nstrconv\nstrings\nsync\nsyscall\ntestdata\ntesting\ntext\ntime\nunicode\nunsafe\nvendor\n\n2021.11.23\n=======================================\n\n数据结构：\n\n- 数组  https://en.wikipedia.org/wiki/Array_data_structure\n- 树 https://en.wikipedia.org/wiki/Tree_%28data_structure%29\n- 栈 https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29\n- 队列 https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29\n- 图 https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29\n- 哈希表 https://en.wikipedia.org/wiki/Hash_table\n- 链表 https://en.wikipedia.org/wiki/Linked_list\n- 堆 https://en.wikipedia.org/wiki/Heap_%28data_structure%29\n\n算法：\n\n1. \n\n\n\n面试题相关问题\n\n1、golang 中 make 和 new 的区别？（基本必问）\n\n​\tmake 用于slice map channel 类型的创建以及初始化，返回的是对应类型\n\n​\tnew 用于分配内存空间，返回对应类型的内存指针地址\n\n2、数组和切片的区别 （基本必问）\n\n​\t数组是固定长度的，值类型\n\n​\t切片是可变长度的，引用类型\n\n3、for range 的时候它的地址会发生变化么？\n\n​\t会，for range 的时候操作的是拷贝的数据\n\n​\tfor range 对map类型遍历时候，改变map中键值的话，会影响到输出结果，可能输出改变后的值，也可能不输出或少输出\n\n4、go defer，多个 defer 的顺序，defer 在什么时机会修改返回值？\n\n​\ta.多个defer会倒叙返回，相当于压栈 弹栈操作；\n\n\n\n### 坑1：defer在匿名返回值和命名返回值函数中的不同表现\n\n要搞清这个问题首先需要了解defer的执行逻辑，文档中说defer语句在方法返回“时”触发，也就是说return和defer是“同时”执行的。以匿名返回值方法举例，过程如下。\n\n- 将result赋值给返回值（可以理解成Go自动创建了一个返回值retValue，相当于执行retValue = result）\n- 然后检查是否有defer，如果有则执行\n- 返回刚才创建的返回值（retValue）\n\n在这种情况下，defer中的修改是对result执行的，而不是retValue，所以defer返回的依然是retValue。在命名返回值方法中，由于返回值在方法定义时已经被定义，所以没有创建retValue的过程，result就是retValue，defer对于result的修改也会被直接返回。\n\n### 坑2：在for循环中使用defer可能导致的性能问题\n\ndefer在紧邻创建资源的语句后生命力，看上去逻辑没有什么问题。但是和直接调用相比，defer的执行存在着额外的开销，例如defer会对其后需要的参数进行内存拷贝，还需要对defer结构进行压栈出栈操作。所以在循环中定义defer可能导致大量的资源开销，在本例中，可以将f.Close()语句前的defer去掉，来减少大量defer导致的额外资源消耗。\n\n### 坑3：判断执行没有err之后，再defer释放资源\n\n一些获取资源的操作可能会返回err参数，我们可以选择忽略返回的err参数，但是如果要使用defer进行延迟释放的的话，需要在使用defer之前先判断是否存在err，如果资源没有获取成功，即没有必要也不应该再对资源执行释放操作。如果不判断获取资源是否成功就执行释放操作的话，还有可能导致释放方法执行错误。\n\n### 坑4：调用os.Exit时defer不会被执行\n\n当发生panic时，所在goroutine的所有defer会被执行，但是当调用os.Exit()方法退出程序时，defer并不会被执行。\n\n5、 uint 类型溢出\n\n​\t数值类型溢出的时候，会重置为0\n\n6、介绍 rune 类型\n\n​\trune 相当于int32，特殊的字节类型  可以表示中文字符\n\n​\tuint8 表示一般字符\n\n2021.11.23\n=======================================\n\n设计模式：\n\n开闭原则：对拓展开放，对修改关闭。\n\n里氏换元原则：父类可调用的方法，子类也可调用。继承\n\nOOP 四大特性：封装、继承、多态、抽象\n\n创建型模式：创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。\n\n1. 工厂模式：对象的创建和使用分离。\n\n2. 抽象工厂模式：通过传递参数获取实体类的对象。意图提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n\n3. 单例模式：实例只创建一次，常存在，可直接调用\n\n4. 生成器模式（建造者模式）：多个简单的对象构建成一个复杂的对象。\n5. 原型模式：用于创建重复的对象，同时又能保证性能\n\n\n\n行为型模式：行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。\n\n1. 策略模式：*定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。*\n2. 观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub）。它是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响。\n3. 状态模式：对象不同状态之间的切换。\n\n2022.03.10\n=======================================\n\n数据结构：\n\n1. 数组：\n\n​\t\t查找时间复杂度 O(1)\n\n​\t\t修改时间复杂度O(n)\n\n2. 链表：\n\n​\t\t查找时间复杂度 O(n)\n\n​\t\t修改时间复杂度O(1)\n\n2022.06.07\n=======================================\n\n找时间整一个批量更新文件的脚本 便于更新测试服和正式服\n\n温习一下容器相关内容，虽然本地不能部署容器 但是有时间还是可以玩玩的。\n\n2022.06.10\n=======================================\n\nlinux备份策略：\n\n1. 完全备份；\n   - 每次都备份全部内容；\n2. 累计增量备份；\n   - 每次只备份相对比前一次备份增加的内容；\n3. 差异增量备份；\n   - 每次只备份相对比第一次备份增加的内容；\n\n2022.07.20\n=======================================\n\ngo语言高级编程：书籍阅读\n\n第一章：\n\n数组字符串和切片：\n\n1. 数组：\n\n数组的长度由下标值决定。\n\n```go\nvar a [3]int                    // 定义长度为3的int型数组, 元素全部为0\nvar b = [...]int{1, 2, 3}       // 定义长度为3的int型数组, 元素为 1, 2, 3\nvar c = [...]int{2: 3, 1: 2}    // 定义长度为3的int型数组, 元素为 0, 2, 3\nvar d = [...]int{1, 2, 4: 5, 6} // 定义长度为6的int型数组, 元素为 1, 2, 0, 0, 5, 6\n```\n\n```go\nfunc TestCode(t *testing.T) {\n\tm := [...]int{\n\t\t'a': 1,\n\t\t'b': 2,\n\t\t'c': 3,\n\t}\n\tm['a'] = 3\n\tfmt.Println(len(m))\n\n\t// 我们知晓 c 的 ASCII 码是 99，这道题相当于这样\n\t/* m := [...]int{\n\t\t97: 1,\n\t\t98: 2,\n\t\t99: 3,\n\t}\n\tm[97] = 3\n\tfmt.Println(len(m)) */\n}\n```\n\n2. 切片：\n\n使用append 时候尽量避免扩容\n\n由于`append`函数返回新的切片，也就是它支持链式操作。我们可以将多个`append`操作组合起来，实现在切片中间插入元素：\n\n```go\nvar a []int\na = append(a[:i], append([]int{x}, a[i:]...)...)     // 在第i个位置插入x\na = append(a[:i], append([]int{1,2,3}, a[i:]...)...) // 在第i个位置插入切片\n```\n\n对切面元素进行操作的时候可以使用`copy`和`append`组合\n\n可以用`copy`和`append`组合可以避免创建中间的临时切片，同样是完成添加元素的操作\n\n```go\na = append(a, 0)     // 切片扩展1个空间\ncopy(a[i+1:], a[i:]) // a[i:]向后移动1个位置\na[i] = x             // 设置新添加的元素\n```\n\n3. 避免切片内存泄漏\n\n如前面所说，切片操作并不会复制底层的数据。底层的数组会被保存在内存中，直到它不再被引用。但是有时候可能会因为一个小的内存引用而导致底层整个数组处于被使用的状态，这会延迟自动内存回收器对底层数组的回收。\n\n例如，`FindPhoneNumber`函数加载整个文件到内存，然后搜索第一个出现的电话号码，最后结果以切片方式返回。\n\n```go\nfunc FindPhoneNumber(filename string) []byte {\n    b, _ := ioutil.ReadFile(filename)\n    return regexp.MustCompile(\"[0-9]+\").Find(b)\n}\n```\n\n这段代码返回的`[]byte`指向保存整个文件的数组。因为切片引用了整个原始数组，导致自动垃圾回收器不能及时释放底层数组的空间。一个小的需求可能导致需要长时间保存整个文件数据。这虽然这并不是传统意义上的内存泄漏，但是可能会拖慢系统的整体性能。\n\n要修复这个问题，可以将感兴趣的数据复制到一个新的切片中（数据的传值是Go语言编程的一个哲学，虽然传值有一定的代价，但是换取的好处是切断了对原始数据的依赖）：\n\n```go\nfunc FindPhoneNumber(filename string) []byte {\n    b, _ := ioutil.ReadFile(filename)\n    b = regexp.MustCompile(\"[0-9]+\").Find(b)\n    return append([]byte{}, b...)\n}\n```\n\n类似的问题，在删除切片元素时可能会遇到。假设切片里存放的是指针对象，那么下面删除末尾的元素后，被删除的元素依然被切片底层数组引用，从而导致不能及时被自动垃圾回收器回收（这要依赖回收器的实现方式）：\n\n```go\nvar a []*int{ ... }\na = a[:len(a)-1]    // 被删除的最后一个元素依然被引用, 可能导致GC操作被阻碍\n```\n\n保险的方式是先将需要自动内存回收的元素设置为`nil`，保证自动回收器可以发现需要回收的对象，然后再进行切片的删除操作：\n\n```go\nvar a []*int{ ... }\na[len(a)-1] = nil // GC回收最后一个元素内存\na = a[:len(a)-1]  // 从切片删除最后一个元素\n```\n\n当然，如果切片存在的周期很短的话，可以不用刻意处理这个问题。因为如果切片本身已经可以被GC回收的话，切片对应的每个元素自然也就是可以被回收的了。","source":"_posts/自学习内容.md","raw":"---\ntitle: 自学习内容\ndate: 2021-10-12 12:00:00\ntags:\n- Go\n- 数据结构\n- 设计模式\n- 框架\n- 更新策略\ncategories:\n- 学习【资料整理记录】\n---\n\n需要学习的地方：\n老系统 网关服务与多个服务器之间的调度 gate center login game\n\n中心服务 拥有网关服务 登陆服务 游戏服务 连接 可以暂时理解为 中心化部署的分布式服务 可动态添加网关服务 以及各个网关主机服务所拥有的 登陆和游戏服务器\n\ngate 连接 中心服务\ndb 注册rpc\ncenter 中心服务 启动rpc服务 http服务 开启其他服务注册监听\nlogin 初始化nats 注册到center \n\n2021.10.12\n=======================================\n开始首局游戏的时候,预留客户端加载资源时间 6s\n\n引用外部包的时候时候可以更改别人包中代码，只要本地一直有修改过的版本即可，否则拉取的是外部包最新代码，没有自己修改过的版本内容。\n\nnats相关文档\n\nmysql 57与8.0版本差异\n速度 默认字符集格式\n\n什么算作代码整洁，代码整洁与性能优先考虑点 可阅读代码整洁之道 寻求答案\n\n为什么系统中同时存在nsq和nats的使用 (nats不支持持久化)\n\n\n有时间可以阅读的源码库：\ncache2go  临时内存缓冲使用\ngob\trpc数据传输封装\n\nGo源码 尽快找时间阅读\n\narchive\nbufio\nbulitin\nbytes\ncmd\ncompress\ncontainer\ncontext\ncrypto\ndatabase\ndebug\nencoding\nerrors\nexpvar\nflag\nfmt\ngo\nhash\nhtml\nimage\nindex\ninternal\nio\nlog\nmath\nmime\nnet\nos\npath\nplugin\nreflect\nregexp\nruntime\nsort\nstrconv\nstrings\nsync\nsyscall\ntestdata\ntesting\ntext\ntime\nunicode\nunsafe\nvendor\n\n2021.11.23\n=======================================\n\n数据结构：\n\n- 数组  https://en.wikipedia.org/wiki/Array_data_structure\n- 树 https://en.wikipedia.org/wiki/Tree_%28data_structure%29\n- 栈 https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29\n- 队列 https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29\n- 图 https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29\n- 哈希表 https://en.wikipedia.org/wiki/Hash_table\n- 链表 https://en.wikipedia.org/wiki/Linked_list\n- 堆 https://en.wikipedia.org/wiki/Heap_%28data_structure%29\n\n算法：\n\n1. \n\n\n\n面试题相关问题\n\n1、golang 中 make 和 new 的区别？（基本必问）\n\n​\tmake 用于slice map channel 类型的创建以及初始化，返回的是对应类型\n\n​\tnew 用于分配内存空间，返回对应类型的内存指针地址\n\n2、数组和切片的区别 （基本必问）\n\n​\t数组是固定长度的，值类型\n\n​\t切片是可变长度的，引用类型\n\n3、for range 的时候它的地址会发生变化么？\n\n​\t会，for range 的时候操作的是拷贝的数据\n\n​\tfor range 对map类型遍历时候，改变map中键值的话，会影响到输出结果，可能输出改变后的值，也可能不输出或少输出\n\n4、go defer，多个 defer 的顺序，defer 在什么时机会修改返回值？\n\n​\ta.多个defer会倒叙返回，相当于压栈 弹栈操作；\n\n\n\n### 坑1：defer在匿名返回值和命名返回值函数中的不同表现\n\n要搞清这个问题首先需要了解defer的执行逻辑，文档中说defer语句在方法返回“时”触发，也就是说return和defer是“同时”执行的。以匿名返回值方法举例，过程如下。\n\n- 将result赋值给返回值（可以理解成Go自动创建了一个返回值retValue，相当于执行retValue = result）\n- 然后检查是否有defer，如果有则执行\n- 返回刚才创建的返回值（retValue）\n\n在这种情况下，defer中的修改是对result执行的，而不是retValue，所以defer返回的依然是retValue。在命名返回值方法中，由于返回值在方法定义时已经被定义，所以没有创建retValue的过程，result就是retValue，defer对于result的修改也会被直接返回。\n\n### 坑2：在for循环中使用defer可能导致的性能问题\n\ndefer在紧邻创建资源的语句后生命力，看上去逻辑没有什么问题。但是和直接调用相比，defer的执行存在着额外的开销，例如defer会对其后需要的参数进行内存拷贝，还需要对defer结构进行压栈出栈操作。所以在循环中定义defer可能导致大量的资源开销，在本例中，可以将f.Close()语句前的defer去掉，来减少大量defer导致的额外资源消耗。\n\n### 坑3：判断执行没有err之后，再defer释放资源\n\n一些获取资源的操作可能会返回err参数，我们可以选择忽略返回的err参数，但是如果要使用defer进行延迟释放的的话，需要在使用defer之前先判断是否存在err，如果资源没有获取成功，即没有必要也不应该再对资源执行释放操作。如果不判断获取资源是否成功就执行释放操作的话，还有可能导致释放方法执行错误。\n\n### 坑4：调用os.Exit时defer不会被执行\n\n当发生panic时，所在goroutine的所有defer会被执行，但是当调用os.Exit()方法退出程序时，defer并不会被执行。\n\n5、 uint 类型溢出\n\n​\t数值类型溢出的时候，会重置为0\n\n6、介绍 rune 类型\n\n​\trune 相当于int32，特殊的字节类型  可以表示中文字符\n\n​\tuint8 表示一般字符\n\n2021.11.23\n=======================================\n\n设计模式：\n\n开闭原则：对拓展开放，对修改关闭。\n\n里氏换元原则：父类可调用的方法，子类也可调用。继承\n\nOOP 四大特性：封装、继承、多态、抽象\n\n创建型模式：创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。\n\n1. 工厂模式：对象的创建和使用分离。\n\n2. 抽象工厂模式：通过传递参数获取实体类的对象。意图提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n\n3. 单例模式：实例只创建一次，常存在，可直接调用\n\n4. 生成器模式（建造者模式）：多个简单的对象构建成一个复杂的对象。\n5. 原型模式：用于创建重复的对象，同时又能保证性能\n\n\n\n行为型模式：行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。\n\n1. 策略模式：*定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。*\n2. 观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub）。它是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响。\n3. 状态模式：对象不同状态之间的切换。\n\n2022.03.10\n=======================================\n\n数据结构：\n\n1. 数组：\n\n​\t\t查找时间复杂度 O(1)\n\n​\t\t修改时间复杂度O(n)\n\n2. 链表：\n\n​\t\t查找时间复杂度 O(n)\n\n​\t\t修改时间复杂度O(1)\n\n2022.06.07\n=======================================\n\n找时间整一个批量更新文件的脚本 便于更新测试服和正式服\n\n温习一下容器相关内容，虽然本地不能部署容器 但是有时间还是可以玩玩的。\n\n2022.06.10\n=======================================\n\nlinux备份策略：\n\n1. 完全备份；\n   - 每次都备份全部内容；\n2. 累计增量备份；\n   - 每次只备份相对比前一次备份增加的内容；\n3. 差异增量备份；\n   - 每次只备份相对比第一次备份增加的内容；\n\n2022.07.20\n=======================================\n\ngo语言高级编程：书籍阅读\n\n第一章：\n\n数组字符串和切片：\n\n1. 数组：\n\n数组的长度由下标值决定。\n\n```go\nvar a [3]int                    // 定义长度为3的int型数组, 元素全部为0\nvar b = [...]int{1, 2, 3}       // 定义长度为3的int型数组, 元素为 1, 2, 3\nvar c = [...]int{2: 3, 1: 2}    // 定义长度为3的int型数组, 元素为 0, 2, 3\nvar d = [...]int{1, 2, 4: 5, 6} // 定义长度为6的int型数组, 元素为 1, 2, 0, 0, 5, 6\n```\n\n```go\nfunc TestCode(t *testing.T) {\n\tm := [...]int{\n\t\t'a': 1,\n\t\t'b': 2,\n\t\t'c': 3,\n\t}\n\tm['a'] = 3\n\tfmt.Println(len(m))\n\n\t// 我们知晓 c 的 ASCII 码是 99，这道题相当于这样\n\t/* m := [...]int{\n\t\t97: 1,\n\t\t98: 2,\n\t\t99: 3,\n\t}\n\tm[97] = 3\n\tfmt.Println(len(m)) */\n}\n```\n\n2. 切片：\n\n使用append 时候尽量避免扩容\n\n由于`append`函数返回新的切片，也就是它支持链式操作。我们可以将多个`append`操作组合起来，实现在切片中间插入元素：\n\n```go\nvar a []int\na = append(a[:i], append([]int{x}, a[i:]...)...)     // 在第i个位置插入x\na = append(a[:i], append([]int{1,2,3}, a[i:]...)...) // 在第i个位置插入切片\n```\n\n对切面元素进行操作的时候可以使用`copy`和`append`组合\n\n可以用`copy`和`append`组合可以避免创建中间的临时切片，同样是完成添加元素的操作\n\n```go\na = append(a, 0)     // 切片扩展1个空间\ncopy(a[i+1:], a[i:]) // a[i:]向后移动1个位置\na[i] = x             // 设置新添加的元素\n```\n\n3. 避免切片内存泄漏\n\n如前面所说，切片操作并不会复制底层的数据。底层的数组会被保存在内存中，直到它不再被引用。但是有时候可能会因为一个小的内存引用而导致底层整个数组处于被使用的状态，这会延迟自动内存回收器对底层数组的回收。\n\n例如，`FindPhoneNumber`函数加载整个文件到内存，然后搜索第一个出现的电话号码，最后结果以切片方式返回。\n\n```go\nfunc FindPhoneNumber(filename string) []byte {\n    b, _ := ioutil.ReadFile(filename)\n    return regexp.MustCompile(\"[0-9]+\").Find(b)\n}\n```\n\n这段代码返回的`[]byte`指向保存整个文件的数组。因为切片引用了整个原始数组，导致自动垃圾回收器不能及时释放底层数组的空间。一个小的需求可能导致需要长时间保存整个文件数据。这虽然这并不是传统意义上的内存泄漏，但是可能会拖慢系统的整体性能。\n\n要修复这个问题，可以将感兴趣的数据复制到一个新的切片中（数据的传值是Go语言编程的一个哲学，虽然传值有一定的代价，但是换取的好处是切断了对原始数据的依赖）：\n\n```go\nfunc FindPhoneNumber(filename string) []byte {\n    b, _ := ioutil.ReadFile(filename)\n    b = regexp.MustCompile(\"[0-9]+\").Find(b)\n    return append([]byte{}, b...)\n}\n```\n\n类似的问题，在删除切片元素时可能会遇到。假设切片里存放的是指针对象，那么下面删除末尾的元素后，被删除的元素依然被切片底层数组引用，从而导致不能及时被自动垃圾回收器回收（这要依赖回收器的实现方式）：\n\n```go\nvar a []*int{ ... }\na = a[:len(a)-1]    // 被删除的最后一个元素依然被引用, 可能导致GC操作被阻碍\n```\n\n保险的方式是先将需要自动内存回收的元素设置为`nil`，保证自动回收器可以发现需要回收的对象，然后再进行切片的删除操作：\n\n```go\nvar a []*int{ ... }\na[len(a)-1] = nil // GC回收最后一个元素内存\na = a[:len(a)-1]  // 从切片删除最后一个元素\n```\n\n当然，如果切片存在的周期很短的话，可以不用刻意处理这个问题。因为如果切片本身已经可以被GC回收的话，切片对应的每个元素自然也就是可以被回收的了。","slug":"自学习内容","published":1,"updated":"2022-09-13T07:44:54.000Z","_id":"cl7zwp10s001csspv08yldaof","comments":1,"layout":"post","photos":[],"link":"","content":"<p>需要学习的地方：<br>老系统 网关服务与多个服务器之间的调度 gate center login game</p>\n<p>中心服务 拥有网关服务 登陆服务 游戏服务 连接 可以暂时理解为 中心化部署的分布式服务 可动态添加网关服务 以及各个网关主机服务所拥有的 登陆和游戏服务器</p>\n<p>gate 连接 中心服务<br>db 注册rpc<br>center 中心服务 启动rpc服务 http服务 开启其他服务注册监听<br>login 初始化nats 注册到center </p>\n<h1 id=\"2021-10-12\"><a href=\"#2021-10-12\" class=\"headerlink\" title=\"2021.10.12\"></a>2021.10.12</h1><p>开始首局游戏的时候,预留客户端加载资源时间 6s</p>\n<p>引用外部包的时候时候可以更改别人包中代码，只要本地一直有修改过的版本即可，否则拉取的是外部包最新代码，没有自己修改过的版本内容。</p>\n<p>nats相关文档</p>\n<p>mysql 57与8.0版本差异<br>速度 默认字符集格式</p>\n<p>什么算作代码整洁，代码整洁与性能优先考虑点 可阅读代码整洁之道 寻求答案</p>\n<p>为什么系统中同时存在nsq和nats的使用 (nats不支持持久化)</p>\n<p>有时间可以阅读的源码库：<br>cache2go  临时内存缓冲使用<br>gob    rpc数据传输封装</p>\n<p>Go源码 尽快找时间阅读</p>\n<p>archive<br>bufio<br>bulitin<br>bytes<br>cmd<br>compress<br>container<br>context<br>crypto<br>database<br>debug<br>encoding<br>errors<br>expvar<br>flag<br>fmt<br>go<br>hash<br>html<br>image<br>index<br>internal<br>io<br>log<br>math<br>mime<br>net<br>os<br>path<br>plugin<br>reflect<br>regexp<br>runtime<br>sort<br>strconv<br>strings<br>sync<br>syscall<br>testdata<br>testing<br>text<br>time<br>unicode<br>unsafe<br>vendor</p>\n<h1 id=\"2021-11-23\"><a href=\"#2021-11-23\" class=\"headerlink\" title=\"2021.11.23\"></a>2021.11.23</h1><p>数据结构：</p>\n<ul>\n<li>数组  <a href=\"https://en.wikipedia.org/wiki/Array_data_structure\">https://en.wikipedia.org/wiki/Array_data_structure</a></li>\n<li>树 <a href=\"https://en.wikipedia.org/wiki/Tree_%28data_structure%29\">https://en.wikipedia.org/wiki/Tree_%28data_structure%29</a></li>\n<li>栈 <a href=\"https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29\">https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29</a></li>\n<li>队列 <a href=\"https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29\">https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29</a></li>\n<li>图 <a href=\"https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29\">https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29</a></li>\n<li>哈希表 <a href=\"https://en.wikipedia.org/wiki/Hash_table\">https://en.wikipedia.org/wiki/Hash_table</a></li>\n<li>链表 <a href=\"https://en.wikipedia.org/wiki/Linked_list\">https://en.wikipedia.org/wiki/Linked_list</a></li>\n<li>堆 <a href=\"https://en.wikipedia.org/wiki/Heap_%28data_structure%29\">https://en.wikipedia.org/wiki/Heap_%28data_structure%29</a></li>\n</ul>\n<p>算法：</p>\n<ol>\n<li></li>\n</ol>\n<p>面试题相关问题</p>\n<p>1、golang 中 make 和 new 的区别？（基本必问）</p>\n<p>​    make 用于slice map channel 类型的创建以及初始化，返回的是对应类型</p>\n<p>​    new 用于分配内存空间，返回对应类型的内存指针地址</p>\n<p>2、数组和切片的区别 （基本必问）</p>\n<p>​    数组是固定长度的，值类型</p>\n<p>​    切片是可变长度的，引用类型</p>\n<p>3、for range 的时候它的地址会发生变化么？</p>\n<p>​    会，for range 的时候操作的是拷贝的数据</p>\n<p>​    for range 对map类型遍历时候，改变map中键值的话，会影响到输出结果，可能输出改变后的值，也可能不输出或少输出</p>\n<p>4、go defer，多个 defer 的顺序，defer 在什么时机会修改返回值？</p>\n<p>​    a.多个defer会倒叙返回，相当于压栈 弹栈操作；</p>\n<h3 id=\"坑1：defer在匿名返回值和命名返回值函数中的不同表现\"><a href=\"#坑1：defer在匿名返回值和命名返回值函数中的不同表现\" class=\"headerlink\" title=\"坑1：defer在匿名返回值和命名返回值函数中的不同表现\"></a>坑1：defer在匿名返回值和命名返回值函数中的不同表现</h3><p>要搞清这个问题首先需要了解defer的执行逻辑，文档中说defer语句在方法返回“时”触发，也就是说return和defer是“同时”执行的。以匿名返回值方法举例，过程如下。</p>\n<ul>\n<li>将result赋值给返回值（可以理解成Go自动创建了一个返回值retValue，相当于执行retValue = result）</li>\n<li>然后检查是否有defer，如果有则执行</li>\n<li>返回刚才创建的返回值（retValue）</li>\n</ul>\n<p>在这种情况下，defer中的修改是对result执行的，而不是retValue，所以defer返回的依然是retValue。在命名返回值方法中，由于返回值在方法定义时已经被定义，所以没有创建retValue的过程，result就是retValue，defer对于result的修改也会被直接返回。</p>\n<h3 id=\"坑2：在for循环中使用defer可能导致的性能问题\"><a href=\"#坑2：在for循环中使用defer可能导致的性能问题\" class=\"headerlink\" title=\"坑2：在for循环中使用defer可能导致的性能问题\"></a>坑2：在for循环中使用defer可能导致的性能问题</h3><p>defer在紧邻创建资源的语句后生命力，看上去逻辑没有什么问题。但是和直接调用相比，defer的执行存在着额外的开销，例如defer会对其后需要的参数进行内存拷贝，还需要对defer结构进行压栈出栈操作。所以在循环中定义defer可能导致大量的资源开销，在本例中，可以将f.Close()语句前的defer去掉，来减少大量defer导致的额外资源消耗。</p>\n<h3 id=\"坑3：判断执行没有err之后，再defer释放资源\"><a href=\"#坑3：判断执行没有err之后，再defer释放资源\" class=\"headerlink\" title=\"坑3：判断执行没有err之后，再defer释放资源\"></a>坑3：判断执行没有err之后，再defer释放资源</h3><p>一些获取资源的操作可能会返回err参数，我们可以选择忽略返回的err参数，但是如果要使用defer进行延迟释放的的话，需要在使用defer之前先判断是否存在err，如果资源没有获取成功，即没有必要也不应该再对资源执行释放操作。如果不判断获取资源是否成功就执行释放操作的话，还有可能导致释放方法执行错误。</p>\n<h3 id=\"坑4：调用os-Exit时defer不会被执行\"><a href=\"#坑4：调用os-Exit时defer不会被执行\" class=\"headerlink\" title=\"坑4：调用os.Exit时defer不会被执行\"></a>坑4：调用os.Exit时defer不会被执行</h3><p>当发生panic时，所在goroutine的所有defer会被执行，但是当调用os.Exit()方法退出程序时，defer并不会被执行。</p>\n<p>5、 uint 类型溢出</p>\n<p>​    数值类型溢出的时候，会重置为0</p>\n<p>6、介绍 rune 类型</p>\n<p>​    rune 相当于int32，特殊的字节类型  可以表示中文字符</p>\n<p>​    uint8 表示一般字符</p>\n<h1 id=\"2021-11-23-1\"><a href=\"#2021-11-23-1\" class=\"headerlink\" title=\"2021.11.23\"></a>2021.11.23</h1><p>设计模式：</p>\n<p>开闭原则：对拓展开放，对修改关闭。</p>\n<p>里氏换元原则：父类可调用的方法，子类也可调用。继承</p>\n<p>OOP 四大特性：封装、继承、多态、抽象</p>\n<p>创建型模式：创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。</p>\n<ol>\n<li><p>工厂模式：对象的创建和使用分离。</p>\n</li>\n<li><p>抽象工厂模式：通过传递参数获取实体类的对象。意图提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n</li>\n<li><p>单例模式：实例只创建一次，常存在，可直接调用</p>\n</li>\n<li><p>生成器模式（建造者模式）：多个简单的对象构建成一个复杂的对象。</p>\n</li>\n<li><p>原型模式：用于创建重复的对象，同时又能保证性能</p>\n</li>\n</ol>\n<p>行为型模式：行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。</p>\n<ol>\n<li>策略模式：<em>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</em></li>\n<li>观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub）。它是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响。</li>\n<li>状态模式：对象不同状态之间的切换。</li>\n</ol>\n<h1 id=\"2022-03-10\"><a href=\"#2022-03-10\" class=\"headerlink\" title=\"2022.03.10\"></a>2022.03.10</h1><p>数据结构：</p>\n<ol>\n<li>数组：</li>\n</ol>\n<p>​        查找时间复杂度 O(1)</p>\n<p>​        修改时间复杂度O(n)</p>\n<ol start=\"2\">\n<li>链表：</li>\n</ol>\n<p>​        查找时间复杂度 O(n)</p>\n<p>​        修改时间复杂度O(1)</p>\n<h1 id=\"2022-06-07\"><a href=\"#2022-06-07\" class=\"headerlink\" title=\"2022.06.07\"></a>2022.06.07</h1><p>找时间整一个批量更新文件的脚本 便于更新测试服和正式服</p>\n<p>温习一下容器相关内容，虽然本地不能部署容器 但是有时间还是可以玩玩的。</p>\n<h1 id=\"2022-06-10\"><a href=\"#2022-06-10\" class=\"headerlink\" title=\"2022.06.10\"></a>2022.06.10</h1><p>linux备份策略：</p>\n<ol>\n<li>完全备份；<ul>\n<li>每次都备份全部内容；</li>\n</ul>\n</li>\n<li>累计增量备份；<ul>\n<li>每次只备份相对比前一次备份增加的内容；</li>\n</ul>\n</li>\n<li>差异增量备份；<ul>\n<li>每次只备份相对比第一次备份增加的内容；</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2022-07-20\"><a href=\"#2022-07-20\" class=\"headerlink\" title=\"2022.07.20\"></a>2022.07.20</h1><p>go语言高级编程：书籍阅读</p>\n<p>第一章：</p>\n<p>数组字符串和切片：</p>\n<ol>\n<li>数组：</li>\n</ol>\n<p>数组的长度由下标值决定。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> a [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">int</span>                    <span class=\"hljs-comment\">// 定义长度为3的int型数组, 元素全部为0</span><br><span class=\"hljs-keyword\">var</span> b = [...]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;       <span class=\"hljs-comment\">// 定义长度为3的int型数组, 元素为 1, 2, 3</span><br><span class=\"hljs-keyword\">var</span> c = [...]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">2</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">2</span>&#125;    <span class=\"hljs-comment\">// 定义长度为3的int型数组, 元素为 0, 2, 3</span><br><span class=\"hljs-keyword\">var</span> d = [...]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>&#125; <span class=\"hljs-comment\">// 定义长度为6的int型数组, 元素为 1, 2, 0, 0, 5, 6</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestCode</span><span class=\"hljs-params\">(t *testing.T)</span></span> &#123;<br>\tm := [...]<span class=\"hljs-type\">int</span>&#123;<br>\t\t<span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-number\">1</span>,<br>\t\t<span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-number\">2</span>,<br>\t\t<span class=\"hljs-string\">&#x27;c&#x27;</span>: <span class=\"hljs-number\">3</span>,<br>\t&#125;<br>\tm[<span class=\"hljs-string\">&#x27;a&#x27;</span>] = <span class=\"hljs-number\">3</span><br>\tfmt.Println(<span class=\"hljs-built_in\">len</span>(m))<br><br>\t<span class=\"hljs-comment\">// 我们知晓 c 的 ASCII 码是 99，这道题相当于这样</span><br>\t<span class=\"hljs-comment\">/* m := [...]int&#123;</span><br><span class=\"hljs-comment\">\t\t97: 1,</span><br><span class=\"hljs-comment\">\t\t98: 2,</span><br><span class=\"hljs-comment\">\t\t99: 3,</span><br><span class=\"hljs-comment\">\t&#125;</span><br><span class=\"hljs-comment\">\tm[97] = 3</span><br><span class=\"hljs-comment\">\tfmt.Println(len(m)) */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>切片：</li>\n</ol>\n<p>使用append 时候尽量避免扩容</p>\n<p>由于<code>append</code>函数返回新的切片，也就是它支持链式操作。我们可以将多个<code>append</code>操作组合起来，实现在切片中间插入元素：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> a []<span class=\"hljs-type\">int</span><br>a = <span class=\"hljs-built_in\">append</span>(a[:i], <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;x&#125;, a[i:]...)...)     <span class=\"hljs-comment\">// 在第i个位置插入x</span><br>a = <span class=\"hljs-built_in\">append</span>(a[:i], <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;, a[i:]...)...) <span class=\"hljs-comment\">// 在第i个位置插入切片</span><br></code></pre></td></tr></table></figure>\n\n<p>对切面元素进行操作的时候可以使用<code>copy</code>和<code>append</code>组合</p>\n<p>可以用<code>copy</code>和<code>append</code>组合可以避免创建中间的临时切片，同样是完成添加元素的操作</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">a = <span class=\"hljs-built_in\">append</span>(a, <span class=\"hljs-number\">0</span>)     <span class=\"hljs-comment\">// 切片扩展1个空间</span><br><span class=\"hljs-built_in\">copy</span>(a[i+<span class=\"hljs-number\">1</span>:], a[i:]) <span class=\"hljs-comment\">// a[i:]向后移动1个位置</span><br>a[i] = x             <span class=\"hljs-comment\">// 设置新添加的元素</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>避免切片内存泄漏</li>\n</ol>\n<p>如前面所说，切片操作并不会复制底层的数据。底层的数组会被保存在内存中，直到它不再被引用。但是有时候可能会因为一个小的内存引用而导致底层整个数组处于被使用的状态，这会延迟自动内存回收器对底层数组的回收。</p>\n<p>例如，<code>FindPhoneNumber</code>函数加载整个文件到内存，然后搜索第一个出现的电话号码，最后结果以切片方式返回。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FindPhoneNumber</span><span class=\"hljs-params\">(filename <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">byte</span> &#123;<br>    b, _ := ioutil.ReadFile(filename)<br>    <span class=\"hljs-keyword\">return</span> regexp.MustCompile(<span class=\"hljs-string\">&quot;[0-9]+&quot;</span>).Find(b)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这段代码返回的<code>[]byte</code>指向保存整个文件的数组。因为切片引用了整个原始数组，导致自动垃圾回收器不能及时释放底层数组的空间。一个小的需求可能导致需要长时间保存整个文件数据。这虽然这并不是传统意义上的内存泄漏，但是可能会拖慢系统的整体性能。</p>\n<p>要修复这个问题，可以将感兴趣的数据复制到一个新的切片中（数据的传值是Go语言编程的一个哲学，虽然传值有一定的代价，但是换取的好处是切断了对原始数据的依赖）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FindPhoneNumber</span><span class=\"hljs-params\">(filename <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">byte</span> &#123;<br>    b, _ := ioutil.ReadFile(filename)<br>    b = regexp.MustCompile(<span class=\"hljs-string\">&quot;[0-9]+&quot;</span>).Find(b)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">byte</span>&#123;&#125;, b...)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>类似的问题，在删除切片元素时可能会遇到。假设切片里存放的是指针对象，那么下面删除末尾的元素后，被删除的元素依然被切片底层数组引用，从而导致不能及时被自动垃圾回收器回收（这要依赖回收器的实现方式）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> a []*<span class=\"hljs-type\">int</span>&#123; ... &#125;<br>a = a[:<span class=\"hljs-built_in\">len</span>(a)<span class=\"hljs-number\">-1</span>]    <span class=\"hljs-comment\">// 被删除的最后一个元素依然被引用, 可能导致GC操作被阻碍</span><br></code></pre></td></tr></table></figure>\n\n<p>保险的方式是先将需要自动内存回收的元素设置为<code>nil</code>，保证自动回收器可以发现需要回收的对象，然后再进行切片的删除操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> a []*<span class=\"hljs-type\">int</span>&#123; ... &#125;<br>a[<span class=\"hljs-built_in\">len</span>(a)<span class=\"hljs-number\">-1</span>] = <span class=\"hljs-literal\">nil</span> <span class=\"hljs-comment\">// GC回收最后一个元素内存</span><br>a = a[:<span class=\"hljs-built_in\">len</span>(a)<span class=\"hljs-number\">-1</span>]  <span class=\"hljs-comment\">// 从切片删除最后一个元素</span><br></code></pre></td></tr></table></figure>\n\n<p>当然，如果切片存在的周期很短的话，可以不用刻意处理这个问题。因为如果切片本身已经可以被GC回收的话，切片对应的每个元素自然也就是可以被回收的了。</p>\n","site":{"data":{}},"wordcount":5055,"excerpt":"","more":"<p>需要学习的地方：<br>老系统 网关服务与多个服务器之间的调度 gate center login game</p>\n<p>中心服务 拥有网关服务 登陆服务 游戏服务 连接 可以暂时理解为 中心化部署的分布式服务 可动态添加网关服务 以及各个网关主机服务所拥有的 登陆和游戏服务器</p>\n<p>gate 连接 中心服务<br>db 注册rpc<br>center 中心服务 启动rpc服务 http服务 开启其他服务注册监听<br>login 初始化nats 注册到center </p>\n<h1 id=\"2021-10-12\"><a href=\"#2021-10-12\" class=\"headerlink\" title=\"2021.10.12\"></a>2021.10.12</h1><p>开始首局游戏的时候,预留客户端加载资源时间 6s</p>\n<p>引用外部包的时候时候可以更改别人包中代码，只要本地一直有修改过的版本即可，否则拉取的是外部包最新代码，没有自己修改过的版本内容。</p>\n<p>nats相关文档</p>\n<p>mysql 57与8.0版本差异<br>速度 默认字符集格式</p>\n<p>什么算作代码整洁，代码整洁与性能优先考虑点 可阅读代码整洁之道 寻求答案</p>\n<p>为什么系统中同时存在nsq和nats的使用 (nats不支持持久化)</p>\n<p>有时间可以阅读的源码库：<br>cache2go  临时内存缓冲使用<br>gob    rpc数据传输封装</p>\n<p>Go源码 尽快找时间阅读</p>\n<p>archive<br>bufio<br>bulitin<br>bytes<br>cmd<br>compress<br>container<br>context<br>crypto<br>database<br>debug<br>encoding<br>errors<br>expvar<br>flag<br>fmt<br>go<br>hash<br>html<br>image<br>index<br>internal<br>io<br>log<br>math<br>mime<br>net<br>os<br>path<br>plugin<br>reflect<br>regexp<br>runtime<br>sort<br>strconv<br>strings<br>sync<br>syscall<br>testdata<br>testing<br>text<br>time<br>unicode<br>unsafe<br>vendor</p>\n<h1 id=\"2021-11-23\"><a href=\"#2021-11-23\" class=\"headerlink\" title=\"2021.11.23\"></a>2021.11.23</h1><p>数据结构：</p>\n<ul>\n<li>数组  <a href=\"https://en.wikipedia.org/wiki/Array_data_structure\">https://en.wikipedia.org/wiki/Array_data_structure</a></li>\n<li>树 <a href=\"https://en.wikipedia.org/wiki/Tree_%28data_structure%29\">https://en.wikipedia.org/wiki/Tree_%28data_structure%29</a></li>\n<li>栈 <a href=\"https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29\">https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29</a></li>\n<li>队列 <a href=\"https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29\">https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29</a></li>\n<li>图 <a href=\"https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29\">https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29</a></li>\n<li>哈希表 <a href=\"https://en.wikipedia.org/wiki/Hash_table\">https://en.wikipedia.org/wiki/Hash_table</a></li>\n<li>链表 <a href=\"https://en.wikipedia.org/wiki/Linked_list\">https://en.wikipedia.org/wiki/Linked_list</a></li>\n<li>堆 <a href=\"https://en.wikipedia.org/wiki/Heap_%28data_structure%29\">https://en.wikipedia.org/wiki/Heap_%28data_structure%29</a></li>\n</ul>\n<p>算法：</p>\n<ol>\n<li></li>\n</ol>\n<p>面试题相关问题</p>\n<p>1、golang 中 make 和 new 的区别？（基本必问）</p>\n<p>​    make 用于slice map channel 类型的创建以及初始化，返回的是对应类型</p>\n<p>​    new 用于分配内存空间，返回对应类型的内存指针地址</p>\n<p>2、数组和切片的区别 （基本必问）</p>\n<p>​    数组是固定长度的，值类型</p>\n<p>​    切片是可变长度的，引用类型</p>\n<p>3、for range 的时候它的地址会发生变化么？</p>\n<p>​    会，for range 的时候操作的是拷贝的数据</p>\n<p>​    for range 对map类型遍历时候，改变map中键值的话，会影响到输出结果，可能输出改变后的值，也可能不输出或少输出</p>\n<p>4、go defer，多个 defer 的顺序，defer 在什么时机会修改返回值？</p>\n<p>​    a.多个defer会倒叙返回，相当于压栈 弹栈操作；</p>\n<h3 id=\"坑1：defer在匿名返回值和命名返回值函数中的不同表现\"><a href=\"#坑1：defer在匿名返回值和命名返回值函数中的不同表现\" class=\"headerlink\" title=\"坑1：defer在匿名返回值和命名返回值函数中的不同表现\"></a>坑1：defer在匿名返回值和命名返回值函数中的不同表现</h3><p>要搞清这个问题首先需要了解defer的执行逻辑，文档中说defer语句在方法返回“时”触发，也就是说return和defer是“同时”执行的。以匿名返回值方法举例，过程如下。</p>\n<ul>\n<li>将result赋值给返回值（可以理解成Go自动创建了一个返回值retValue，相当于执行retValue = result）</li>\n<li>然后检查是否有defer，如果有则执行</li>\n<li>返回刚才创建的返回值（retValue）</li>\n</ul>\n<p>在这种情况下，defer中的修改是对result执行的，而不是retValue，所以defer返回的依然是retValue。在命名返回值方法中，由于返回值在方法定义时已经被定义，所以没有创建retValue的过程，result就是retValue，defer对于result的修改也会被直接返回。</p>\n<h3 id=\"坑2：在for循环中使用defer可能导致的性能问题\"><a href=\"#坑2：在for循环中使用defer可能导致的性能问题\" class=\"headerlink\" title=\"坑2：在for循环中使用defer可能导致的性能问题\"></a>坑2：在for循环中使用defer可能导致的性能问题</h3><p>defer在紧邻创建资源的语句后生命力，看上去逻辑没有什么问题。但是和直接调用相比，defer的执行存在着额外的开销，例如defer会对其后需要的参数进行内存拷贝，还需要对defer结构进行压栈出栈操作。所以在循环中定义defer可能导致大量的资源开销，在本例中，可以将f.Close()语句前的defer去掉，来减少大量defer导致的额外资源消耗。</p>\n<h3 id=\"坑3：判断执行没有err之后，再defer释放资源\"><a href=\"#坑3：判断执行没有err之后，再defer释放资源\" class=\"headerlink\" title=\"坑3：判断执行没有err之后，再defer释放资源\"></a>坑3：判断执行没有err之后，再defer释放资源</h3><p>一些获取资源的操作可能会返回err参数，我们可以选择忽略返回的err参数，但是如果要使用defer进行延迟释放的的话，需要在使用defer之前先判断是否存在err，如果资源没有获取成功，即没有必要也不应该再对资源执行释放操作。如果不判断获取资源是否成功就执行释放操作的话，还有可能导致释放方法执行错误。</p>\n<h3 id=\"坑4：调用os-Exit时defer不会被执行\"><a href=\"#坑4：调用os-Exit时defer不会被执行\" class=\"headerlink\" title=\"坑4：调用os.Exit时defer不会被执行\"></a>坑4：调用os.Exit时defer不会被执行</h3><p>当发生panic时，所在goroutine的所有defer会被执行，但是当调用os.Exit()方法退出程序时，defer并不会被执行。</p>\n<p>5、 uint 类型溢出</p>\n<p>​    数值类型溢出的时候，会重置为0</p>\n<p>6、介绍 rune 类型</p>\n<p>​    rune 相当于int32，特殊的字节类型  可以表示中文字符</p>\n<p>​    uint8 表示一般字符</p>\n<h1 id=\"2021-11-23-1\"><a href=\"#2021-11-23-1\" class=\"headerlink\" title=\"2021.11.23\"></a>2021.11.23</h1><p>设计模式：</p>\n<p>开闭原则：对拓展开放，对修改关闭。</p>\n<p>里氏换元原则：父类可调用的方法，子类也可调用。继承</p>\n<p>OOP 四大特性：封装、继承、多态、抽象</p>\n<p>创建型模式：创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。</p>\n<ol>\n<li><p>工厂模式：对象的创建和使用分离。</p>\n</li>\n<li><p>抽象工厂模式：通过传递参数获取实体类的对象。意图提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n</li>\n<li><p>单例模式：实例只创建一次，常存在，可直接调用</p>\n</li>\n<li><p>生成器模式（建造者模式）：多个简单的对象构建成一个复杂的对象。</p>\n</li>\n<li><p>原型模式：用于创建重复的对象，同时又能保证性能</p>\n</li>\n</ol>\n<p>行为型模式：行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。</p>\n<ol>\n<li>策略模式：<em>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</em></li>\n<li>观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub）。它是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响。</li>\n<li>状态模式：对象不同状态之间的切换。</li>\n</ol>\n<h1 id=\"2022-03-10\"><a href=\"#2022-03-10\" class=\"headerlink\" title=\"2022.03.10\"></a>2022.03.10</h1><p>数据结构：</p>\n<ol>\n<li>数组：</li>\n</ol>\n<p>​        查找时间复杂度 O(1)</p>\n<p>​        修改时间复杂度O(n)</p>\n<ol start=\"2\">\n<li>链表：</li>\n</ol>\n<p>​        查找时间复杂度 O(n)</p>\n<p>​        修改时间复杂度O(1)</p>\n<h1 id=\"2022-06-07\"><a href=\"#2022-06-07\" class=\"headerlink\" title=\"2022.06.07\"></a>2022.06.07</h1><p>找时间整一个批量更新文件的脚本 便于更新测试服和正式服</p>\n<p>温习一下容器相关内容，虽然本地不能部署容器 但是有时间还是可以玩玩的。</p>\n<h1 id=\"2022-06-10\"><a href=\"#2022-06-10\" class=\"headerlink\" title=\"2022.06.10\"></a>2022.06.10</h1><p>linux备份策略：</p>\n<ol>\n<li>完全备份；<ul>\n<li>每次都备份全部内容；</li>\n</ul>\n</li>\n<li>累计增量备份；<ul>\n<li>每次只备份相对比前一次备份增加的内容；</li>\n</ul>\n</li>\n<li>差异增量备份；<ul>\n<li>每次只备份相对比第一次备份增加的内容；</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2022-07-20\"><a href=\"#2022-07-20\" class=\"headerlink\" title=\"2022.07.20\"></a>2022.07.20</h1><p>go语言高级编程：书籍阅读</p>\n<p>第一章：</p>\n<p>数组字符串和切片：</p>\n<ol>\n<li>数组：</li>\n</ol>\n<p>数组的长度由下标值决定。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> a [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">int</span>                    <span class=\"hljs-comment\">// 定义长度为3的int型数组, 元素全部为0</span><br><span class=\"hljs-keyword\">var</span> b = [...]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;       <span class=\"hljs-comment\">// 定义长度为3的int型数组, 元素为 1, 2, 3</span><br><span class=\"hljs-keyword\">var</span> c = [...]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">2</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">2</span>&#125;    <span class=\"hljs-comment\">// 定义长度为3的int型数组, 元素为 0, 2, 3</span><br><span class=\"hljs-keyword\">var</span> d = [...]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>&#125; <span class=\"hljs-comment\">// 定义长度为6的int型数组, 元素为 1, 2, 0, 0, 5, 6</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestCode</span><span class=\"hljs-params\">(t *testing.T)</span></span> &#123;<br>\tm := [...]<span class=\"hljs-type\">int</span>&#123;<br>\t\t<span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-number\">1</span>,<br>\t\t<span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-number\">2</span>,<br>\t\t<span class=\"hljs-string\">&#x27;c&#x27;</span>: <span class=\"hljs-number\">3</span>,<br>\t&#125;<br>\tm[<span class=\"hljs-string\">&#x27;a&#x27;</span>] = <span class=\"hljs-number\">3</span><br>\tfmt.Println(<span class=\"hljs-built_in\">len</span>(m))<br><br>\t<span class=\"hljs-comment\">// 我们知晓 c 的 ASCII 码是 99，这道题相当于这样</span><br>\t<span class=\"hljs-comment\">/* m := [...]int&#123;</span><br><span class=\"hljs-comment\">\t\t97: 1,</span><br><span class=\"hljs-comment\">\t\t98: 2,</span><br><span class=\"hljs-comment\">\t\t99: 3,</span><br><span class=\"hljs-comment\">\t&#125;</span><br><span class=\"hljs-comment\">\tm[97] = 3</span><br><span class=\"hljs-comment\">\tfmt.Println(len(m)) */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>切片：</li>\n</ol>\n<p>使用append 时候尽量避免扩容</p>\n<p>由于<code>append</code>函数返回新的切片，也就是它支持链式操作。我们可以将多个<code>append</code>操作组合起来，实现在切片中间插入元素：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> a []<span class=\"hljs-type\">int</span><br>a = <span class=\"hljs-built_in\">append</span>(a[:i], <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;x&#125;, a[i:]...)...)     <span class=\"hljs-comment\">// 在第i个位置插入x</span><br>a = <span class=\"hljs-built_in\">append</span>(a[:i], <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;, a[i:]...)...) <span class=\"hljs-comment\">// 在第i个位置插入切片</span><br></code></pre></td></tr></table></figure>\n\n<p>对切面元素进行操作的时候可以使用<code>copy</code>和<code>append</code>组合</p>\n<p>可以用<code>copy</code>和<code>append</code>组合可以避免创建中间的临时切片，同样是完成添加元素的操作</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">a = <span class=\"hljs-built_in\">append</span>(a, <span class=\"hljs-number\">0</span>)     <span class=\"hljs-comment\">// 切片扩展1个空间</span><br><span class=\"hljs-built_in\">copy</span>(a[i+<span class=\"hljs-number\">1</span>:], a[i:]) <span class=\"hljs-comment\">// a[i:]向后移动1个位置</span><br>a[i] = x             <span class=\"hljs-comment\">// 设置新添加的元素</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>避免切片内存泄漏</li>\n</ol>\n<p>如前面所说，切片操作并不会复制底层的数据。底层的数组会被保存在内存中，直到它不再被引用。但是有时候可能会因为一个小的内存引用而导致底层整个数组处于被使用的状态，这会延迟自动内存回收器对底层数组的回收。</p>\n<p>例如，<code>FindPhoneNumber</code>函数加载整个文件到内存，然后搜索第一个出现的电话号码，最后结果以切片方式返回。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FindPhoneNumber</span><span class=\"hljs-params\">(filename <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">byte</span> &#123;<br>    b, _ := ioutil.ReadFile(filename)<br>    <span class=\"hljs-keyword\">return</span> regexp.MustCompile(<span class=\"hljs-string\">&quot;[0-9]+&quot;</span>).Find(b)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这段代码返回的<code>[]byte</code>指向保存整个文件的数组。因为切片引用了整个原始数组，导致自动垃圾回收器不能及时释放底层数组的空间。一个小的需求可能导致需要长时间保存整个文件数据。这虽然这并不是传统意义上的内存泄漏，但是可能会拖慢系统的整体性能。</p>\n<p>要修复这个问题，可以将感兴趣的数据复制到一个新的切片中（数据的传值是Go语言编程的一个哲学，虽然传值有一定的代价，但是换取的好处是切断了对原始数据的依赖）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FindPhoneNumber</span><span class=\"hljs-params\">(filename <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">byte</span> &#123;<br>    b, _ := ioutil.ReadFile(filename)<br>    b = regexp.MustCompile(<span class=\"hljs-string\">&quot;[0-9]+&quot;</span>).Find(b)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">byte</span>&#123;&#125;, b...)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>类似的问题，在删除切片元素时可能会遇到。假设切片里存放的是指针对象，那么下面删除末尾的元素后，被删除的元素依然被切片底层数组引用，从而导致不能及时被自动垃圾回收器回收（这要依赖回收器的实现方式）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> a []*<span class=\"hljs-type\">int</span>&#123; ... &#125;<br>a = a[:<span class=\"hljs-built_in\">len</span>(a)<span class=\"hljs-number\">-1</span>]    <span class=\"hljs-comment\">// 被删除的最后一个元素依然被引用, 可能导致GC操作被阻碍</span><br></code></pre></td></tr></table></figure>\n\n<p>保险的方式是先将需要自动内存回收的元素设置为<code>nil</code>，保证自动回收器可以发现需要回收的对象，然后再进行切片的删除操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> a []*<span class=\"hljs-type\">int</span>&#123; ... &#125;<br>a[<span class=\"hljs-built_in\">len</span>(a)<span class=\"hljs-number\">-1</span>] = <span class=\"hljs-literal\">nil</span> <span class=\"hljs-comment\">// GC回收最后一个元素内存</span><br>a = a[:<span class=\"hljs-built_in\">len</span>(a)<span class=\"hljs-number\">-1</span>]  <span class=\"hljs-comment\">// 从切片删除最后一个元素</span><br></code></pre></td></tr></table></figure>\n\n<p>当然，如果切片存在的周期很短的话，可以不用刻意处理这个问题。因为如果切片本身已经可以被GC回收的话，切片对应的每个元素自然也就是可以被回收的了。</p>\n"},{"title":"Gin web开发入门","date":"2020-08-29T08:45:00.000Z","_content":"\n- Day01 简单部署Gin框架\n- \nps：首次执行的时候我是mac默认的go 1.12版本，然后就很多错误。后来换成go 1.14.5版本，执行下方教程就好啦。\n\n1. 安装Go语言开发环境\n使用mac命令行，brew工具直接安装，代码如下：\n\n```brew install go```\n\n运行完成没有报错就是安装成功\n\n2. 安装Gin框架\n使用官方提供的命令安装。（前提：需要设置go全局的path变量，自行查找方案，不做过多介绍）\n\n```go get -u github.com/gin-gonic/gin```\n\n这里直接运行命令的话会出现 连接超时报错。因为get的资源中包含一些其他的资源引用，这部分正好处于google包中或其他国内不能访问的包中。\n解决方法：\n设置GOPROXY变量，用于获取这部分资源，然后get到本地。\n\n使用 go env 命令查看 GOPROXY变量的值。\n执行以下命令，打开modules 然后设置goproxy代理\n\n```\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n\n完成上述操作后，再执行第一步的go get命令，没有报错就证明下载成功。可以到gopath目录下查找gin包。\n\n3. 部署Gin 简单web页面\n首先，构建go源码文件，导入gin包\n\n```import \"github.com/gin-gonic/gin\"```\n然后根据官网给的example，如下：\n\n```\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\tr.Run() // listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")\n}\n```\n\n最后，执行go run xxx.go执行\n注意：最后执行的时候大概率会报错\n\n```\nmain.go:3:8: cannot find module providing package github.com/gin-gonic/gin: working directory is not part of a module\n```\n\n具体原因是因为go mod 本身的资源管理问题，在开启modules的时候，资源路径改变，导致不能正确访问到gin包。导致go代码中 import 的时候没有引入gin包。\n\n解决方法：在当前执行代码的目录下，执行以下命令。\n\n```\ngo mod init gin \ngo mod edit -require github.com/gin-gonic/gin@latest\n```\n\n这个好像是类似于nodejs的npm包管理工具，了解不多不做过多描述，以免误导各位。\n\n小技巧：使用go build 的时候可以使用-o参数指定生成的文件名称\ngin_test 自定义的生成文件名称\ngin_demo.go程序源代码\n\n```go build -o gin_test gin_demo.go```\n\n关于Gin API方面，官网提供Using GET, POST, PUT, PATCH, DELETE and OPTIONS\n\n```\nfunc main() {\n\t// Creates a gin router with default middleware:\n\t// logger and recovery (crash-free) middleware\n\trouter := gin.Default()\n\n\trouter.GET(\"/someGet\", getting)\n\trouter.POST(\"/somePost\", posting)\n\trouter.PUT(\"/somePut\", putting)\n\trouter.DELETE(\"/someDelete\", deleting)\n\trouter.PATCH(\"/somePatch\", patching)\n\trouter.HEAD(\"/someHead\", head)\n\trouter.OPTIONS(\"/someOptions\", options)\n\t\n\t// By default it serves on :8080 unless a\n\t// PORT environment variable was defined.\n\trouter.Run()\n\t// router.Run(\":3000\") for a hard coded port\n}\n```\n\n值得一提的是，通过网址访问http://127.0.0.1:8080/ 默认使用的get请求，用其他的都会404，应该是前端请求时候要指定是post或者delete或其他的请求才能正确访问到。\n\n好像是根据RESTful API接口风格来定义的，感兴趣的可以看下阮一峰老师的博文：\nRESTful API 设计指南\n\n在这里的话如果我们想要看其他请求的效果，可以使用postman api测试，选择请求方式，填写url地址就可以发起请求，然后看到返回的数据。\n\n\nGin框架官方文档：https://gin-gonic.com/docs/.","source":"_posts/Gin-web开发入门.md","raw":"---\ntitle: Gin web开发入门\ndate: 2020-08-29 16:45:00\ntags:\n- Go\n- Gin\ncategories:\n- 学习【资料整理记录】\n---\n\n- Day01 简单部署Gin框架\n- \nps：首次执行的时候我是mac默认的go 1.12版本，然后就很多错误。后来换成go 1.14.5版本，执行下方教程就好啦。\n\n1. 安装Go语言开发环境\n使用mac命令行，brew工具直接安装，代码如下：\n\n```brew install go```\n\n运行完成没有报错就是安装成功\n\n2. 安装Gin框架\n使用官方提供的命令安装。（前提：需要设置go全局的path变量，自行查找方案，不做过多介绍）\n\n```go get -u github.com/gin-gonic/gin```\n\n这里直接运行命令的话会出现 连接超时报错。因为get的资源中包含一些其他的资源引用，这部分正好处于google包中或其他国内不能访问的包中。\n解决方法：\n设置GOPROXY变量，用于获取这部分资源，然后get到本地。\n\n使用 go env 命令查看 GOPROXY变量的值。\n执行以下命令，打开modules 然后设置goproxy代理\n\n```\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n\n完成上述操作后，再执行第一步的go get命令，没有报错就证明下载成功。可以到gopath目录下查找gin包。\n\n3. 部署Gin 简单web页面\n首先，构建go源码文件，导入gin包\n\n```import \"github.com/gin-gonic/gin\"```\n然后根据官网给的example，如下：\n\n```\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\tr.Run() // listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")\n}\n```\n\n最后，执行go run xxx.go执行\n注意：最后执行的时候大概率会报错\n\n```\nmain.go:3:8: cannot find module providing package github.com/gin-gonic/gin: working directory is not part of a module\n```\n\n具体原因是因为go mod 本身的资源管理问题，在开启modules的时候，资源路径改变，导致不能正确访问到gin包。导致go代码中 import 的时候没有引入gin包。\n\n解决方法：在当前执行代码的目录下，执行以下命令。\n\n```\ngo mod init gin \ngo mod edit -require github.com/gin-gonic/gin@latest\n```\n\n这个好像是类似于nodejs的npm包管理工具，了解不多不做过多描述，以免误导各位。\n\n小技巧：使用go build 的时候可以使用-o参数指定生成的文件名称\ngin_test 自定义的生成文件名称\ngin_demo.go程序源代码\n\n```go build -o gin_test gin_demo.go```\n\n关于Gin API方面，官网提供Using GET, POST, PUT, PATCH, DELETE and OPTIONS\n\n```\nfunc main() {\n\t// Creates a gin router with default middleware:\n\t// logger and recovery (crash-free) middleware\n\trouter := gin.Default()\n\n\trouter.GET(\"/someGet\", getting)\n\trouter.POST(\"/somePost\", posting)\n\trouter.PUT(\"/somePut\", putting)\n\trouter.DELETE(\"/someDelete\", deleting)\n\trouter.PATCH(\"/somePatch\", patching)\n\trouter.HEAD(\"/someHead\", head)\n\trouter.OPTIONS(\"/someOptions\", options)\n\t\n\t// By default it serves on :8080 unless a\n\t// PORT environment variable was defined.\n\trouter.Run()\n\t// router.Run(\":3000\") for a hard coded port\n}\n```\n\n值得一提的是，通过网址访问http://127.0.0.1:8080/ 默认使用的get请求，用其他的都会404，应该是前端请求时候要指定是post或者delete或其他的请求才能正确访问到。\n\n好像是根据RESTful API接口风格来定义的，感兴趣的可以看下阮一峰老师的博文：\nRESTful API 设计指南\n\n在这里的话如果我们想要看其他请求的效果，可以使用postman api测试，选择请求方式，填写url地址就可以发起请求，然后看到返回的数据。\n\n\nGin框架官方文档：https://gin-gonic.com/docs/.","slug":"Gin-web开发入门","published":1,"updated":"2022-09-13T09:29:48.000Z","_id":"cl7zz0oan0000hspvh4t5gquf","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>Day01 简单部署Gin框架</li>\n<li>ps：首次执行的时候我是mac默认的go 1.12版本，然后就很多错误。后来换成go 1.14.5版本，执行下方教程就好啦。</li>\n</ul>\n<ol>\n<li>安装Go语言开发环境<br>使用mac命令行，brew工具直接安装，代码如下：</li>\n</ol>\n<p><code>brew install go</code></p>\n<p>运行完成没有报错就是安装成功</p>\n<ol start=\"2\">\n<li>安装Gin框架<br>使用官方提供的命令安装。（前提：需要设置go全局的path变量，自行查找方案，不做过多介绍）</li>\n</ol>\n<p><code>go get -u github.com/gin-gonic/gin</code></p>\n<p>这里直接运行命令的话会出现 连接超时报错。因为get的资源中包含一些其他的资源引用，这部分正好处于google包中或其他国内不能访问的包中。<br>解决方法：<br>设置GOPROXY变量，用于获取这部分资源，然后get到本地。</p>\n<p>使用 go env 命令查看 GOPROXY变量的值。<br>执行以下命令，打开modules 然后设置goproxy代理</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">go env -w <span class=\"hljs-attribute\">GO111MODULE</span>=on<br>go env -w <span class=\"hljs-attribute\">GOPROXY</span>=https://goproxy.io,direct<br></code></pre></td></tr></table></figure>\n\n<p>完成上述操作后，再执行第一步的go get命令，没有报错就证明下载成功。可以到gopath目录下查找gin包。</p>\n<ol start=\"3\">\n<li>部署Gin 简单web页面<br>首先，构建go源码文件，导入gin包</li>\n</ol>\n<p><code>import &quot;github.com/gin-gonic/gin&quot;</code><br>然后根据官网给的example，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gin.Default()<br>\tr.GET(<span class=\"hljs-string\">&quot;/ping&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.JSON(<span class=\"hljs-number\">200</span>, gin.H&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;pong&quot;</span>,<br>\t\t&#125;)<br>\t&#125;)<br>\tr.Run() <span class=\"hljs-comment\">// listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>最后，执行go run xxx.go执行<br>注意：最后执行的时候大概率会报错</p>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ceylon\">main.go:<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">8</span>: cannot find <span class=\"hljs-keyword\">module</span> providing <span class=\"hljs-keyword\">package</span> github.com/gin-gonic/gin: working directory <span class=\"hljs-keyword\">is</span> not part <span class=\"hljs-keyword\">of</span> a <span class=\"hljs-keyword\">module</span><br></code></pre></td></tr></table></figure>\n\n<p>具体原因是因为go mod 本身的资源管理问题，在开启modules的时候，资源路径改变，导致不能正确访问到gin包。导致go代码中 import 的时候没有引入gin包。</p>\n<p>解决方法：在当前执行代码的目录下，执行以下命令。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">go</span> <span class=\"hljs-keyword\">mod</span> init gin <br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-keyword\">mod</span> <span class=\"hljs-keyword\">edit</span> -require github.<span class=\"hljs-keyword\">com</span>/gin-gonic/gin@latest<br></code></pre></td></tr></table></figure>\n\n<p>这个好像是类似于nodejs的npm包管理工具，了解不多不做过多描述，以免误导各位。</p>\n<p>小技巧：使用go build 的时候可以使用-o参数指定生成的文件名称<br>gin_test 自定义的生成文件名称<br>gin_demo.go程序源代码</p>\n<p><code>go build -o gin_test gin_demo.go</code></p>\n<p>关于Gin API方面，官网提供Using GET, POST, PUT, PATCH, DELETE and OPTIONS</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-selector-tag\">main</span>() &#123;<br>\t<span class=\"hljs-comment\">// Creates a gin router with default middleware:</span><br>\t<span class=\"hljs-comment\">// logger and recovery (crash-free) middleware</span><br>\trouter := gin<span class=\"hljs-selector-class\">.Default</span>()<br><br>\trouter<span class=\"hljs-selector-class\">.GET</span>(<span class=\"hljs-string\">&quot;/someGet&quot;</span>, getting)<br>\trouter<span class=\"hljs-selector-class\">.POST</span>(<span class=\"hljs-string\">&quot;/somePost&quot;</span>, posting)<br>\trouter<span class=\"hljs-selector-class\">.PUT</span>(<span class=\"hljs-string\">&quot;/somePut&quot;</span>, putting)<br>\trouter<span class=\"hljs-selector-class\">.DELETE</span>(<span class=\"hljs-string\">&quot;/someDelete&quot;</span>, deleting)<br>\trouter<span class=\"hljs-selector-class\">.PATCH</span>(<span class=\"hljs-string\">&quot;/somePatch&quot;</span>, patching)<br>\trouter<span class=\"hljs-selector-class\">.HEAD</span>(<span class=\"hljs-string\">&quot;/someHead&quot;</span>, head)<br>\trouter<span class=\"hljs-selector-class\">.OPTIONS</span>(<span class=\"hljs-string\">&quot;/someOptions&quot;</span>, options)<br>\t<br>\t<span class=\"hljs-comment\">// By default it serves on :8080 unless a</span><br>\t<span class=\"hljs-comment\">// PORT environment variable was defined.</span><br>\trouter<span class=\"hljs-selector-class\">.Run</span>()<br>\t<span class=\"hljs-comment\">// router.Run(&quot;:3000&quot;) for a hard coded port</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>值得一提的是，通过网址访问<a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a> 默认使用的get请求，用其他的都会404，应该是前端请求时候要指定是post或者delete或其他的请求才能正确访问到。</p>\n<p>好像是根据RESTful API接口风格来定义的，感兴趣的可以看下阮一峰老师的博文：<br>RESTful API 设计指南</p>\n<p>在这里的话如果我们想要看其他请求的效果，可以使用postman api测试，选择请求方式，填写url地址就可以发起请求，然后看到返回的数据。</p>\n<p>Gin框架官方文档：<a href=\"https://gin-gonic.com/docs/\">https://gin-gonic.com/docs/</a>.</p>\n","site":{"data":{}},"wordcount":2227,"excerpt":"","more":"<ul>\n<li>Day01 简单部署Gin框架</li>\n<li>ps：首次执行的时候我是mac默认的go 1.12版本，然后就很多错误。后来换成go 1.14.5版本，执行下方教程就好啦。</li>\n</ul>\n<ol>\n<li>安装Go语言开发环境<br>使用mac命令行，brew工具直接安装，代码如下：</li>\n</ol>\n<p><code>brew install go</code></p>\n<p>运行完成没有报错就是安装成功</p>\n<ol start=\"2\">\n<li>安装Gin框架<br>使用官方提供的命令安装。（前提：需要设置go全局的path变量，自行查找方案，不做过多介绍）</li>\n</ol>\n<p><code>go get -u github.com/gin-gonic/gin</code></p>\n<p>这里直接运行命令的话会出现 连接超时报错。因为get的资源中包含一些其他的资源引用，这部分正好处于google包中或其他国内不能访问的包中。<br>解决方法：<br>设置GOPROXY变量，用于获取这部分资源，然后get到本地。</p>\n<p>使用 go env 命令查看 GOPROXY变量的值。<br>执行以下命令，打开modules 然后设置goproxy代理</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">go env -w <span class=\"hljs-attribute\">GO111MODULE</span>=on<br>go env -w <span class=\"hljs-attribute\">GOPROXY</span>=https://goproxy.io,direct<br></code></pre></td></tr></table></figure>\n\n<p>完成上述操作后，再执行第一步的go get命令，没有报错就证明下载成功。可以到gopath目录下查找gin包。</p>\n<ol start=\"3\">\n<li>部署Gin 简单web页面<br>首先，构建go源码文件，导入gin包</li>\n</ol>\n<p><code>import &quot;github.com/gin-gonic/gin&quot;</code><br>然后根据官网给的example，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gin.Default()<br>\tr.GET(<span class=\"hljs-string\">&quot;/ping&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.JSON(<span class=\"hljs-number\">200</span>, gin.H&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;pong&quot;</span>,<br>\t\t&#125;)<br>\t&#125;)<br>\tr.Run() <span class=\"hljs-comment\">// listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>最后，执行go run xxx.go执行<br>注意：最后执行的时候大概率会报错</p>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ceylon\">main.go:<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">8</span>: cannot find <span class=\"hljs-keyword\">module</span> providing <span class=\"hljs-keyword\">package</span> github.com/gin-gonic/gin: working directory <span class=\"hljs-keyword\">is</span> not part <span class=\"hljs-keyword\">of</span> a <span class=\"hljs-keyword\">module</span><br></code></pre></td></tr></table></figure>\n\n<p>具体原因是因为go mod 本身的资源管理问题，在开启modules的时候，资源路径改变，导致不能正确访问到gin包。导致go代码中 import 的时候没有引入gin包。</p>\n<p>解决方法：在当前执行代码的目录下，执行以下命令。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">go</span> <span class=\"hljs-keyword\">mod</span> init gin <br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-keyword\">mod</span> <span class=\"hljs-keyword\">edit</span> -require github.<span class=\"hljs-keyword\">com</span>/gin-gonic/gin@latest<br></code></pre></td></tr></table></figure>\n\n<p>这个好像是类似于nodejs的npm包管理工具，了解不多不做过多描述，以免误导各位。</p>\n<p>小技巧：使用go build 的时候可以使用-o参数指定生成的文件名称<br>gin_test 自定义的生成文件名称<br>gin_demo.go程序源代码</p>\n<p><code>go build -o gin_test gin_demo.go</code></p>\n<p>关于Gin API方面，官网提供Using GET, POST, PUT, PATCH, DELETE and OPTIONS</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-selector-tag\">main</span>() &#123;<br>\t<span class=\"hljs-comment\">// Creates a gin router with default middleware:</span><br>\t<span class=\"hljs-comment\">// logger and recovery (crash-free) middleware</span><br>\trouter := gin<span class=\"hljs-selector-class\">.Default</span>()<br><br>\trouter<span class=\"hljs-selector-class\">.GET</span>(<span class=\"hljs-string\">&quot;/someGet&quot;</span>, getting)<br>\trouter<span class=\"hljs-selector-class\">.POST</span>(<span class=\"hljs-string\">&quot;/somePost&quot;</span>, posting)<br>\trouter<span class=\"hljs-selector-class\">.PUT</span>(<span class=\"hljs-string\">&quot;/somePut&quot;</span>, putting)<br>\trouter<span class=\"hljs-selector-class\">.DELETE</span>(<span class=\"hljs-string\">&quot;/someDelete&quot;</span>, deleting)<br>\trouter<span class=\"hljs-selector-class\">.PATCH</span>(<span class=\"hljs-string\">&quot;/somePatch&quot;</span>, patching)<br>\trouter<span class=\"hljs-selector-class\">.HEAD</span>(<span class=\"hljs-string\">&quot;/someHead&quot;</span>, head)<br>\trouter<span class=\"hljs-selector-class\">.OPTIONS</span>(<span class=\"hljs-string\">&quot;/someOptions&quot;</span>, options)<br>\t<br>\t<span class=\"hljs-comment\">// By default it serves on :8080 unless a</span><br>\t<span class=\"hljs-comment\">// PORT environment variable was defined.</span><br>\trouter<span class=\"hljs-selector-class\">.Run</span>()<br>\t<span class=\"hljs-comment\">// router.Run(&quot;:3000&quot;) for a hard coded port</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>值得一提的是，通过网址访问<a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a> 默认使用的get请求，用其他的都会404，应该是前端请求时候要指定是post或者delete或其他的请求才能正确访问到。</p>\n<p>好像是根据RESTful API接口风格来定义的，感兴趣的可以看下阮一峰老师的博文：<br>RESTful API 设计指南</p>\n<p>在这里的话如果我们想要看其他请求的效果，可以使用postman api测试，选择请求方式，填写url地址就可以发起请求，然后看到返回的数据。</p>\n<p>Gin框架官方文档：<a href=\"https://gin-gonic.com/docs/\">https://gin-gonic.com/docs/</a>.</p>\n"},{"title":"Git命令的简单使用","date":"2019-03-06T08:45:00.000Z","_content":"\n- 下载Git\n  windows版本下载地址：https://gitforwindows.org/\n  其他版本可以去 https://git-scm.com/downloads\n  下载GUI Client 图形化界面工具（比如：SourceTree）\n  下载好后双击运行，我才用的傻瓜式安装，直接NEXT就好。其中有一个默认的文本编辑方式，vim（使用方法和linux一样）。\n\n安装好后，就可以右键桌面—>Git Bash Heare 打开命令窗口了\n打开之后的效果：\n\n- 创建GitHub远程仓库\n  注册GitHub账号，地址：https://github.com/\n  创建Git仓库\n  然后保存这里的连接用于连接远程仓库地址\n  三、使用Git连接远程仓库\n  打开Git命令行窗口，克隆远程仓库\n\n```git clone https://github.com/xinyi-jin/test.git```\n\n后边的链接指的是上一步复制的远程仓库地址\n经过上边的操作，就可以把远程仓库的东西复制到本地，因为我是刚刚创建的远程仓库，还没来得及放东西，所以就提示我克隆的是一个空目录\n\n进入克隆好的本地仓库目录，添加需要上传的文件到暂存区\n\n```git add .```\n\nadd 后边的“.”代表本目录下所有的文件 \n\n提交暂存区中修改的信息到本地版本库中\n\n```git commit -m \"test commit\"```\n\n-m 指的是提交信息的描述\n\n4.最后提交本地修改到远程仓库\n\n```git push -u origin master```\n\nps:这一步操作需要输入GitHub的账号密码。origin 和master 为默认信息\n使用git status可以查看当前本地仓库文件的状态\n\n四、查看GitHub远程仓库\n\n\nGitHub源码：https://github.com/xinyi-jin/\n\nps:部分浏览器不支持，会显示日期错误","source":"_posts/Git命令的简单使用.md","raw":"---\ntitle: Git命令的简单使用\ndate: 2019-03-06 16:45:00\ntags:\n- Git\ncategories:\n- 学习【资料整理记录】\n---\n\n- 下载Git\n  windows版本下载地址：https://gitforwindows.org/\n  其他版本可以去 https://git-scm.com/downloads\n  下载GUI Client 图形化界面工具（比如：SourceTree）\n  下载好后双击运行，我才用的傻瓜式安装，直接NEXT就好。其中有一个默认的文本编辑方式，vim（使用方法和linux一样）。\n\n安装好后，就可以右键桌面—>Git Bash Heare 打开命令窗口了\n打开之后的效果：\n\n- 创建GitHub远程仓库\n  注册GitHub账号，地址：https://github.com/\n  创建Git仓库\n  然后保存这里的连接用于连接远程仓库地址\n  三、使用Git连接远程仓库\n  打开Git命令行窗口，克隆远程仓库\n\n```git clone https://github.com/xinyi-jin/test.git```\n\n后边的链接指的是上一步复制的远程仓库地址\n经过上边的操作，就可以把远程仓库的东西复制到本地，因为我是刚刚创建的远程仓库，还没来得及放东西，所以就提示我克隆的是一个空目录\n\n进入克隆好的本地仓库目录，添加需要上传的文件到暂存区\n\n```git add .```\n\nadd 后边的“.”代表本目录下所有的文件 \n\n提交暂存区中修改的信息到本地版本库中\n\n```git commit -m \"test commit\"```\n\n-m 指的是提交信息的描述\n\n4.最后提交本地修改到远程仓库\n\n```git push -u origin master```\n\nps:这一步操作需要输入GitHub的账号密码。origin 和master 为默认信息\n使用git status可以查看当前本地仓库文件的状态\n\n四、查看GitHub远程仓库\n\n\nGitHub源码：https://github.com/xinyi-jin/\n\nps:部分浏览器不支持，会显示日期错误","slug":"Git命令的简单使用","published":1,"updated":"2022-09-13T09:30:57.000Z","_id":"cl7zz0oax0005hspv4knedpzz","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>下载Git<br>windows版本下载地址：<a href=\"https://gitforwindows.org/\">https://gitforwindows.org/</a><br>其他版本可以去 <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a><br>下载GUI Client 图形化界面工具（比如：SourceTree）<br>下载好后双击运行，我才用的傻瓜式安装，直接NEXT就好。其中有一个默认的文本编辑方式，vim（使用方法和linux一样）。</li>\n</ul>\n<p>安装好后，就可以右键桌面—&gt;Git Bash Heare 打开命令窗口了<br>打开之后的效果：</p>\n<ul>\n<li>创建GitHub远程仓库<br>注册GitHub账号，地址：<a href=\"https://github.com/\">https://github.com/</a><br>创建Git仓库<br>然后保存这里的连接用于连接远程仓库地址<br>三、使用Git连接远程仓库<br>打开Git命令行窗口，克隆远程仓库</li>\n</ul>\n<p><code>git clone https://github.com/xinyi-jin/test.git</code></p>\n<p>后边的链接指的是上一步复制的远程仓库地址<br>经过上边的操作，就可以把远程仓库的东西复制到本地，因为我是刚刚创建的远程仓库，还没来得及放东西，所以就提示我克隆的是一个空目录</p>\n<p>进入克隆好的本地仓库目录，添加需要上传的文件到暂存区</p>\n<p><code>git add .</code></p>\n<p>add 后边的“.”代表本目录下所有的文件 </p>\n<p>提交暂存区中修改的信息到本地版本库中</p>\n<p><code>git commit -m &quot;test commit&quot;</code></p>\n<p>-m 指的是提交信息的描述</p>\n<p>4.最后提交本地修改到远程仓库</p>\n<p><code>git push -u origin master</code></p>\n<p>ps:这一步操作需要输入GitHub的账号密码。origin 和master 为默认信息<br>使用git status可以查看当前本地仓库文件的状态</p>\n<p>四、查看GitHub远程仓库</p>\n<p>GitHub源码：<a href=\"https://github.com/xinyi-jin/\">https://github.com/xinyi-jin/</a></p>\n<p>ps:部分浏览器不支持，会显示日期错误</p>\n","site":{"data":{}},"wordcount":739,"excerpt":"","more":"<ul>\n<li>下载Git<br>windows版本下载地址：<a href=\"https://gitforwindows.org/\">https://gitforwindows.org/</a><br>其他版本可以去 <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a><br>下载GUI Client 图形化界面工具（比如：SourceTree）<br>下载好后双击运行，我才用的傻瓜式安装，直接NEXT就好。其中有一个默认的文本编辑方式，vim（使用方法和linux一样）。</li>\n</ul>\n<p>安装好后，就可以右键桌面—&gt;Git Bash Heare 打开命令窗口了<br>打开之后的效果：</p>\n<ul>\n<li>创建GitHub远程仓库<br>注册GitHub账号，地址：<a href=\"https://github.com/\">https://github.com/</a><br>创建Git仓库<br>然后保存这里的连接用于连接远程仓库地址<br>三、使用Git连接远程仓库<br>打开Git命令行窗口，克隆远程仓库</li>\n</ul>\n<p><code>git clone https://github.com/xinyi-jin/test.git</code></p>\n<p>后边的链接指的是上一步复制的远程仓库地址<br>经过上边的操作，就可以把远程仓库的东西复制到本地，因为我是刚刚创建的远程仓库，还没来得及放东西，所以就提示我克隆的是一个空目录</p>\n<p>进入克隆好的本地仓库目录，添加需要上传的文件到暂存区</p>\n<p><code>git add .</code></p>\n<p>add 后边的“.”代表本目录下所有的文件 </p>\n<p>提交暂存区中修改的信息到本地版本库中</p>\n<p><code>git commit -m &quot;test commit&quot;</code></p>\n<p>-m 指的是提交信息的描述</p>\n<p>4.最后提交本地修改到远程仓库</p>\n<p><code>git push -u origin master</code></p>\n<p>ps:这一步操作需要输入GitHub的账号密码。origin 和master 为默认信息<br>使用git status可以查看当前本地仓库文件的状态</p>\n<p>四、查看GitHub远程仓库</p>\n<p>GitHub源码：<a href=\"https://github.com/xinyi-jin/\">https://github.com/xinyi-jin/</a></p>\n<p>ps:部分浏览器不支持，会显示日期错误</p>\n"},{"title":"GoLang中if临时变量的生存周期","date":"2020-03-25T08:45:00.000Z","_content":"\n进行了下方代码进行验证\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main(){\n\tif n:=1+1;n!=2{\n\t\tfmt.Print(\"if n:\",n)\n\t}else if n<2{\n\t\tfmt.Print(\"else if n:\",n)\n\t}else {\n\t\tfmt.Print(\"else n:\",n)\n\t}\n\t// fmt.Print(\"n:\",n)\n}\n\n```\n\n输出结果：\n```else n:2```\n\n总结，由代码执行结果可得：if 判断条件中临时定义的变量，其生命周期存在于整个if else语句逻辑中，不管是if分支逻辑还是else分支逻辑。注意：在if else外则直接会提示 undefined: n\n","source":"_posts/GoLang中if临时变量的生存周期.md","raw":"---\ntitle: GoLang中if临时变量的生存周期\ndate: 2020-03-25 16:45:00\ntags:\n- Go\ncategories:\n- 学习【资料整理记录】\n---\n\n进行了下方代码进行验证\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main(){\n\tif n:=1+1;n!=2{\n\t\tfmt.Print(\"if n:\",n)\n\t}else if n<2{\n\t\tfmt.Print(\"else if n:\",n)\n\t}else {\n\t\tfmt.Print(\"else n:\",n)\n\t}\n\t// fmt.Print(\"n:\",n)\n}\n\n```\n\n输出结果：\n```else n:2```\n\n总结，由代码执行结果可得：if 判断条件中临时定义的变量，其生命周期存在于整个if else语句逻辑中，不管是if分支逻辑还是else分支逻辑。注意：在if else外则直接会提示 undefined: n\n","slug":"GoLang中if临时变量的生存周期","published":1,"updated":"2022-09-13T09:32:19.000Z","_id":"cl7zz0ob60008hspvbijs1l19","comments":1,"layout":"post","photos":[],"link":"","content":"<p>进行了下方代码进行验证</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> n:=<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>;n!=<span class=\"hljs-number\">2</span>&#123;<br>\t\tfmt.Print(<span class=\"hljs-string\">&quot;if n:&quot;</span>,n)<br>\t&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> n&lt;<span class=\"hljs-number\">2</span>&#123;<br>\t\tfmt.Print(<span class=\"hljs-string\">&quot;else if n:&quot;</span>,n)<br>\t&#125;<span class=\"hljs-keyword\">else</span> &#123;<br>\t\tfmt.Print(<span class=\"hljs-string\">&quot;else n:&quot;</span>,n)<br>\t&#125;<br>\t<span class=\"hljs-comment\">// fmt.Print(&quot;n:&quot;,n)</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>输出结果：<br><code>else n:2</code></p>\n<p>总结，由代码执行结果可得：if 判断条件中临时定义的变量，其生命周期存在于整个if else语句逻辑中，不管是if分支逻辑还是else分支逻辑。注意：在if else外则直接会提示 undefined: n</p>\n","site":{"data":{}},"wordcount":383,"excerpt":"","more":"<p>进行了下方代码进行验证</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> n:=<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>;n!=<span class=\"hljs-number\">2</span>&#123;<br>\t\tfmt.Print(<span class=\"hljs-string\">&quot;if n:&quot;</span>,n)<br>\t&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> n&lt;<span class=\"hljs-number\">2</span>&#123;<br>\t\tfmt.Print(<span class=\"hljs-string\">&quot;else if n:&quot;</span>,n)<br>\t&#125;<span class=\"hljs-keyword\">else</span> &#123;<br>\t\tfmt.Print(<span class=\"hljs-string\">&quot;else n:&quot;</span>,n)<br>\t&#125;<br>\t<span class=\"hljs-comment\">// fmt.Print(&quot;n:&quot;,n)</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>输出结果：<br><code>else n:2</code></p>\n<p>总结，由代码执行结果可得：if 判断条件中临时定义的变量，其生命周期存在于整个if else语句逻辑中，不管是if分支逻辑还是else分支逻辑。注意：在if else外则直接会提示 undefined: n</p>\n"},{"title":"go int类型转string类型","date":"2020-03-25T08:45:00.000Z","_content":"\n版权声明：本文为CSDN博主「duzhenxun」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/duzhenxun/article/details/95739946\n\n2个值做对比时要先注意他们的类型.如果一个string与一个in32不能直接对比.先要转换类型\n\n如果使用Itoa需要一个int,使用FormatInt需要一个int64,\n\n最简单的方法是使用fmt.Sprint(int32),但效率比较低\n\n1. fmt.Sprint(i) 比较慢\n\n```\nfunc Sprint(a ...interface{}) string {\n    p := newPrinter()\n    p.doPrint(a)\n    s := string(p.buf)\n    p.free()\n    return s\n}\n```\n\n2. strconv.Itoa(int(i))\n\n```\nfunc Itoa(i int) string {\n    return FormatInt(int64(i), 10)\n}\n```\n\n3. \n\n\n```\nstrconv.FormatInt(int64(i), 10)\nfunc FormatInt(i int64, base int) string {\n    _, s := formatBits(nil, uint64(i), base, i < 0, false)\n    return s\n}\n```\n\n4. string转成int：\n\n```int, err := strconv.Atoi(string)```\n\n5. string转成int64：\n\n```int64, err := strconv.ParseInt(string, 10, 64)```","source":"_posts/int类型转string类型.md","raw":"---\ntitle: go int类型转string类型\ndate: 2020-03-25 16:45:00\ntags:\n- Go\ncategories:\n- 学习【资料整理记录】\n---\n\n版权声明：本文为CSDN博主「duzhenxun」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/duzhenxun/article/details/95739946\n\n2个值做对比时要先注意他们的类型.如果一个string与一个in32不能直接对比.先要转换类型\n\n如果使用Itoa需要一个int,使用FormatInt需要一个int64,\n\n最简单的方法是使用fmt.Sprint(int32),但效率比较低\n\n1. fmt.Sprint(i) 比较慢\n\n```\nfunc Sprint(a ...interface{}) string {\n    p := newPrinter()\n    p.doPrint(a)\n    s := string(p.buf)\n    p.free()\n    return s\n}\n```\n\n2. strconv.Itoa(int(i))\n\n```\nfunc Itoa(i int) string {\n    return FormatInt(int64(i), 10)\n}\n```\n\n3. \n\n\n```\nstrconv.FormatInt(int64(i), 10)\nfunc FormatInt(i int64, base int) string {\n    _, s := formatBits(nil, uint64(i), base, i < 0, false)\n    return s\n}\n```\n\n4. string转成int：\n\n```int, err := strconv.Atoi(string)```\n\n5. string转成int64：\n\n```int64, err := strconv.ParseInt(string, 10, 64)```","slug":"int类型转string类型","published":1,"updated":"2022-09-13T09:34:49.000Z","_id":"cl7zz0obk000bhspvdsfegt75","comments":1,"layout":"post","photos":[],"link":"","content":"<p>版权声明：本文为CSDN博主「duzhenxun」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/duzhenxun/article/details/95739946\">https://blog.csdn.net/duzhenxun/article/details/95739946</a></p>\n<p>2个值做对比时要先注意他们的类型.如果一个string与一个in32不能直接对比.先要转换类型</p>\n<p>如果使用Itoa需要一个int,使用FormatInt需要一个int64,</p>\n<p>最简单的方法是使用fmt.Sprint(int32),但效率比较低</p>\n<ol>\n<li>fmt.Sprint(i) 比较慢</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">Sprint</span>(<span class=\"hljs-selector-tag\">a</span> ...interface&#123;&#125;) string &#123;<br>    <span class=\"hljs-selector-tag\">p</span> := <span class=\"hljs-built_in\">newPrinter</span>()<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.doPrint</span>(a)<br>    s := <span class=\"hljs-built_in\">string</span>(<span class=\"hljs-selector-tag\">p</span>.buf)<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.free</span>()<br>    return s<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>strconv.Itoa(int(i))</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">func <span class=\"hljs-constructor\">Itoa(<span class=\"hljs-params\">i</span> <span class=\"hljs-params\">int</span>)</span> <span class=\"hljs-built_in\">string</span> &#123;<br>    return <span class=\"hljs-constructor\">FormatInt(<span class=\"hljs-params\">int64</span>(<span class=\"hljs-params\">i</span>)</span>, <span class=\"hljs-number\">10</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li></li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">strconv.FormatInt(<span class=\"hljs-type\">int64</span>(i), <span class=\"hljs-number\">10</span>)<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FormatInt</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int64</span>, base <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>    _, s := formatBits(<span class=\"hljs-literal\">nil</span>, <span class=\"hljs-type\">uint64</span>(i), base, i &lt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">false</span>)<br>    <span class=\"hljs-keyword\">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>string转成int：</li>\n</ol>\n<p><code>int, err := strconv.Atoi(string)</code></p>\n<ol start=\"5\">\n<li>string转成int64：</li>\n</ol>\n<p><code>int64, err := strconv.ParseInt(string, 10, 64)</code></p>\n","site":{"data":{}},"wordcount":694,"excerpt":"","more":"<p>版权声明：本文为CSDN博主「duzhenxun」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/duzhenxun/article/details/95739946\">https://blog.csdn.net/duzhenxun/article/details/95739946</a></p>\n<p>2个值做对比时要先注意他们的类型.如果一个string与一个in32不能直接对比.先要转换类型</p>\n<p>如果使用Itoa需要一个int,使用FormatInt需要一个int64,</p>\n<p>最简单的方法是使用fmt.Sprint(int32),但效率比较低</p>\n<ol>\n<li>fmt.Sprint(i) 比较慢</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">Sprint</span>(<span class=\"hljs-selector-tag\">a</span> ...interface&#123;&#125;) string &#123;<br>    <span class=\"hljs-selector-tag\">p</span> := <span class=\"hljs-built_in\">newPrinter</span>()<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.doPrint</span>(a)<br>    s := <span class=\"hljs-built_in\">string</span>(<span class=\"hljs-selector-tag\">p</span>.buf)<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.free</span>()<br>    return s<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>strconv.Itoa(int(i))</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">func <span class=\"hljs-constructor\">Itoa(<span class=\"hljs-params\">i</span> <span class=\"hljs-params\">int</span>)</span> <span class=\"hljs-built_in\">string</span> &#123;<br>    return <span class=\"hljs-constructor\">FormatInt(<span class=\"hljs-params\">int64</span>(<span class=\"hljs-params\">i</span>)</span>, <span class=\"hljs-number\">10</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li></li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">strconv.FormatInt(<span class=\"hljs-type\">int64</span>(i), <span class=\"hljs-number\">10</span>)<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FormatInt</span><span class=\"hljs-params\">(i <span class=\"hljs-type\">int64</span>, base <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>    _, s := formatBits(<span class=\"hljs-literal\">nil</span>, <span class=\"hljs-type\">uint64</span>(i), base, i &lt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">false</span>)<br>    <span class=\"hljs-keyword\">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>string转成int：</li>\n</ol>\n<p><code>int, err := strconv.Atoi(string)</code></p>\n<ol start=\"5\">\n<li>string转成int64：</li>\n</ol>\n<p><code>int64, err := strconv.ParseInt(string, 10, 64)</code></p>\n"},{"title":"JDK的安装与环境配置","date":"2022-02-27T08:45:00.000Z","_content":"\n- 下载JDK安装包\n首先到Oracle官网下载，链接: https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n需要勾选同意，然后选择自己电脑系统的版本下载。\nps:右键我的电脑，属性，查看系统类型。x64是64位，x86是32位。\n\n下载完成后，双击下载的安装包，采用傻瓜式安装，一路NEXT即可。\nps：注意安装路径可以设置在除C盘外的其他盘，例如：D:\\Java\\jdk-8u181-windows-x64\n另外，安装路径不要使用中文命名，否则会发生未知错误（第一次装的时候就被坑死了）\n\n- 配置JDK的环境变量\n右键，我的电脑，属性，高级系统设置，高级，环境变量\n\n找到系统变量中的path，点击编辑，在最前边添加自己的JDK路径信息，然后点击确定。\nps：路径信息到bin文件夹下就可以，因为bin文件夹存放的是java的.exe命令，路径末尾不要忘记添加“;”\n\n然后就可以windows键+R，运行cmd，进入DOS命令行。\n执行java -version命令，如下图，就表示java环境变量配置成功了。\n\nps:新配置好的环境变量，必须重新打开DOS窗口才能正常运行，java -version中，java后边需要留有一个空格\n\njdk重装时候遇到的坑0.0，没卸载 干净，这位大哥的博客有解决方案\nhttps://blog.csdn.net/ldld1717/article/details/52144760","source":"_posts/JDK的安装与环境配置.md","raw":"---\ntitle: JDK的安装与环境配置\ndate: 2022-02-27 16:45:00\ntags:\n- Java\n- JDK\ncategories:\n- 学习【资料整理记录】\n---\n\n- 下载JDK安装包\n首先到Oracle官网下载，链接: https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n需要勾选同意，然后选择自己电脑系统的版本下载。\nps:右键我的电脑，属性，查看系统类型。x64是64位，x86是32位。\n\n下载完成后，双击下载的安装包，采用傻瓜式安装，一路NEXT即可。\nps：注意安装路径可以设置在除C盘外的其他盘，例如：D:\\Java\\jdk-8u181-windows-x64\n另外，安装路径不要使用中文命名，否则会发生未知错误（第一次装的时候就被坑死了）\n\n- 配置JDK的环境变量\n右键，我的电脑，属性，高级系统设置，高级，环境变量\n\n找到系统变量中的path，点击编辑，在最前边添加自己的JDK路径信息，然后点击确定。\nps：路径信息到bin文件夹下就可以，因为bin文件夹存放的是java的.exe命令，路径末尾不要忘记添加“;”\n\n然后就可以windows键+R，运行cmd，进入DOS命令行。\n执行java -version命令，如下图，就表示java环境变量配置成功了。\n\nps:新配置好的环境变量，必须重新打开DOS窗口才能正常运行，java -version中，java后边需要留有一个空格\n\njdk重装时候遇到的坑0.0，没卸载 干净，这位大哥的博客有解决方案\nhttps://blog.csdn.net/ldld1717/article/details/52144760","slug":"JDK的安装与环境配置","published":1,"updated":"2022-09-13T09:35:16.000Z","_id":"cl7zz0obp000ehspvar9xf54o","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>下载JDK安装包<br>首先到Oracle官网下载，链接: <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li>\n</ul>\n<p>需要勾选同意，然后选择自己电脑系统的版本下载。<br>ps:右键我的电脑，属性，查看系统类型。x64是64位，x86是32位。</p>\n<p>下载完成后，双击下载的安装包，采用傻瓜式安装，一路NEXT即可。<br>ps：注意安装路径可以设置在除C盘外的其他盘，例如：D:\\Java\\jdk-8u181-windows-x64<br>另外，安装路径不要使用中文命名，否则会发生未知错误（第一次装的时候就被坑死了）</p>\n<ul>\n<li>配置JDK的环境变量<br>右键，我的电脑，属性，高级系统设置，高级，环境变量</li>\n</ul>\n<p>找到系统变量中的path，点击编辑，在最前边添加自己的JDK路径信息，然后点击确定。<br>ps：路径信息到bin文件夹下就可以，因为bin文件夹存放的是java的.exe命令，路径末尾不要忘记添加“;”</p>\n<p>然后就可以windows键+R，运行cmd，进入DOS命令行。<br>执行java -version命令，如下图，就表示java环境变量配置成功了。</p>\n<p>ps:新配置好的环境变量，必须重新打开DOS窗口才能正常运行，java -version中，java后边需要留有一个空格</p>\n<p>jdk重装时候遇到的坑0.0，没卸载 干净，这位大哥的博客有解决方案<br><a href=\"https://blog.csdn.net/ldld1717/article/details/52144760\">https://blog.csdn.net/ldld1717/article/details/52144760</a></p>\n","site":{"data":{}},"wordcount":643,"excerpt":"","more":"<ul>\n<li>下载JDK安装包<br>首先到Oracle官网下载，链接: <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li>\n</ul>\n<p>需要勾选同意，然后选择自己电脑系统的版本下载。<br>ps:右键我的电脑，属性，查看系统类型。x64是64位，x86是32位。</p>\n<p>下载完成后，双击下载的安装包，采用傻瓜式安装，一路NEXT即可。<br>ps：注意安装路径可以设置在除C盘外的其他盘，例如：D:\\Java\\jdk-8u181-windows-x64<br>另外，安装路径不要使用中文命名，否则会发生未知错误（第一次装的时候就被坑死了）</p>\n<ul>\n<li>配置JDK的环境变量<br>右键，我的电脑，属性，高级系统设置，高级，环境变量</li>\n</ul>\n<p>找到系统变量中的path，点击编辑，在最前边添加自己的JDK路径信息，然后点击确定。<br>ps：路径信息到bin文件夹下就可以，因为bin文件夹存放的是java的.exe命令，路径末尾不要忘记添加“;”</p>\n<p>然后就可以windows键+R，运行cmd，进入DOS命令行。<br>执行java -version命令，如下图，就表示java环境变量配置成功了。</p>\n<p>ps:新配置好的环境变量，必须重新打开DOS窗口才能正常运行，java -version中，java后边需要留有一个空格</p>\n<p>jdk重装时候遇到的坑0.0，没卸载 干净，这位大哥的博客有解决方案<br><a href=\"https://blog.csdn.net/ldld1717/article/details/52144760\">https://blog.csdn.net/ldld1717/article/details/52144760</a></p>\n"},{"title":"JS两个日期之间计算时间差","date":"2019-03-06T08:45:00.000Z","_content":"\n- 计算两个日期之间相差的毫秒数（也就是两个日期的时间戳差）\n这里有几种常见的JS方式，来获得日期的毫秒数。\n\n1. 日期对象的 getTime();方法\n2. \n```\n<script>\n    var date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar timestamp = date.getTime();\t//调用getTime()方法获取毫秒数\n\talert(\"timestamp: \"+timestamp);\n</script>\n```\n\n2. 日期对象的valueOf();方法\n3. \n```\n<script>\n    var date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar timestamp = date.valueOf(date); //调用valueOf()方法获取毫秒数\n\talert(\"timestamp: \"+timestamp);\n</script>\n```\n3. Date对象的parse();方法\n\n```\n<script>\n    var date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar timestamp = Date.parse(date);//使用Date对象的parse()方法，获取毫秒数\n\talert(\"timestamp: \"+timestamp);\n</script>\n```\n\n- 用现在时间的毫秒数减去过去时间的毫秒数，得到的就是两个日期相差的总毫秒数。\nps：可以使用上述的三种方法，另外还有一种最为简单的方法。如果两个日期对象都是Date类型的话，可以直接相减，得到的就是毫秒数差。\n\n```\n<script>\n\tvar new_date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar old_date = new Date(\"2018-12-12 00:00:00\"); //设置过去的一个时间点，\"yyyy-MM-dd HH:mm:ss\"格式化日期\n\n\tvar difftime = new_date - old_date; //计算时间差\n\t\n\talert(\"difftime: \"+difftime);\n</script>\n```\n\n- 得到了两个日期的毫秒差之后，就可以转化成具体的日期格式（xxxx年xx月xx天，xx小时xx分钟xx秒）\n因为我们获取的是毫秒，所有要先转换成秒。1秒=1000毫秒\n\n```\n<script>\n\tvar new_date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar old_date = new Date(\"2018-12-12 00:00:00\"); //设置过去的一个时间点，\"yyyy-MM-dd HH:mm:ss\"格式化日期\n\n\tvar difftime = (new_date - old_date)/1000; //计算时间差,并把毫秒转换成秒\n\t\n\tvar days = parseInt(difftime/86400); // 天  24*60*60*1000 \n\tvar hours = parseInt(difftime/3600)-24*days;    // 小时 60*60 总小时数-过去的小时数=现在的小时数 \n\tvar minutes = parseInt(difftime%3600/60); // 分钟 -(day*24) 以60秒为一整份 取余 剩下秒数 秒数/60 就是分钟数\n\tvar seconds = parseInt(difftime%60);  // 以60秒为一整份 取余 剩下秒数\n\t\n\talert(\"时间差是: \"+days+\"天, \"+hours+\"小时, \"+minutes+\"分钟, \"+seconds+\"秒\");\t\t\n</script>\n```\n\n另外本人踩过坑的一个项目，还是从网上获取的别人的代码，不曾想还是个有bug的项目。\n1\n当时这种方式设置日期，然后再获取毫秒数，就会出现30天的时间差。后来干脆直接格式化一下日期放进去，没想到就对了。我也很懵比，有知道的大牛，可以告知一下这样做为什么会好，万分感谢！！！\n\nGitHub源码：https://github.com/xinyi-jin/Romantic-confession\n\nps:部分浏览器不支持，会显示日期错误","source":"_posts/JS两个日期之间计算时间差.md","raw":"---\ntitle: JS两个日期之间计算时间差\ndate: 2019-03-06 16:45:00\ntags:\n- Html\n- Js\ncategories:\n- 学习【资料整理记录】\n---\n\n- 计算两个日期之间相差的毫秒数（也就是两个日期的时间戳差）\n这里有几种常见的JS方式，来获得日期的毫秒数。\n\n1. 日期对象的 getTime();方法\n2. \n```\n<script>\n    var date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar timestamp = date.getTime();\t//调用getTime()方法获取毫秒数\n\talert(\"timestamp: \"+timestamp);\n</script>\n```\n\n2. 日期对象的valueOf();方法\n3. \n```\n<script>\n    var date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar timestamp = date.valueOf(date); //调用valueOf()方法获取毫秒数\n\talert(\"timestamp: \"+timestamp);\n</script>\n```\n3. Date对象的parse();方法\n\n```\n<script>\n    var date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar timestamp = Date.parse(date);//使用Date对象的parse()方法，获取毫秒数\n\talert(\"timestamp: \"+timestamp);\n</script>\n```\n\n- 用现在时间的毫秒数减去过去时间的毫秒数，得到的就是两个日期相差的总毫秒数。\nps：可以使用上述的三种方法，另外还有一种最为简单的方法。如果两个日期对象都是Date类型的话，可以直接相减，得到的就是毫秒数差。\n\n```\n<script>\n\tvar new_date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar old_date = new Date(\"2018-12-12 00:00:00\"); //设置过去的一个时间点，\"yyyy-MM-dd HH:mm:ss\"格式化日期\n\n\tvar difftime = new_date - old_date; //计算时间差\n\t\n\talert(\"difftime: \"+difftime);\n</script>\n```\n\n- 得到了两个日期的毫秒差之后，就可以转化成具体的日期格式（xxxx年xx月xx天，xx小时xx分钟xx秒）\n因为我们获取的是毫秒，所有要先转换成秒。1秒=1000毫秒\n\n```\n<script>\n\tvar new_date = new Date(); //新建一个日期对象，默认现在的时间\n\tvar old_date = new Date(\"2018-12-12 00:00:00\"); //设置过去的一个时间点，\"yyyy-MM-dd HH:mm:ss\"格式化日期\n\n\tvar difftime = (new_date - old_date)/1000; //计算时间差,并把毫秒转换成秒\n\t\n\tvar days = parseInt(difftime/86400); // 天  24*60*60*1000 \n\tvar hours = parseInt(difftime/3600)-24*days;    // 小时 60*60 总小时数-过去的小时数=现在的小时数 \n\tvar minutes = parseInt(difftime%3600/60); // 分钟 -(day*24) 以60秒为一整份 取余 剩下秒数 秒数/60 就是分钟数\n\tvar seconds = parseInt(difftime%60);  // 以60秒为一整份 取余 剩下秒数\n\t\n\talert(\"时间差是: \"+days+\"天, \"+hours+\"小时, \"+minutes+\"分钟, \"+seconds+\"秒\");\t\t\n</script>\n```\n\n另外本人踩过坑的一个项目，还是从网上获取的别人的代码，不曾想还是个有bug的项目。\n1\n当时这种方式设置日期，然后再获取毫秒数，就会出现30天的时间差。后来干脆直接格式化一下日期放进去，没想到就对了。我也很懵比，有知道的大牛，可以告知一下这样做为什么会好，万分感谢！！！\n\nGitHub源码：https://github.com/xinyi-jin/Romantic-confession\n\nps:部分浏览器不支持，会显示日期错误","slug":"JS两个日期之间计算时间差","published":1,"updated":"2022-09-13T09:37:20.000Z","_id":"cl7zz0obr000khspvfail79tn","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>计算两个日期之间相差的毫秒数（也就是两个日期的时间戳差）<br>这里有几种常见的JS方式，来获得日期的毫秒数。</li>\n</ul>\n<ol>\n<li><p>日期对象的 getTime();方法</p>\n</li>\n<li><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">&lt;script&gt;<br>    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">date</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span><br>\t<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">timestamp</span> = <span class=\"hljs-built_in\">date</span>.getTime();\t<span class=\"hljs-comment\">//调用getTime()方法获取毫秒数</span><br>\talert(<span class=\"hljs-string\">&quot;timestamp: &quot;</span>+<span class=\"hljs-built_in\">timestamp</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>日期对象的valueOf();方法</p>\n</li>\n<li><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">&lt;script&gt;<br>    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">date</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span><br>\t<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">timestamp</span> = <span class=\"hljs-built_in\">date</span>.valueOf(<span class=\"hljs-built_in\">date</span>); <span class=\"hljs-comment\">//调用valueOf()方法获取毫秒数</span><br>\talert(<span class=\"hljs-string\">&quot;timestamp: &quot;</span>+<span class=\"hljs-built_in\">timestamp</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>Date对象的parse();方法</p>\n</li>\n</ol>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">&lt;script&gt;<br>    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">date</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span><br>\t<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">timestamp</span> = <span class=\"hljs-built_in\">Date</span>.parse(<span class=\"hljs-built_in\">date</span>);<span class=\"hljs-comment\">//使用Date对象的parse()方法，获取毫秒数</span><br>\talert(<span class=\"hljs-string\">&quot;timestamp: &quot;</span>+<span class=\"hljs-built_in\">timestamp</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>用现在时间的毫秒数减去过去时间的毫秒数，得到的就是两个日期相差的总毫秒数。<br>ps：可以使用上述的三种方法，另外还有一种最为简单的方法。如果两个日期对象都是Date类型的话，可以直接相减，得到的就是毫秒数差。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> new_date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> old_date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&quot;2018-12-12 00:00:00&quot;</span>); <span class=\"hljs-comment\">//设置过去的一个时间点，&quot;yyyy-MM-dd HH:mm:ss&quot;格式化日期</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> difftime = new_date - old_date; <span class=\"hljs-comment\">//计算时间差</span></span><br><span class=\"language-javascript\">\t</span><br><span class=\"language-javascript\">\t<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;difftime: &quot;</span>+difftime);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>得到了两个日期的毫秒差之后，就可以转化成具体的日期格式（xxxx年xx月xx天，xx小时xx分钟xx秒）<br>因为我们获取的是毫秒，所有要先转换成秒。1秒=1000毫秒</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> new_date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> old_date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&quot;2018-12-12 00:00:00&quot;</span>); <span class=\"hljs-comment\">//设置过去的一个时间点，&quot;yyyy-MM-dd HH:mm:ss&quot;格式化日期</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> difftime = (new_date - old_date)/<span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">//计算时间差,并把毫秒转换成秒</span></span><br><span class=\"language-javascript\">\t</span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> days = <span class=\"hljs-built_in\">parseInt</span>(difftime/<span class=\"hljs-number\">86400</span>); <span class=\"hljs-comment\">// 天  24*60*60*1000 </span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> hours = <span class=\"hljs-built_in\">parseInt</span>(difftime/<span class=\"hljs-number\">3600</span>)-<span class=\"hljs-number\">24</span>*days;    <span class=\"hljs-comment\">// 小时 60*60 总小时数-过去的小时数=现在的小时数 </span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> minutes = <span class=\"hljs-built_in\">parseInt</span>(difftime%<span class=\"hljs-number\">3600</span>/<span class=\"hljs-number\">60</span>); <span class=\"hljs-comment\">// 分钟 -(day*24) 以60秒为一整份 取余 剩下秒数 秒数/60 就是分钟数</span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> seconds = <span class=\"hljs-built_in\">parseInt</span>(difftime%<span class=\"hljs-number\">60</span>);  <span class=\"hljs-comment\">// 以60秒为一整份 取余 剩下秒数</span></span><br><span class=\"language-javascript\">\t</span><br><span class=\"language-javascript\">\t<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;时间差是: &quot;</span>+days+<span class=\"hljs-string\">&quot;天, &quot;</span>+hours+<span class=\"hljs-string\">&quot;小时, &quot;</span>+minutes+<span class=\"hljs-string\">&quot;分钟, &quot;</span>+seconds+<span class=\"hljs-string\">&quot;秒&quot;</span>);\t\t</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>另外本人踩过坑的一个项目，还是从网上获取的别人的代码，不曾想还是个有bug的项目。<br>1<br>当时这种方式设置日期，然后再获取毫秒数，就会出现30天的时间差。后来干脆直接格式化一下日期放进去，没想到就对了。我也很懵比，有知道的大牛，可以告知一下这样做为什么会好，万分感谢！！！</p>\n<p>GitHub源码：<a href=\"https://github.com/xinyi-jin/Romantic-confession\">https://github.com/xinyi-jin/Romantic-confession</a></p>\n<p>ps:部分浏览器不支持，会显示日期错误</p>\n","site":{"data":{}},"wordcount":1825,"excerpt":"","more":"<ul>\n<li>计算两个日期之间相差的毫秒数（也就是两个日期的时间戳差）<br>这里有几种常见的JS方式，来获得日期的毫秒数。</li>\n</ul>\n<ol>\n<li><p>日期对象的 getTime();方法</p>\n</li>\n<li><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">&lt;script&gt;<br>    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">date</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span><br>\t<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">timestamp</span> = <span class=\"hljs-built_in\">date</span>.getTime();\t<span class=\"hljs-comment\">//调用getTime()方法获取毫秒数</span><br>\talert(<span class=\"hljs-string\">&quot;timestamp: &quot;</span>+<span class=\"hljs-built_in\">timestamp</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>日期对象的valueOf();方法</p>\n</li>\n<li><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">&lt;script&gt;<br>    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">date</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span><br>\t<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">timestamp</span> = <span class=\"hljs-built_in\">date</span>.valueOf(<span class=\"hljs-built_in\">date</span>); <span class=\"hljs-comment\">//调用valueOf()方法获取毫秒数</span><br>\talert(<span class=\"hljs-string\">&quot;timestamp: &quot;</span>+<span class=\"hljs-built_in\">timestamp</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>Date对象的parse();方法</p>\n</li>\n</ol>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">&lt;script&gt;<br>    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">date</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span><br>\t<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">timestamp</span> = <span class=\"hljs-built_in\">Date</span>.parse(<span class=\"hljs-built_in\">date</span>);<span class=\"hljs-comment\">//使用Date对象的parse()方法，获取毫秒数</span><br>\talert(<span class=\"hljs-string\">&quot;timestamp: &quot;</span>+<span class=\"hljs-built_in\">timestamp</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>用现在时间的毫秒数减去过去时间的毫秒数，得到的就是两个日期相差的总毫秒数。<br>ps：可以使用上述的三种方法，另外还有一种最为简单的方法。如果两个日期对象都是Date类型的话，可以直接相减，得到的就是毫秒数差。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> new_date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> old_date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&quot;2018-12-12 00:00:00&quot;</span>); <span class=\"hljs-comment\">//设置过去的一个时间点，&quot;yyyy-MM-dd HH:mm:ss&quot;格式化日期</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> difftime = new_date - old_date; <span class=\"hljs-comment\">//计算时间差</span></span><br><span class=\"language-javascript\">\t</span><br><span class=\"language-javascript\">\t<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;difftime: &quot;</span>+difftime);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>得到了两个日期的毫秒差之后，就可以转化成具体的日期格式（xxxx年xx月xx天，xx小时xx分钟xx秒）<br>因为我们获取的是毫秒，所有要先转换成秒。1秒=1000毫秒</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> new_date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(); <span class=\"hljs-comment\">//新建一个日期对象，默认现在的时间</span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> old_date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&quot;2018-12-12 00:00:00&quot;</span>); <span class=\"hljs-comment\">//设置过去的一个时间点，&quot;yyyy-MM-dd HH:mm:ss&quot;格式化日期</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> difftime = (new_date - old_date)/<span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">//计算时间差,并把毫秒转换成秒</span></span><br><span class=\"language-javascript\">\t</span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> days = <span class=\"hljs-built_in\">parseInt</span>(difftime/<span class=\"hljs-number\">86400</span>); <span class=\"hljs-comment\">// 天  24*60*60*1000 </span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> hours = <span class=\"hljs-built_in\">parseInt</span>(difftime/<span class=\"hljs-number\">3600</span>)-<span class=\"hljs-number\">24</span>*days;    <span class=\"hljs-comment\">// 小时 60*60 总小时数-过去的小时数=现在的小时数 </span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> minutes = <span class=\"hljs-built_in\">parseInt</span>(difftime%<span class=\"hljs-number\">3600</span>/<span class=\"hljs-number\">60</span>); <span class=\"hljs-comment\">// 分钟 -(day*24) 以60秒为一整份 取余 剩下秒数 秒数/60 就是分钟数</span></span><br><span class=\"language-javascript\">\t<span class=\"hljs-keyword\">var</span> seconds = <span class=\"hljs-built_in\">parseInt</span>(difftime%<span class=\"hljs-number\">60</span>);  <span class=\"hljs-comment\">// 以60秒为一整份 取余 剩下秒数</span></span><br><span class=\"language-javascript\">\t</span><br><span class=\"language-javascript\">\t<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;时间差是: &quot;</span>+days+<span class=\"hljs-string\">&quot;天, &quot;</span>+hours+<span class=\"hljs-string\">&quot;小时, &quot;</span>+minutes+<span class=\"hljs-string\">&quot;分钟, &quot;</span>+seconds+<span class=\"hljs-string\">&quot;秒&quot;</span>);\t\t</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>另外本人踩过坑的一个项目，还是从网上获取的别人的代码，不曾想还是个有bug的项目。<br>1<br>当时这种方式设置日期，然后再获取毫秒数，就会出现30天的时间差。后来干脆直接格式化一下日期放进去，没想到就对了。我也很懵比，有知道的大牛，可以告知一下这样做为什么会好，万分感谢！！！</p>\n<p>GitHub源码：<a href=\"https://github.com/xinyi-jin/Romantic-confession\">https://github.com/xinyi-jin/Romantic-confession</a></p>\n<p>ps:部分浏览器不支持，会显示日期错误</p>\n"},{"title":"MySQL57的安装与使用","date":"2019-12-01T08:45:00.000Z","_content":"\n- 下载安装MySQL57\n1. 去官网下载MySQL57的安装包，https://dev.mysql.com/downloads/installer/\n不选择最新版本，点击选择其他版本\n\n点击下载\n\n选择只开始我的下载\n\n下载完成后，双击可运行程序\nps：安装过程中，能next的地方就next，这种界面就暂不提供截图分享了\n\n设置数据库使用的端口号\n\n设置数据库的密码\n\n设置数据库的DOS命令启动名称\n\n等待安装完成后Execute，然后finish就安装好了\n\n输入用户名密码，连接到数据库，这里默认的是root最高权限账户\n\n- DOS简单使用MySQL57\n使用DOS命令操作数据库之前先要配置好MySQL的环境变量，同jdk的配置方式一样\n\nps：经过install安装工具连接成功之后就不用再使用下边的DOS命令，应为服务已经启动了\n\nMySQL服务安装\n\n```mysqld -install```\n\n启动MySQL数据库\n\n```net start mysql```\n\n关闭MySQL数据库\n\n```net stop mysql```\n\n连接数据库（-h 数据库的IP地址，-u用户名 -p密码）\n\n```mysql -h 127.0.0.1 -u root  -p```\n\nps:进入数据库之后就可以使用标准SQL语句去执行，dos下密码的输入是隐式的，就是说你输密码的时候自己看不到，只要输入后回车就可以了","source":"_posts/MySQL57的安装与使用.md","raw":"---\ntitle: MySQL57的安装与使用\ndate: 2019-12-01 16:45:00\ntags:\n- MySQL\ncategories:\n- 学习【资料整理记录】\n---\n\n- 下载安装MySQL57\n1. 去官网下载MySQL57的安装包，https://dev.mysql.com/downloads/installer/\n不选择最新版本，点击选择其他版本\n\n点击下载\n\n选择只开始我的下载\n\n下载完成后，双击可运行程序\nps：安装过程中，能next的地方就next，这种界面就暂不提供截图分享了\n\n设置数据库使用的端口号\n\n设置数据库的密码\n\n设置数据库的DOS命令启动名称\n\n等待安装完成后Execute，然后finish就安装好了\n\n输入用户名密码，连接到数据库，这里默认的是root最高权限账户\n\n- DOS简单使用MySQL57\n使用DOS命令操作数据库之前先要配置好MySQL的环境变量，同jdk的配置方式一样\n\nps：经过install安装工具连接成功之后就不用再使用下边的DOS命令，应为服务已经启动了\n\nMySQL服务安装\n\n```mysqld -install```\n\n启动MySQL数据库\n\n```net start mysql```\n\n关闭MySQL数据库\n\n```net stop mysql```\n\n连接数据库（-h 数据库的IP地址，-u用户名 -p密码）\n\n```mysql -h 127.0.0.1 -u root  -p```\n\nps:进入数据库之后就可以使用标准SQL语句去执行，dos下密码的输入是隐式的，就是说你输密码的时候自己看不到，只要输入后回车就可以了","slug":"MySQL57的安装与使用","published":1,"updated":"2022-09-13T09:38:29.000Z","_id":"cl7zz0oca000qhspvb0wo3n71","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>下载安装MySQL57</li>\n</ul>\n<ol>\n<li>去官网下载MySQL57的安装包，<a href=\"https://dev.mysql.com/downloads/installer/\">https://dev.mysql.com/downloads/installer/</a><br>不选择最新版本，点击选择其他版本</li>\n</ol>\n<p>点击下载</p>\n<p>选择只开始我的下载</p>\n<p>下载完成后，双击可运行程序<br>ps：安装过程中，能next的地方就next，这种界面就暂不提供截图分享了</p>\n<p>设置数据库使用的端口号</p>\n<p>设置数据库的密码</p>\n<p>设置数据库的DOS命令启动名称</p>\n<p>等待安装完成后Execute，然后finish就安装好了</p>\n<p>输入用户名密码，连接到数据库，这里默认的是root最高权限账户</p>\n<ul>\n<li>DOS简单使用MySQL57<br>使用DOS命令操作数据库之前先要配置好MySQL的环境变量，同jdk的配置方式一样</li>\n</ul>\n<p>ps：经过install安装工具连接成功之后就不用再使用下边的DOS命令，应为服务已经启动了</p>\n<p>MySQL服务安装</p>\n<p><code>mysqld -install</code></p>\n<p>启动MySQL数据库</p>\n<p><code>net start mysql</code></p>\n<p>关闭MySQL数据库</p>\n<p><code>net stop mysql</code></p>\n<p>连接数据库（-h 数据库的IP地址，-u用户名 -p密码）</p>\n<p><code>mysql -h 127.0.0.1 -u root  -p</code></p>\n<p>ps:进入数据库之后就可以使用标准SQL语句去执行，dos下密码的输入是隐式的，就是说你输密码的时候自己看不到，只要输入后回车就可以了</p>\n","site":{"data":{}},"wordcount":529,"excerpt":"","more":"<ul>\n<li>下载安装MySQL57</li>\n</ul>\n<ol>\n<li>去官网下载MySQL57的安装包，<a href=\"https://dev.mysql.com/downloads/installer/\">https://dev.mysql.com/downloads/installer/</a><br>不选择最新版本，点击选择其他版本</li>\n</ol>\n<p>点击下载</p>\n<p>选择只开始我的下载</p>\n<p>下载完成后，双击可运行程序<br>ps：安装过程中，能next的地方就next，这种界面就暂不提供截图分享了</p>\n<p>设置数据库使用的端口号</p>\n<p>设置数据库的密码</p>\n<p>设置数据库的DOS命令启动名称</p>\n<p>等待安装完成后Execute，然后finish就安装好了</p>\n<p>输入用户名密码，连接到数据库，这里默认的是root最高权限账户</p>\n<ul>\n<li>DOS简单使用MySQL57<br>使用DOS命令操作数据库之前先要配置好MySQL的环境变量，同jdk的配置方式一样</li>\n</ul>\n<p>ps：经过install安装工具连接成功之后就不用再使用下边的DOS命令，应为服务已经启动了</p>\n<p>MySQL服务安装</p>\n<p><code>mysqld -install</code></p>\n<p>启动MySQL数据库</p>\n<p><code>net start mysql</code></p>\n<p>关闭MySQL数据库</p>\n<p><code>net stop mysql</code></p>\n<p>连接数据库（-h 数据库的IP地址，-u用户名 -p密码）</p>\n<p><code>mysql -h 127.0.0.1 -u root  -p</code></p>\n<p>ps:进入数据库之后就可以使用标准SQL语句去执行，dos下密码的输入是隐式的，就是说你输密码的时候自己看不到，只要输入后回车就可以了</p>\n"},{"title":"MySQL按天建表","date":"2020-01-02T08:45:00.000Z","_content":"\nmysql设置定时任务：\n\n需求：mysql数据库里面做个定时任务自动每天创建一张表。\n\n1. 查看是否开启event与开启event\n\n```show variables like '%sche%';  ```\n\n若未开启\n\n```set global event_scheduler =1;```\n\n2. 创建存储过程\n\n每天创建一个名为 test_年月日的表\n\n\n```\ndelimiter //\n\ndrop procedure if exists create_table01//\n\nCREATE PROCEDURE create_table01()\n\nBEGIN\n\ndeclare str_date varchar(50);\n\nSET str_date = date_format(now(),'%Y%m%d');  \n\n \n\nSET @sqlcmd1 = CONCAT('CREATE TABLE test_',str_date,'(\n\nid int(11) not null auto_increment primary key,\n\ntime datetime not null\n\n) ;');\n\nPREPARE p1 FROM @sqlcmd1;\n\nEXECUTE p1;\n\nDEALLOCATE PREPARE p1;\n\nEND//\n\ndelimiter ;\n```\n\n3. 创建事件，调用存储过程\n\n```\ndrop event if exists test_event01;\n\ncreate event test_event01\n\non schedule every 1 DAY STARTS NOW()\n\ndo call create_table01();\n```\n\n开启事件\n\n```alter event test_event on completion preserve enable;```\n\n```show tables;```\n\n查询是否建表成功\n\n若是想关闭事件：\n\n```alter event test_event on completion preserve disable;```\n\n4. 事件执行时间的设置\n\n```\nCREATE EVENT test_event01 ON SCHEDULE EVERY 1 DAY STARTS '2012-09-24 00:00:00'\n\nON COMPLETION PRESERVE ENABLE DO CALL  create_table01();\n\nEVERY #后面的是时间间隔，可以选 1 second，3 minute，5 hour，9 day，1 month，1 quarter（季度），1 year\n\n#从2013年1月13号0点开始，每天运行一次\n\nON SCHEDULE EVERY 1 DAY   STARTS '2013-01-13 00:00:00'\n\n#从现在开始每隔九天定时执行\n\nON SCHEDULE EVERY 9 DAY STARTS NOW() ；\n\n#每个月的一号凌晨1 点执行\n\non schedule every 1 month starts date_add(date_add(date_sub(curdate(),interval day(curdate())-1 day),interval 1 month),interval 1 hour);\n\n#每个季度一号的凌晨1点执行\n\non schedule every 1 quarter starts date_add(date_add(date(concat(year(curdate()),'-',elt(quarter(curdate()),1,4,7,10),'-',1)),interval 1 quarter),interval 1 hour);\n\n#每年1月1号凌晨1点执行\n\non schedule every 1 quarter starts date_add(date_add(date(concat(year(curdate()),'-',elt(quarter(curdate()),1,4,7,10),'-',1)),interval 1 quarter),interval 1 hour);\n```\n\n5. 几个相关概念\n\n存储程序：( 存储函数(stored function)+存储过程(stored procedure)+触发器(trigger)+事件(event) )\n\n存储函数：返回一个计算结果，该结果可以用在表达式里\n\n存储过程：不直接返回一个结果，但可以用来完成一般的运算或是生成一个结果集并传递会客户\n\n触发器：与数据表关联，当那个数据表被 insert、delete、update语句修改时，触发器将自动执行\n\n事件：根据时间表在预订时刻自动执行\n\n原文地址：https://blog.csdn.net/vinking9393/article/details/84805050","source":"_posts/MySQL按天建表.md","raw":"---\ntitle: MySQL按天建表\ndate: 2020-01-02 16:45:00\ntags:\n- MySQL\ncategories:\n- 学习【资料整理记录】\n---\n\nmysql设置定时任务：\n\n需求：mysql数据库里面做个定时任务自动每天创建一张表。\n\n1. 查看是否开启event与开启event\n\n```show variables like '%sche%';  ```\n\n若未开启\n\n```set global event_scheduler =1;```\n\n2. 创建存储过程\n\n每天创建一个名为 test_年月日的表\n\n\n```\ndelimiter //\n\ndrop procedure if exists create_table01//\n\nCREATE PROCEDURE create_table01()\n\nBEGIN\n\ndeclare str_date varchar(50);\n\nSET str_date = date_format(now(),'%Y%m%d');  \n\n \n\nSET @sqlcmd1 = CONCAT('CREATE TABLE test_',str_date,'(\n\nid int(11) not null auto_increment primary key,\n\ntime datetime not null\n\n) ;');\n\nPREPARE p1 FROM @sqlcmd1;\n\nEXECUTE p1;\n\nDEALLOCATE PREPARE p1;\n\nEND//\n\ndelimiter ;\n```\n\n3. 创建事件，调用存储过程\n\n```\ndrop event if exists test_event01;\n\ncreate event test_event01\n\non schedule every 1 DAY STARTS NOW()\n\ndo call create_table01();\n```\n\n开启事件\n\n```alter event test_event on completion preserve enable;```\n\n```show tables;```\n\n查询是否建表成功\n\n若是想关闭事件：\n\n```alter event test_event on completion preserve disable;```\n\n4. 事件执行时间的设置\n\n```\nCREATE EVENT test_event01 ON SCHEDULE EVERY 1 DAY STARTS '2012-09-24 00:00:00'\n\nON COMPLETION PRESERVE ENABLE DO CALL  create_table01();\n\nEVERY #后面的是时间间隔，可以选 1 second，3 minute，5 hour，9 day，1 month，1 quarter（季度），1 year\n\n#从2013年1月13号0点开始，每天运行一次\n\nON SCHEDULE EVERY 1 DAY   STARTS '2013-01-13 00:00:00'\n\n#从现在开始每隔九天定时执行\n\nON SCHEDULE EVERY 9 DAY STARTS NOW() ；\n\n#每个月的一号凌晨1 点执行\n\non schedule every 1 month starts date_add(date_add(date_sub(curdate(),interval day(curdate())-1 day),interval 1 month),interval 1 hour);\n\n#每个季度一号的凌晨1点执行\n\non schedule every 1 quarter starts date_add(date_add(date(concat(year(curdate()),'-',elt(quarter(curdate()),1,4,7,10),'-',1)),interval 1 quarter),interval 1 hour);\n\n#每年1月1号凌晨1点执行\n\non schedule every 1 quarter starts date_add(date_add(date(concat(year(curdate()),'-',elt(quarter(curdate()),1,4,7,10),'-',1)),interval 1 quarter),interval 1 hour);\n```\n\n5. 几个相关概念\n\n存储程序：( 存储函数(stored function)+存储过程(stored procedure)+触发器(trigger)+事件(event) )\n\n存储函数：返回一个计算结果，该结果可以用在表达式里\n\n存储过程：不直接返回一个结果，但可以用来完成一般的运算或是生成一个结果集并传递会客户\n\n触发器：与数据表关联，当那个数据表被 insert、delete、update语句修改时，触发器将自动执行\n\n事件：根据时间表在预订时刻自动执行\n\n原文地址：https://blog.csdn.net/vinking9393/article/details/84805050","slug":"MySQL按天建表","published":1,"updated":"2022-09-13T09:41:14.000Z","_id":"cl7zz0ocf000uhspv6b810q2i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>mysql设置定时任务：</p>\n<p>需求：mysql数据库里面做个定时任务自动每天创建一张表。</p>\n<ol>\n<li>查看是否开启event与开启event</li>\n</ol>\n<p><code>show variables like &#39;%sche%&#39;;  </code></p>\n<p>若未开启</p>\n<p><code>set global event_scheduler =1;</code></p>\n<ol start=\"2\">\n<li>创建存储过程</li>\n</ol>\n<p>每天创建一个名为 test_年月日的表</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">delimiter</span> //<br><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">procedure</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">exists</span> create_table01//<br><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">PROCEDURE</span> create_table01()<br><br><span class=\"hljs-keyword\">BEGIN</span><br><br><span class=\"hljs-keyword\">declare</span> str_date <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">50</span>);<br><br><span class=\"hljs-keyword\">SET</span> str_date = date_format(now(),<span class=\"hljs-string\">&#x27;%Y%m%d&#x27;</span>);  <br><br> <br><br><span class=\"hljs-keyword\">SET</span> @sqlcmd1 = CONCAT(<span class=\"hljs-string\">&#x27;CREATE TABLE test_&#x27;</span>,str_date,<span class=\"hljs-string\">&#x27;(</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">id int(11) not null auto_increment primary key,</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">time datetime not null</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">) ;&#x27;</span>);<br><br><span class=\"hljs-keyword\">PREPARE</span> p1 <span class=\"hljs-keyword\">FROM</span> @sqlcmd1;<br><br><span class=\"hljs-keyword\">EXECUTE</span> p1;<br><br><span class=\"hljs-keyword\">DEALLOCATE</span> <span class=\"hljs-keyword\">PREPARE</span> p1;<br><br><span class=\"hljs-keyword\">END</span>//<br><br><span class=\"hljs-keyword\">delimiter</span> ;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建事件，调用存储过程</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">drop <span class=\"hljs-keyword\">event</span> <span class=\"hljs-keyword\">if</span> exists test_event01;<br><br>create <span class=\"hljs-keyword\">event</span> test_event01<br><br><span class=\"hljs-keyword\">on</span> schedule every <span class=\"hljs-number\">1</span> <span class=\"hljs-function\">DAY STARTS <span class=\"hljs-title\">NOW</span>()</span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">do</span> call <span class=\"hljs-title\">create_table01</span>()</span>;<br></code></pre></td></tr></table></figure>\n\n<p>开启事件</p>\n<p><code>alter event test_event on completion preserve enable;</code></p>\n<p><code>show tables;</code></p>\n<p>查询是否建表成功</p>\n<p>若是想关闭事件：</p>\n<p><code>alter event test_event on completion preserve disable;</code></p>\n<ol start=\"4\">\n<li>事件执行时间的设置</li>\n</ol>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">CREATE</span> EVENT test_event01 <span class=\"hljs-literal\">ON</span> SCHEDULE EVERY <span class=\"hljs-number\">1</span> DAY STARTS &#x27;<span class=\"hljs-number\">2012</span>-<span class=\"hljs-number\">09</span>-<span class=\"hljs-number\">24</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>&#x27;<br><br><span class=\"hljs-attribute\">ON</span> COMPLETION PRESERVE ENABLE DO CALL  create_table01();<br><br><span class=\"hljs-attribute\">EVERY</span> #后面的是时间间隔，可以选 <span class=\"hljs-number\">1</span> second，<span class=\"hljs-number\">3</span> minute，<span class=\"hljs-number\">5</span> hour，<span class=\"hljs-number\">9</span> day，<span class=\"hljs-number\">1</span> month，<span class=\"hljs-number\">1</span> quarter（季度），<span class=\"hljs-number\">1</span> year<br><br><span class=\"hljs-comment\">#从2013年1月13号0点开始，每天运行一次</span><br><br><span class=\"hljs-attribute\">ON</span> SCHEDULE EVERY <span class=\"hljs-number\">1</span> DAY   STARTS &#x27;<span class=\"hljs-number\">2013</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">13</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>&#x27;<br><br><span class=\"hljs-comment\">#从现在开始每隔九天定时执行</span><br><br><span class=\"hljs-attribute\">ON</span> SCHEDULE EVERY <span class=\"hljs-number\">9</span> DAY STARTS NOW() ；<br><br><span class=\"hljs-comment\">#每个月的一号凌晨1 点执行</span><br><br><span class=\"hljs-attribute\">on</span> schedule every <span class=\"hljs-number\">1</span> month starts date_add(date_add(date_sub(curdate(),interval day(curdate())-<span class=\"hljs-number\">1</span> day),interval <span class=\"hljs-number\">1</span> month),interval <span class=\"hljs-number\">1</span> hour);<br><br><span class=\"hljs-comment\">#每个季度一号的凌晨1点执行</span><br><br><span class=\"hljs-attribute\">on</span> schedule every <span class=\"hljs-number\">1</span> quarter starts date_add(date_add(date(concat(year(curdate()),&#x27;-&#x27;,elt(quarter(curdate()),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">10</span>),&#x27;-&#x27;,<span class=\"hljs-number\">1</span>)),interval <span class=\"hljs-number\">1</span> quarter),interval <span class=\"hljs-number\">1</span> hour);<br><br><span class=\"hljs-comment\">#每年1月1号凌晨1点执行</span><br><br><span class=\"hljs-attribute\">on</span> schedule every <span class=\"hljs-number\">1</span> quarter starts date_add(date_add(date(concat(year(curdate()),&#x27;-&#x27;,elt(quarter(curdate()),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">10</span>),&#x27;-&#x27;,<span class=\"hljs-number\">1</span>)),interval <span class=\"hljs-number\">1</span> quarter),interval <span class=\"hljs-number\">1</span> hour);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>几个相关概念</li>\n</ol>\n<p>存储程序：( 存储函数(stored function)+存储过程(stored procedure)+触发器(trigger)+事件(event) )</p>\n<p>存储函数：返回一个计算结果，该结果可以用在表达式里</p>\n<p>存储过程：不直接返回一个结果，但可以用来完成一般的运算或是生成一个结果集并传递会客户</p>\n<p>触发器：与数据表关联，当那个数据表被 insert、delete、update语句修改时，触发器将自动执行</p>\n<p>事件：根据时间表在预订时刻自动执行</p>\n<p>原文地址：<a href=\"https://blog.csdn.net/vinking9393/article/details/84805050\">https://blog.csdn.net/vinking9393/article/details/84805050</a></p>\n","site":{"data":{}},"wordcount":1971,"excerpt":"","more":"<p>mysql设置定时任务：</p>\n<p>需求：mysql数据库里面做个定时任务自动每天创建一张表。</p>\n<ol>\n<li>查看是否开启event与开启event</li>\n</ol>\n<p><code>show variables like &#39;%sche%&#39;;  </code></p>\n<p>若未开启</p>\n<p><code>set global event_scheduler =1;</code></p>\n<ol start=\"2\">\n<li>创建存储过程</li>\n</ol>\n<p>每天创建一个名为 test_年月日的表</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">delimiter</span> //<br><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">procedure</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">exists</span> create_table01//<br><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">PROCEDURE</span> create_table01()<br><br><span class=\"hljs-keyword\">BEGIN</span><br><br><span class=\"hljs-keyword\">declare</span> str_date <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">50</span>);<br><br><span class=\"hljs-keyword\">SET</span> str_date = date_format(now(),<span class=\"hljs-string\">&#x27;%Y%m%d&#x27;</span>);  <br><br> <br><br><span class=\"hljs-keyword\">SET</span> @sqlcmd1 = CONCAT(<span class=\"hljs-string\">&#x27;CREATE TABLE test_&#x27;</span>,str_date,<span class=\"hljs-string\">&#x27;(</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">id int(11) not null auto_increment primary key,</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">time datetime not null</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">) ;&#x27;</span>);<br><br><span class=\"hljs-keyword\">PREPARE</span> p1 <span class=\"hljs-keyword\">FROM</span> @sqlcmd1;<br><br><span class=\"hljs-keyword\">EXECUTE</span> p1;<br><br><span class=\"hljs-keyword\">DEALLOCATE</span> <span class=\"hljs-keyword\">PREPARE</span> p1;<br><br><span class=\"hljs-keyword\">END</span>//<br><br><span class=\"hljs-keyword\">delimiter</span> ;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建事件，调用存储过程</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">drop <span class=\"hljs-keyword\">event</span> <span class=\"hljs-keyword\">if</span> exists test_event01;<br><br>create <span class=\"hljs-keyword\">event</span> test_event01<br><br><span class=\"hljs-keyword\">on</span> schedule every <span class=\"hljs-number\">1</span> <span class=\"hljs-function\">DAY STARTS <span class=\"hljs-title\">NOW</span>()</span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">do</span> call <span class=\"hljs-title\">create_table01</span>()</span>;<br></code></pre></td></tr></table></figure>\n\n<p>开启事件</p>\n<p><code>alter event test_event on completion preserve enable;</code></p>\n<p><code>show tables;</code></p>\n<p>查询是否建表成功</p>\n<p>若是想关闭事件：</p>\n<p><code>alter event test_event on completion preserve disable;</code></p>\n<ol start=\"4\">\n<li>事件执行时间的设置</li>\n</ol>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">CREATE</span> EVENT test_event01 <span class=\"hljs-literal\">ON</span> SCHEDULE EVERY <span class=\"hljs-number\">1</span> DAY STARTS &#x27;<span class=\"hljs-number\">2012</span>-<span class=\"hljs-number\">09</span>-<span class=\"hljs-number\">24</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>&#x27;<br><br><span class=\"hljs-attribute\">ON</span> COMPLETION PRESERVE ENABLE DO CALL  create_table01();<br><br><span class=\"hljs-attribute\">EVERY</span> #后面的是时间间隔，可以选 <span class=\"hljs-number\">1</span> second，<span class=\"hljs-number\">3</span> minute，<span class=\"hljs-number\">5</span> hour，<span class=\"hljs-number\">9</span> day，<span class=\"hljs-number\">1</span> month，<span class=\"hljs-number\">1</span> quarter（季度），<span class=\"hljs-number\">1</span> year<br><br><span class=\"hljs-comment\">#从2013年1月13号0点开始，每天运行一次</span><br><br><span class=\"hljs-attribute\">ON</span> SCHEDULE EVERY <span class=\"hljs-number\">1</span> DAY   STARTS &#x27;<span class=\"hljs-number\">2013</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">13</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>&#x27;<br><br><span class=\"hljs-comment\">#从现在开始每隔九天定时执行</span><br><br><span class=\"hljs-attribute\">ON</span> SCHEDULE EVERY <span class=\"hljs-number\">9</span> DAY STARTS NOW() ；<br><br><span class=\"hljs-comment\">#每个月的一号凌晨1 点执行</span><br><br><span class=\"hljs-attribute\">on</span> schedule every <span class=\"hljs-number\">1</span> month starts date_add(date_add(date_sub(curdate(),interval day(curdate())-<span class=\"hljs-number\">1</span> day),interval <span class=\"hljs-number\">1</span> month),interval <span class=\"hljs-number\">1</span> hour);<br><br><span class=\"hljs-comment\">#每个季度一号的凌晨1点执行</span><br><br><span class=\"hljs-attribute\">on</span> schedule every <span class=\"hljs-number\">1</span> quarter starts date_add(date_add(date(concat(year(curdate()),&#x27;-&#x27;,elt(quarter(curdate()),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">10</span>),&#x27;-&#x27;,<span class=\"hljs-number\">1</span>)),interval <span class=\"hljs-number\">1</span> quarter),interval <span class=\"hljs-number\">1</span> hour);<br><br><span class=\"hljs-comment\">#每年1月1号凌晨1点执行</span><br><br><span class=\"hljs-attribute\">on</span> schedule every <span class=\"hljs-number\">1</span> quarter starts date_add(date_add(date(concat(year(curdate()),&#x27;-&#x27;,elt(quarter(curdate()),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">10</span>),&#x27;-&#x27;,<span class=\"hljs-number\">1</span>)),interval <span class=\"hljs-number\">1</span> quarter),interval <span class=\"hljs-number\">1</span> hour);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>几个相关概念</li>\n</ol>\n<p>存储程序：( 存储函数(stored function)+存储过程(stored procedure)+触发器(trigger)+事件(event) )</p>\n<p>存储函数：返回一个计算结果，该结果可以用在表达式里</p>\n<p>存储过程：不直接返回一个结果，但可以用来完成一般的运算或是生成一个结果集并传递会客户</p>\n<p>触发器：与数据表关联，当那个数据表被 insert、delete、update语句修改时，触发器将自动执行</p>\n<p>事件：根据时间表在预订时刻自动执行</p>\n<p>原文地址：<a href=\"https://blog.csdn.net/vinking9393/article/details/84805050\">https://blog.csdn.net/vinking9393/article/details/84805050</a></p>\n"},{"title":"MySQL中WHERE子句不等于的使用","date":"2020-03-17T08:45:00.000Z","_content":"\nMySQL中WHERE子句条件判断<>，!= 二者的区别\nANSI标准中是用<>(所以建议用<>)，但为了跟大部分数据库保持一致，数据库中一般都提供了 !=(高级语言一般用来表示不等于) 与 <> 来表示不等于：\n\n- MySQL 5.1: 支持 != 和 <>\n- PostgreSQL 8.3: 支持 != 和 <>\n- SQLite: 支持 != 和 <>\n- Oracle 10g: 支持 != 和 <>\n- Microsoft SQL Server 2000/2005/2008: 支持 != 和 <>\n- IBM Informix Dynamic Server 10: 支持 != 和 <>\n- InterBase/Firebird: 支持 != 和 <>\n\n最后两个只支持ANSI标准的数据库：\n- IBM DB2 UDB 9.5:仅支持 <>\n- Apache Derby:仅支持 <>\n\n建议使用<>标识不等于关系，这样适配所有的数据库","source":"_posts/MySQL中WHERE子句不等于的使用.md","raw":"---\ntitle: MySQL中WHERE子句不等于的使用\ndate: 2020-03-17 16:45:00\ntags:\n- MySQL\ncategories:\n- 学习【资料整理记录】\n---\n\nMySQL中WHERE子句条件判断<>，!= 二者的区别\nANSI标准中是用<>(所以建议用<>)，但为了跟大部分数据库保持一致，数据库中一般都提供了 !=(高级语言一般用来表示不等于) 与 <> 来表示不等于：\n\n- MySQL 5.1: 支持 != 和 <>\n- PostgreSQL 8.3: 支持 != 和 <>\n- SQLite: 支持 != 和 <>\n- Oracle 10g: 支持 != 和 <>\n- Microsoft SQL Server 2000/2005/2008: 支持 != 和 <>\n- IBM Informix Dynamic Server 10: 支持 != 和 <>\n- InterBase/Firebird: 支持 != 和 <>\n\n最后两个只支持ANSI标准的数据库：\n- IBM DB2 UDB 9.5:仅支持 <>\n- Apache Derby:仅支持 <>\n\n建议使用<>标识不等于关系，这样适配所有的数据库","slug":"MySQL中WHERE子句不等于的使用","published":1,"updated":"2022-09-13T09:41:26.000Z","_id":"cl7zz0ocj000xhspvazb1dfv4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>MySQL中WHERE子句条件判断&lt;&gt;，!= 二者的区别<br>ANSI标准中是用&lt;&gt;(所以建议用&lt;&gt;)，但为了跟大部分数据库保持一致，数据库中一般都提供了 !=(高级语言一般用来表示不等于) 与 &lt;&gt; 来表示不等于：</p>\n<ul>\n<li>MySQL 5.1: 支持 != 和 &lt;&gt;</li>\n<li>PostgreSQL 8.3: 支持 != 和 &lt;&gt;</li>\n<li>SQLite: 支持 != 和 &lt;&gt;</li>\n<li>Oracle 10g: 支持 != 和 &lt;&gt;</li>\n<li>Microsoft SQL Server 2000/2005/2008: 支持 != 和 &lt;&gt;</li>\n<li>IBM Informix Dynamic Server 10: 支持 != 和 &lt;&gt;</li>\n<li>InterBase/Firebird: 支持 != 和 &lt;&gt;</li>\n</ul>\n<p>最后两个只支持ANSI标准的数据库：</p>\n<ul>\n<li>IBM DB2 UDB 9.5:仅支持 &lt;&gt;</li>\n<li>Apache Derby:仅支持 &lt;&gt;</li>\n</ul>\n<p>建议使用&lt;&gt;标识不等于关系，这样适配所有的数据库</p>\n","site":{"data":{}},"wordcount":429,"excerpt":"","more":"<p>MySQL中WHERE子句条件判断&lt;&gt;，!= 二者的区别<br>ANSI标准中是用&lt;&gt;(所以建议用&lt;&gt;)，但为了跟大部分数据库保持一致，数据库中一般都提供了 !=(高级语言一般用来表示不等于) 与 &lt;&gt; 来表示不等于：</p>\n<ul>\n<li>MySQL 5.1: 支持 != 和 &lt;&gt;</li>\n<li>PostgreSQL 8.3: 支持 != 和 &lt;&gt;</li>\n<li>SQLite: 支持 != 和 &lt;&gt;</li>\n<li>Oracle 10g: 支持 != 和 &lt;&gt;</li>\n<li>Microsoft SQL Server 2000/2005/2008: 支持 != 和 &lt;&gt;</li>\n<li>IBM Informix Dynamic Server 10: 支持 != 和 &lt;&gt;</li>\n<li>InterBase/Firebird: 支持 != 和 &lt;&gt;</li>\n</ul>\n<p>最后两个只支持ANSI标准的数据库：</p>\n<ul>\n<li>IBM DB2 UDB 9.5:仅支持 &lt;&gt;</li>\n<li>Apache Derby:仅支持 &lt;&gt;</li>\n</ul>\n<p>建议使用&lt;&gt;标识不等于关系，这样适配所有的数据库</p>\n"},{"title":"产品更新相关","date":"2020-03-17T08:45:00.000Z","_content":"\n### 产品更新迭代注意事项：\n\n---\n\n1. 版本兼容\n   新版本要兼容老版本，因为服务器与客户端更新不同步的话，会导致老版本不能正常使用（这里指的是不停机更新，不讨论其他情况）\n\n   - 服务器更新后，客户端没有及时更新，导致老版本出错\n   - 客户端更新后，服务器没有及时更新，导致客户端更新内容不能使用\n\n   解决方案：\n\n​\t\t一般都是服务器先更新后台逻辑代码，并兼容老版本的逻辑，然后客户端更新，正常使用新增逻辑（客户端强制更新），用户体验上来说没有什么差别，等到下次更新客户端的时候就可以把为了兼容老版本的多余代码移除掉。\n   \n2. 其他内容待添加\n\n","source":"_posts/产品更新相关.md","raw":"---\ntitle: 产品更新相关\ndate: 2020-03-17 16:45:00\ntags:\n- 产品更新\ncategories:\n- 学习【资料整理记录】\n---\n\n### 产品更新迭代注意事项：\n\n---\n\n1. 版本兼容\n   新版本要兼容老版本，因为服务器与客户端更新不同步的话，会导致老版本不能正常使用（这里指的是不停机更新，不讨论其他情况）\n\n   - 服务器更新后，客户端没有及时更新，导致老版本出错\n   - 客户端更新后，服务器没有及时更新，导致客户端更新内容不能使用\n\n   解决方案：\n\n​\t\t一般都是服务器先更新后台逻辑代码，并兼容老版本的逻辑，然后客户端更新，正常使用新增逻辑（客户端强制更新），用户体验上来说没有什么差别，等到下次更新客户端的时候就可以把为了兼容老版本的多余代码移除掉。\n   \n2. 其他内容待添加\n\n","slug":"产品更新相关","published":1,"updated":"2022-09-13T09:15:58.000Z","_id":"cl7zz0od30010hspvdb5wgt6a","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"产品更新迭代注意事项：\"><a href=\"#产品更新迭代注意事项：\" class=\"headerlink\" title=\"产品更新迭代注意事项：\"></a>产品更新迭代注意事项：</h3><hr>\n<ol>\n<li><p>版本兼容<br>新版本要兼容老版本，因为服务器与客户端更新不同步的话，会导致老版本不能正常使用（这里指的是不停机更新，不讨论其他情况）</p>\n<ul>\n<li>服务器更新后，客户端没有及时更新，导致老版本出错</li>\n<li>客户端更新后，服务器没有及时更新，导致客户端更新内容不能使用</li>\n</ul>\n<p>解决方案：</p>\n</li>\n</ol>\n<p>​        一般都是服务器先更新后台逻辑代码，并兼容老版本的逻辑，然后客户端更新，正常使用新增逻辑（客户端强制更新），用户体验上来说没有什么差别，等到下次更新客户端的时候就可以把为了兼容老版本的多余代码移除掉。</p>\n<ol start=\"2\">\n<li>其他内容待添加</li>\n</ol>\n","site":{"data":{}},"wordcount":240,"excerpt":"","more":"<h3 id=\"产品更新迭代注意事项：\"><a href=\"#产品更新迭代注意事项：\" class=\"headerlink\" title=\"产品更新迭代注意事项：\"></a>产品更新迭代注意事项：</h3><hr>\n<ol>\n<li><p>版本兼容<br>新版本要兼容老版本，因为服务器与客户端更新不同步的话，会导致老版本不能正常使用（这里指的是不停机更新，不讨论其他情况）</p>\n<ul>\n<li>服务器更新后，客户端没有及时更新，导致老版本出错</li>\n<li>客户端更新后，服务器没有及时更新，导致客户端更新内容不能使用</li>\n</ul>\n<p>解决方案：</p>\n</li>\n</ol>\n<p>​        一般都是服务器先更新后台逻辑代码，并兼容老版本的逻辑，然后客户端更新，正常使用新增逻辑（客户端强制更新），用户体验上来说没有什么差别，等到下次更新客户端的时候就可以把为了兼容老版本的多余代码移除掉。</p>\n<ol start=\"2\">\n<li>其他内容待添加</li>\n</ol>\n"},{"title":"二进制某位数0变1，1变0","date":"2019-12-28T08:45:00.000Z","_content":"\n二进制操作（使用Go语言实现）\n```\n// 把第三位修改为0，标识没有在线奖励可以领取\nreplyStatus.Status = replyStatus.Status &^ (1 << 2) \n\n// 把第三位修改为1，标识有在线奖励未领取\nreply.Status |= (1 << 2) \n\n// 把binar的二进制数，第n+1位设置成1\nbinar |  (1<<n) \n\n// 把binar的二进制数，第n+1位设置成0\nbinar &^ (1 << n) \n\n// 在Go中实际使用,如需改变原数,可直接使用如下形式\nbinar |=  (1<<n) \nbinar &= ^(1 << n) \n```","source":"_posts/二进制某位数0变1，1变0.md","raw":"---\ntitle: 二进制某位数0变1，1变0\ndate: 2019-12-28 16:45:00\ntags:\n- 二进制\n- 算法\ncategories:\n- 学习【资料整理记录】\n---\n\n二进制操作（使用Go语言实现）\n```\n// 把第三位修改为0，标识没有在线奖励可以领取\nreplyStatus.Status = replyStatus.Status &^ (1 << 2) \n\n// 把第三位修改为1，标识有在线奖励未领取\nreply.Status |= (1 << 2) \n\n// 把binar的二进制数，第n+1位设置成1\nbinar |  (1<<n) \n\n// 把binar的二进制数，第n+1位设置成0\nbinar &^ (1 << n) \n\n// 在Go中实际使用,如需改变原数,可直接使用如下形式\nbinar |=  (1<<n) \nbinar &= ^(1 << n) \n```","slug":"二进制某位数0变1，1变0","published":1,"updated":"2022-09-13T09:20:15.000Z","_id":"cl7zz0od70014hspvh6d31s6h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>二进制操作（使用Go语言实现）</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\"><span class=\"hljs-comment\">// 把第三位修改为0，标识没有在线奖励可以领取</span><br>replyStatus.Status = replyStatus.Status <span class=\"hljs-meta\">&amp;^ (1 &lt;&lt; 2) </span><br><br><span class=\"hljs-comment\">// 把第三位修改为1，标识有在线奖励未领取</span><br>reply.Status <span class=\"hljs-string\">|= (1 &lt;&lt; 2) </span><br><br><span class=\"hljs-comment\">// 把binar的二进制数，第n+1位设置成1</span><br>binar <span class=\"hljs-string\">|  (1&lt;&lt;n) </span><br><br><span class=\"hljs-comment\">// 把binar的二进制数，第n+1位设置成0</span><br>binar <span class=\"hljs-meta\">&amp;^ (1 &lt;&lt; n) </span><br><br><span class=\"hljs-comment\">// 在Go中实际使用,如需改变原数,可直接使用如下形式</span><br>binar <span class=\"hljs-string\">|=  (1&lt;&lt;n) </span><br>binar <span class=\"hljs-meta\">&amp;= ^(1 &lt;&lt; n) </span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":318,"excerpt":"","more":"<p>二进制操作（使用Go语言实现）</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\"><span class=\"hljs-comment\">// 把第三位修改为0，标识没有在线奖励可以领取</span><br>replyStatus.Status = replyStatus.Status <span class=\"hljs-meta\">&amp;^ (1 &lt;&lt; 2) </span><br><br><span class=\"hljs-comment\">// 把第三位修改为1，标识有在线奖励未领取</span><br>reply.Status <span class=\"hljs-string\">|= (1 &lt;&lt; 2) </span><br><br><span class=\"hljs-comment\">// 把binar的二进制数，第n+1位设置成1</span><br>binar <span class=\"hljs-string\">|  (1&lt;&lt;n) </span><br><br><span class=\"hljs-comment\">// 把binar的二进制数，第n+1位设置成0</span><br>binar <span class=\"hljs-meta\">&amp;^ (1 &lt;&lt; n) </span><br><br><span class=\"hljs-comment\">// 在Go中实际使用,如需改变原数,可直接使用如下形式</span><br>binar <span class=\"hljs-string\">|=  (1&lt;&lt;n) </span><br>binar <span class=\"hljs-meta\">&amp;= ^(1 &lt;&lt; n) </span><br></code></pre></td></tr></table></figure>"},{"title":"去除windows脚本cmd小黑框","date":"2020-03-17T08:45:00.000Z","_content":"\n去除windows bat或cmd命令的小黑框\n1. 新建文件保存为run.vbs,example.cmd 是要执行的脚本\n\n```\nSet ws = CreateObject(\"Wscript.Shell\")    \nws.run \"cmd /c C:\\IIMS\\serverscmd\\example.cmd\",0\n```\n\n参考： weixin_30723433老哥\n\n2. 不适用vb，调用脚本，在脚本中直接指定\n\n```\n//autoStart.bat\n@echo off \nif \"%1\" == \"h\" goto begin \nmshta vbscript:createobject(\"wscript.shell\").run(\"\"\"%~nx0\"\" h\",0)(window.close)&&exit \n:begin \n//上面是添加隐藏黑框框的\n//下面放自己脚本需要执行的命令\n```\n\nps:这种在脚本中直接关闭黑框的方法，如果启动多个程序的时候，就会提示脚本错误。（注意点自己的需求就好）\n\n参考： weixin_30648587老哥","source":"_posts/去除windows脚本cmd小黑框.md","raw":"---\ntitle: 去除windows脚本cmd小黑框\ndate: 2020-03-17 16:45:00\ntags:\n- Windows\ncategories:\n- 学习【资料整理记录】\n---\n\n去除windows bat或cmd命令的小黑框\n1. 新建文件保存为run.vbs,example.cmd 是要执行的脚本\n\n```\nSet ws = CreateObject(\"Wscript.Shell\")    \nws.run \"cmd /c C:\\IIMS\\serverscmd\\example.cmd\",0\n```\n\n参考： weixin_30723433老哥\n\n2. 不适用vb，调用脚本，在脚本中直接指定\n\n```\n//autoStart.bat\n@echo off \nif \"%1\" == \"h\" goto begin \nmshta vbscript:createobject(\"wscript.shell\").run(\"\"\"%~nx0\"\" h\",0)(window.close)&&exit \n:begin \n//上面是添加隐藏黑框框的\n//下面放自己脚本需要执行的命令\n```\n\nps:这种在脚本中直接关闭黑框的方法，如果启动多个程序的时候，就会提示脚本错误。（注意点自己的需求就好）\n\n参考： weixin_30648587老哥","slug":"去除windows脚本cmd小黑框","published":1,"updated":"2022-09-13T09:22:12.000Z","_id":"cl7zz0odu0019hspv1eryhgct","comments":1,"layout":"post","photos":[],"link":"","content":"<p>去除windows bat或cmd命令的小黑框</p>\n<ol>\n<li>新建文件保存为run.vbs,example.cmd 是要执行的脚本</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">Set</span> ws = CreateObject(<span class=\"hljs-string\">&quot;Wscript.Shell&quot;</span>)    <br>ws.<span class=\"hljs-built_in\">run</span> <span class=\"hljs-string\">&quot;cmd /c C:\\IIMS\\serverscmd\\example.cmd&quot;</span>,0<br></code></pre></td></tr></table></figure>\n\n<p>参考： weixin_30723433老哥</p>\n<ol start=\"2\">\n<li>不适用vb，调用脚本，在脚本中直接指定</li>\n</ol>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">//autoStart.bat</span><br><span class=\"hljs-variable\">@echo</span> off <br>if <span class=\"hljs-string\">&quot;%1&quot;</span> == <span class=\"hljs-string\">&quot;h&quot;</span> goto begin <br>mshta <span class=\"hljs-attribute\">vbscript</span>:<span class=\"hljs-built_in\">createobject</span>(<span class=\"hljs-string\">&quot;wscript.shell&quot;</span>).<span class=\"hljs-built_in\">run</span>(<span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-string\">&quot;%~nx0&quot;</span><span class=\"hljs-string\">&quot; h&quot;</span>,<span class=\"hljs-number\">0</span>)(window.close)&amp;&amp;<span class=\"hljs-attribute\">exit </span><br><span class=\"hljs-attribute\"></span>:begin <br><span class=\"hljs-comment\">//上面是添加隐藏黑框框的</span><br><span class=\"hljs-comment\">//下面放自己脚本需要执行的命令</span><br></code></pre></td></tr></table></figure>\n\n<p>ps:这种在脚本中直接关闭黑框的方法，如果启动多个程序的时候，就会提示脚本错误。（注意点自己的需求就好）</p>\n<p>参考： weixin_30648587老哥</p>\n","site":{"data":{}},"wordcount":504,"excerpt":"","more":"<p>去除windows bat或cmd命令的小黑框</p>\n<ol>\n<li>新建文件保存为run.vbs,example.cmd 是要执行的脚本</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">Set</span> ws = CreateObject(<span class=\"hljs-string\">&quot;Wscript.Shell&quot;</span>)    <br>ws.<span class=\"hljs-built_in\">run</span> <span class=\"hljs-string\">&quot;cmd /c C:\\IIMS\\serverscmd\\example.cmd&quot;</span>,0<br></code></pre></td></tr></table></figure>\n\n<p>参考： weixin_30723433老哥</p>\n<ol start=\"2\">\n<li>不适用vb，调用脚本，在脚本中直接指定</li>\n</ol>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">//autoStart.bat</span><br><span class=\"hljs-variable\">@echo</span> off <br>if <span class=\"hljs-string\">&quot;%1&quot;</span> == <span class=\"hljs-string\">&quot;h&quot;</span> goto begin <br>mshta <span class=\"hljs-attribute\">vbscript</span>:<span class=\"hljs-built_in\">createobject</span>(<span class=\"hljs-string\">&quot;wscript.shell&quot;</span>).<span class=\"hljs-built_in\">run</span>(<span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-string\">&quot;%~nx0&quot;</span><span class=\"hljs-string\">&quot; h&quot;</span>,<span class=\"hljs-number\">0</span>)(window.close)&amp;&amp;<span class=\"hljs-attribute\">exit </span><br><span class=\"hljs-attribute\"></span>:begin <br><span class=\"hljs-comment\">//上面是添加隐藏黑框框的</span><br><span class=\"hljs-comment\">//下面放自己脚本需要执行的命令</span><br></code></pre></td></tr></table></figure>\n\n<p>ps:这种在脚本中直接关闭黑框的方法，如果启动多个程序的时候，就会提示脚本错误。（注意点自己的需求就好）</p>\n<p>参考： weixin_30648587老哥</p>\n"},{"title":"网站标签页如何添加左边的小图标","date":"2019-02-28T08:45:00.000Z","_content":"\n一、首先需要制作一个ico小图标\n\n可以去阿里云矢量图库，找一张自己喜欢的图标（图标大小：128x128）链接：https://www.iconfont.cn/\n\n下载的格式推荐png，可以在线转换.ico格式。在线转换地址：http://www.favicon-icon-generator.com/?tdsourcetag=s_pcqq_aiomsg\nps：下载好后的图片可以重命名，但是后缀名千万不能改，不然就不能用了…\n\n二、需要将制作好的ico小图标放到项目的根目录下\n\n三、需要在要显示图标的页面，head标签中加入\n\n```<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"pig.ico\" />```\n\n保存文件，重新打开页面就好了\n\n四、如果需要发布到服务器上，直接使用文件传输工具上传就可以了\n\nps：上传文件之后访问，如果不显示的话，就重启一下服务再试试。","source":"_posts/网站标签页如何添加左边的小图标.md","raw":"---\ntitle: 网站标签页如何添加左边的小图标\ndate: 2019-02-28 16:45:00\ntags:\n- Html\ncategories:\n- 学习【资料整理记录】\n---\n\n一、首先需要制作一个ico小图标\n\n可以去阿里云矢量图库，找一张自己喜欢的图标（图标大小：128x128）链接：https://www.iconfont.cn/\n\n下载的格式推荐png，可以在线转换.ico格式。在线转换地址：http://www.favicon-icon-generator.com/?tdsourcetag=s_pcqq_aiomsg\nps：下载好后的图片可以重命名，但是后缀名千万不能改，不然就不能用了…\n\n二、需要将制作好的ico小图标放到项目的根目录下\n\n三、需要在要显示图标的页面，head标签中加入\n\n```<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"pig.ico\" />```\n\n保存文件，重新打开页面就好了\n\n四、如果需要发布到服务器上，直接使用文件传输工具上传就可以了\n\nps：上传文件之后访问，如果不显示的话，就重启一下服务再试试。","slug":"网站标签页如何添加左边的小图标","published":1,"updated":"2022-09-13T09:23:45.000Z","_id":"cl7zz0odv001dhspv9ggc5fth","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一、首先需要制作一个ico小图标</p>\n<p>可以去阿里云矢量图库，找一张自己喜欢的图标（图标大小：128x128）链接：<a href=\"https://www.iconfont.cn/\">https://www.iconfont.cn/</a></p>\n<p>下载的格式推荐png，可以在线转换.ico格式。在线转换地址：<a href=\"http://www.favicon-icon-generator.com/?tdsourcetag=s_pcqq_aiomsg\">http://www.favicon-icon-generator.com/?tdsourcetag=s_pcqq_aiomsg</a><br>ps：下载好后的图片可以重命名，但是后缀名千万不能改，不然就不能用了…</p>\n<p>二、需要将制作好的ico小图标放到项目的根目录下</p>\n<p>三、需要在要显示图标的页面，head标签中加入</p>\n<p><code>&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;pig.ico&quot; /&gt;</code></p>\n<p>保存文件，重新打开页面就好了</p>\n<p>四、如果需要发布到服务器上，直接使用文件传输工具上传就可以了</p>\n<p>ps：上传文件之后访问，如果不显示的话，就重启一下服务再试试。</p>\n","site":{"data":{}},"wordcount":424,"excerpt":"","more":"<p>一、首先需要制作一个ico小图标</p>\n<p>可以去阿里云矢量图库，找一张自己喜欢的图标（图标大小：128x128）链接：<a href=\"https://www.iconfont.cn/\">https://www.iconfont.cn/</a></p>\n<p>下载的格式推荐png，可以在线转换.ico格式。在线转换地址：<a href=\"http://www.favicon-icon-generator.com/?tdsourcetag=s_pcqq_aiomsg\">http://www.favicon-icon-generator.com/?tdsourcetag=s_pcqq_aiomsg</a><br>ps：下载好后的图片可以重命名，但是后缀名千万不能改，不然就不能用了…</p>\n<p>二、需要将制作好的ico小图标放到项目的根目录下</p>\n<p>三、需要在要显示图标的页面，head标签中加入</p>\n<p><code>&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;pig.ico&quot; /&gt;</code></p>\n<p>保存文件，重新打开页面就好了</p>\n<p>四、如果需要发布到服务器上，直接使用文件传输工具上传就可以了</p>\n<p>ps：上传文件之后访问，如果不显示的话，就重启一下服务再试试。</p>\n"},{"title":"用Go在windows编译linux可执行文件","date":"2019-12-01T08:45:00.000Z","_content":"\n用Go在windows编译linux可执行文件\n\n一、配置好windows下的Go环境\n\t```GOPATH   GOROOT```\n\t\n二、进入CMD命令窗口\n```\nSET GOARCH=amd64\nSET\tGOOS=linux\n```\n注意： “=”两边不要留空格，否则会修改参数失败，编译出来的还是window下的可执行文件。具体原因我也不清楚，不加空格就对了。\n\n三、编译文件\n\t```go build XXX.go```","source":"_posts/用Go在windows编译linux可执行文件.md","raw":"---\ntitle: 用Go在windows编译linux可执行文件\ndate: 2019-12-01 16:45:00\ntags:\n- Go\n- Windows\n- Linux\ncategories:\n- 学习【资料整理记录】\n---\n\n用Go在windows编译linux可执行文件\n\n一、配置好windows下的Go环境\n\t```GOPATH   GOROOT```\n\t\n二、进入CMD命令窗口\n```\nSET GOARCH=amd64\nSET\tGOOS=linux\n```\n注意： “=”两边不要留空格，否则会修改参数失败，编译出来的还是window下的可执行文件。具体原因我也不清楚，不加空格就对了。\n\n三、编译文件\n\t```go build XXX.go```","slug":"用Go在windows编译linux可执行文件","published":1,"updated":"2022-09-13T09:25:57.000Z","_id":"cl7zz0oe4001ghspv4hw3azb9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>用Go在windows编译linux可执行文件</p>\n<p>一、配置好windows下的Go环境<br>    <code>GOPATH   GOROOT</code></p>\n<p>二、进入CMD命令窗口</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">SET</span> <span class=\"hljs-attribute\">GOARCH</span>=amd64<br><span class=\"hljs-built_in\">SET</span>\t<span class=\"hljs-attribute\">GOOS</span>=linux<br></code></pre></td></tr></table></figure>\n<p>注意： “=”两边不要留空格，否则会修改参数失败，编译出来的还是window下的可执行文件。具体原因我也不清楚，不加空格就对了。</p>\n<p>三、编译文件<br>    <code>go build XXX.go</code></p>\n","site":{"data":{}},"wordcount":176,"excerpt":"","more":"<p>用Go在windows编译linux可执行文件</p>\n<p>一、配置好windows下的Go环境<br>    <code>GOPATH   GOROOT</code></p>\n<p>二、进入CMD命令窗口</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">SET</span> <span class=\"hljs-attribute\">GOARCH</span>=amd64<br><span class=\"hljs-built_in\">SET</span>\t<span class=\"hljs-attribute\">GOOS</span>=linux<br></code></pre></td></tr></table></figure>\n<p>注意： “=”两边不要留空格，否则会修改参数失败，编译出来的还是window下的可执行文件。具体原因我也不清楚，不加空格就对了。</p>\n<p>三、编译文件<br>    <code>go build XXX.go</code></p>\n"},{"title":"maven的安装","date":"2019-12-01T08:45:00.000Z","_content":"\n- 下载maven\n先去官网下载maven的压缩包文件\nhttp://maven.apache.org/download.cgi\n\n下载到本地之后，直接解压到目录文件中即可，然后配置maven的环境变量，这里就不多说了\n\n然后DOS命令执行\n\n```mvn -v```\n\n显示下边的信息就证明maven安装好了","source":"_posts/maven的安装.md","raw":"---\ntitle: maven的安装\ndate: 2019-12-01 16:45:00\ntags:\n- Maven\ncategories:\n- 学习【资料整理记录】\n---\n\n- 下载maven\n先去官网下载maven的压缩包文件\nhttp://maven.apache.org/download.cgi\n\n下载到本地之后，直接解压到目录文件中即可，然后配置maven的环境变量，这里就不多说了\n\n然后DOS命令执行\n\n```mvn -v```\n\n显示下边的信息就证明maven安装好了","slug":"maven的安装","published":1,"updated":"2022-09-13T09:37:45.000Z","_id":"cl7zz0oes001mhspvc42m8quv","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>下载maven<br>先去官网下载maven的压缩包文件<br><a href=\"http://maven.apache.org/download.cgi\">http://maven.apache.org/download.cgi</a></li>\n</ul>\n<p>下载到本地之后，直接解压到目录文件中即可，然后配置maven的环境变量，这里就不多说了</p>\n<p>然后DOS命令执行</p>\n<p><code>mvn -v</code></p>\n<p>显示下边的信息就证明maven安装好了</p>\n","site":{"data":{}},"wordcount":136,"excerpt":"","more":"<ul>\n<li>下载maven<br>先去官网下载maven的压缩包文件<br><a href=\"http://maven.apache.org/download.cgi\">http://maven.apache.org/download.cgi</a></li>\n</ul>\n<p>下载到本地之后，直接解压到目录文件中即可，然后配置maven的环境变量，这里就不多说了</p>\n<p>然后DOS命令执行</p>\n<p><code>mvn -v</code></p>\n<p>显示下边的信息就证明maven安装好了</p>\n"},{"title":"数据结构与算法基础","date":"2022-09-15T03:36:00.000Z","_content":"\n### 数据结构与算法基础\n\n- 数组与矩阵\n- <font color=red>线性表（栈、队列）</font>\n- 广义表\n- <font color=red>树和二叉树</font>\n- 图\n- <font color=red>排序与查找</font>\n- <font color=red>算法基础及常见的算法</font>\n\n### 数组\n\n- 一维数组\n- 二维数组：按行存储，按列存储\n- 多维数组\n\n### 稀疏矩阵\n\n- 选择题，可使用代入法\n\n\n\n### 数据结构","source":"_posts/2022-09-14-数据结构与算法基础.md","raw":"---\ntitle: 数据结构与算法基础\ndate: 2022-09-15 11:36:00\ntags:\n- 软件设计师【软考】\n- 数据结构\n- 算法\ncategories:\n- 学习【资料整理记录】\n\n---\n\n### 数据结构与算法基础\n\n- 数组与矩阵\n- <font color=red>线性表（栈、队列）</font>\n- 广义表\n- <font color=red>树和二叉树</font>\n- 图\n- <font color=red>排序与查找</font>\n- <font color=red>算法基础及常见的算法</font>\n\n### 数组\n\n- 一维数组\n- 二维数组：按行存储，按列存储\n- 多维数组\n\n### 稀疏矩阵\n\n- 选择题，可使用代入法\n\n\n\n### 数据结构","slug":"2022-09-14-数据结构与算法基础","published":1,"updated":"2022-09-15T03:36:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82i5bqo0000mppvbuec2aaw","content":"<h3 id=\"数据结构与算法基础\"><a href=\"#数据结构与算法基础\" class=\"headerlink\" title=\"数据结构与算法基础\"></a>数据结构与算法基础</h3><ul>\n<li>数组与矩阵</li>\n<li><font color=red>线性表（栈、队列）</font></li>\n<li>广义表</li>\n<li><font color=red>树和二叉树</font></li>\n<li>图</li>\n<li><font color=red>排序与查找</font></li>\n<li><font color=red>算法基础及常见的算法</font></li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li>一维数组</li>\n<li>二维数组：按行存储，按列存储</li>\n<li>多维数组</li>\n</ul>\n<h3 id=\"稀疏矩阵\"><a href=\"#稀疏矩阵\" class=\"headerlink\" title=\"稀疏矩阵\"></a>稀疏矩阵</h3><ul>\n<li>选择题，可使用代入法</li>\n</ul>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3>","site":{"data":{}},"wordcount":89,"excerpt":"","more":"<h3 id=\"数据结构与算法基础\"><a href=\"#数据结构与算法基础\" class=\"headerlink\" title=\"数据结构与算法基础\"></a>数据结构与算法基础</h3><ul>\n<li>数组与矩阵</li>\n<li><font color=red>线性表（栈、队列）</font></li>\n<li>广义表</li>\n<li><font color=red>树和二叉树</font></li>\n<li>图</li>\n<li><font color=red>排序与查找</font></li>\n<li><font color=red>算法基础及常见的算法</font></li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li>一维数组</li>\n<li>二维数组：按行存储，按列存储</li>\n<li>多维数组</li>\n</ul>\n<h3 id=\"稀疏矩阵\"><a href=\"#稀疏矩阵\" class=\"headerlink\" title=\"稀疏矩阵\"></a>稀疏矩阵</h3><ul>\n<li>选择题，可使用代入法</li>\n</ul>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3>"},{"title":"系统安全分析与设计","date":"2022-09-14T03:39:00.000Z","_content":"### 信息系统安全属性\n\n- 保密性：最小授权原则、防暴露、信息加密、物理保密\n- 完整性：安全协议、校验码、密码校验、数字签名、公证\n- 可用性：综合保障（IP过滤、业务流控制、路由选择控制、审计跟踪）\n- 不可抵赖性：数字签名\n\n### 非对称加密技术\n\n优点：安全，不易破解\n\n缺点：计算量大，不适合传递大数据，加密速度慢\n\n- RSA:512位（或者1024位）密钥、计算量大、难破解\n- ECC：椭圆曲线算法\n- Elgamal:\n- 背包算法、Rabin、D-H\n\n### 对称加密技术\n\n优点：计算量小，速度快\n\n缺点：不安全\n\n- DES：替换+移位、56位密钥、64位数据块、速度快、密钥易产生\n\n  3DES（三重DES）：两个56位的密钥K1/K2\n\n  加密：K1加密->K2解密->K1加密\n\n  解密：K1解密->K2加密->K1解密\n\n- AES\n\n- RC-5\n\n- IDEA算法\n\n### 信息摘要\n\n- 写论文时使用，有论文摘要\n\n- 单向散列（Hash）函数、固定长度的散列值\n\n- MD5\n\n- SHA:使用密钥较长，比MD5安全一丢丢\n\n  一般用于校验文件的完整性\n\n### 数字签名\n\n- A发送B\n\n  A的数字签名：A签名（相当于私钥加密）->B签名验证（相当于使用A的公钥解密）\n\n  结合信息摘要使用，仅签名信息摘要\n\n### 数字信封与PGP\n\n- 数字信封：\n\n  发送方将原文用对称密钥加密传输，而将对称密钥用接收方公钥加密发送给对方。\n\n  接收方收到电子信封，用自己的私钥解密信封，去除对称密钥解密得原文。\n\n- 数字证书（类似身份证，唯一标识）：\n\n  为了在非对称加密的时候，获取对方公钥时，防止被他人截获更改公钥数据，导致传递数据不一致\n\n### 网络安全-各个网络层次的安全保障\n\n- Http(明文传输) Https(密文传输 Http+SSL)\n- 物理层：隔离、屏蔽\n- 数据链路层：链路加密、PPTP、L2TP\n- 网络层：防火墙、IPSec\n- 传输层：SSL/TLS/SET\n- 会话层、表示层、应用层：PGP（邮件/文件加密）、Https\n\n### 网络安全-网络威胁与攻击（1）\n\n- 重放攻击（ARP）\n- 拒绝服务（DOS）\n- 窃听：\n- 业务流分析：长期\n- 信息泄漏\n- 破坏完整性\n- 非授权访问\n\n### 网络安全-网络威胁与攻击（2）\n\n- 假冒\n- 旁路控制\n- 授权侵犯\n- 特洛伊木马\n- 陷阱门\n- 抵赖\n\n### 网络安全-防火墙\n\n- 网络级：包过滤、状态校验\n- 应用级：双穴主机、屏蔽主机、屏蔽子网\n\n","source":"_posts/2022-09-14-系统安全分析与设计.md","raw":"---\ntitle: 系统安全分析与设计\ndate: 2022-09-14 11:39:00\ntags:\n- 软件设计师【软考】\n- 系统安全分析与设计\ncategories:\n- 学习【资料整理记录】\n---\n### 信息系统安全属性\n\n- 保密性：最小授权原则、防暴露、信息加密、物理保密\n- 完整性：安全协议、校验码、密码校验、数字签名、公证\n- 可用性：综合保障（IP过滤、业务流控制、路由选择控制、审计跟踪）\n- 不可抵赖性：数字签名\n\n### 非对称加密技术\n\n优点：安全，不易破解\n\n缺点：计算量大，不适合传递大数据，加密速度慢\n\n- RSA:512位（或者1024位）密钥、计算量大、难破解\n- ECC：椭圆曲线算法\n- Elgamal:\n- 背包算法、Rabin、D-H\n\n### 对称加密技术\n\n优点：计算量小，速度快\n\n缺点：不安全\n\n- DES：替换+移位、56位密钥、64位数据块、速度快、密钥易产生\n\n  3DES（三重DES）：两个56位的密钥K1/K2\n\n  加密：K1加密->K2解密->K1加密\n\n  解密：K1解密->K2加密->K1解密\n\n- AES\n\n- RC-5\n\n- IDEA算法\n\n### 信息摘要\n\n- 写论文时使用，有论文摘要\n\n- 单向散列（Hash）函数、固定长度的散列值\n\n- MD5\n\n- SHA:使用密钥较长，比MD5安全一丢丢\n\n  一般用于校验文件的完整性\n\n### 数字签名\n\n- A发送B\n\n  A的数字签名：A签名（相当于私钥加密）->B签名验证（相当于使用A的公钥解密）\n\n  结合信息摘要使用，仅签名信息摘要\n\n### 数字信封与PGP\n\n- 数字信封：\n\n  发送方将原文用对称密钥加密传输，而将对称密钥用接收方公钥加密发送给对方。\n\n  接收方收到电子信封，用自己的私钥解密信封，去除对称密钥解密得原文。\n\n- 数字证书（类似身份证，唯一标识）：\n\n  为了在非对称加密的时候，获取对方公钥时，防止被他人截获更改公钥数据，导致传递数据不一致\n\n### 网络安全-各个网络层次的安全保障\n\n- Http(明文传输) Https(密文传输 Http+SSL)\n- 物理层：隔离、屏蔽\n- 数据链路层：链路加密、PPTP、L2TP\n- 网络层：防火墙、IPSec\n- 传输层：SSL/TLS/SET\n- 会话层、表示层、应用层：PGP（邮件/文件加密）、Https\n\n### 网络安全-网络威胁与攻击（1）\n\n- 重放攻击（ARP）\n- 拒绝服务（DOS）\n- 窃听：\n- 业务流分析：长期\n- 信息泄漏\n- 破坏完整性\n- 非授权访问\n\n### 网络安全-网络威胁与攻击（2）\n\n- 假冒\n- 旁路控制\n- 授权侵犯\n- 特洛伊木马\n- 陷阱门\n- 抵赖\n\n### 网络安全-防火墙\n\n- 网络级：包过滤、状态校验\n- 应用级：双穴主机、屏蔽主机、屏蔽子网\n\n","slug":"2022-09-14-系统安全分析与设计","published":1,"updated":"2022-09-15T03:08:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82i5bqu0001mppvfdu9g0q7","content":"<h3 id=\"信息系统安全属性\"><a href=\"#信息系统安全属性\" class=\"headerlink\" title=\"信息系统安全属性\"></a>信息系统安全属性</h3><ul>\n<li>保密性：最小授权原则、防暴露、信息加密、物理保密</li>\n<li>完整性：安全协议、校验码、密码校验、数字签名、公证</li>\n<li>可用性：综合保障（IP过滤、业务流控制、路由选择控制、审计跟踪）</li>\n<li>不可抵赖性：数字签名</li>\n</ul>\n<h3 id=\"非对称加密技术\"><a href=\"#非对称加密技术\" class=\"headerlink\" title=\"非对称加密技术\"></a>非对称加密技术</h3><p>优点：安全，不易破解</p>\n<p>缺点：计算量大，不适合传递大数据，加密速度慢</p>\n<ul>\n<li>RSA:512位（或者1024位）密钥、计算量大、难破解</li>\n<li>ECC：椭圆曲线算法</li>\n<li>Elgamal:</li>\n<li>背包算法、Rabin、D-H</li>\n</ul>\n<h3 id=\"对称加密技术\"><a href=\"#对称加密技术\" class=\"headerlink\" title=\"对称加密技术\"></a>对称加密技术</h3><p>优点：计算量小，速度快</p>\n<p>缺点：不安全</p>\n<ul>\n<li><p>DES：替换+移位、56位密钥、64位数据块、速度快、密钥易产生</p>\n<p>3DES（三重DES）：两个56位的密钥K1/K2</p>\n<p>加密：K1加密-&gt;K2解密-&gt;K1加密</p>\n<p>解密：K1解密-&gt;K2加密-&gt;K1解密</p>\n</li>\n<li><p>AES</p>\n</li>\n<li><p>RC-5</p>\n</li>\n<li><p>IDEA算法</p>\n</li>\n</ul>\n<h3 id=\"信息摘要\"><a href=\"#信息摘要\" class=\"headerlink\" title=\"信息摘要\"></a>信息摘要</h3><ul>\n<li><p>写论文时使用，有论文摘要</p>\n</li>\n<li><p>单向散列（Hash）函数、固定长度的散列值</p>\n</li>\n<li><p>MD5</p>\n</li>\n<li><p>SHA:使用密钥较长，比MD5安全一丢丢</p>\n<p>一般用于校验文件的完整性</p>\n</li>\n</ul>\n<h3 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h3><ul>\n<li><p>A发送B</p>\n<p>A的数字签名：A签名（相当于私钥加密）-&gt;B签名验证（相当于使用A的公钥解密）</p>\n<p>结合信息摘要使用，仅签名信息摘要</p>\n</li>\n</ul>\n<h3 id=\"数字信封与PGP\"><a href=\"#数字信封与PGP\" class=\"headerlink\" title=\"数字信封与PGP\"></a>数字信封与PGP</h3><ul>\n<li><p>数字信封：</p>\n<p>发送方将原文用对称密钥加密传输，而将对称密钥用接收方公钥加密发送给对方。</p>\n<p>接收方收到电子信封，用自己的私钥解密信封，去除对称密钥解密得原文。</p>\n</li>\n<li><p>数字证书（类似身份证，唯一标识）：</p>\n<p>为了在非对称加密的时候，获取对方公钥时，防止被他人截获更改公钥数据，导致传递数据不一致</p>\n</li>\n</ul>\n<h3 id=\"网络安全-各个网络层次的安全保障\"><a href=\"#网络安全-各个网络层次的安全保障\" class=\"headerlink\" title=\"网络安全-各个网络层次的安全保障\"></a>网络安全-各个网络层次的安全保障</h3><ul>\n<li>Http(明文传输) Https(密文传输 Http+SSL)</li>\n<li>物理层：隔离、屏蔽</li>\n<li>数据链路层：链路加密、PPTP、L2TP</li>\n<li>网络层：防火墙、IPSec</li>\n<li>传输层：SSL/TLS/SET</li>\n<li>会话层、表示层、应用层：PGP（邮件/文件加密）、Https</li>\n</ul>\n<h3 id=\"网络安全-网络威胁与攻击（1）\"><a href=\"#网络安全-网络威胁与攻击（1）\" class=\"headerlink\" title=\"网络安全-网络威胁与攻击（1）\"></a>网络安全-网络威胁与攻击（1）</h3><ul>\n<li>重放攻击（ARP）</li>\n<li>拒绝服务（DOS）</li>\n<li>窃听：</li>\n<li>业务流分析：长期</li>\n<li>信息泄漏</li>\n<li>破坏完整性</li>\n<li>非授权访问</li>\n</ul>\n<h3 id=\"网络安全-网络威胁与攻击（2）\"><a href=\"#网络安全-网络威胁与攻击（2）\" class=\"headerlink\" title=\"网络安全-网络威胁与攻击（2）\"></a>网络安全-网络威胁与攻击（2）</h3><ul>\n<li>假冒</li>\n<li>旁路控制</li>\n<li>授权侵犯</li>\n<li>特洛伊木马</li>\n<li>陷阱门</li>\n<li>抵赖</li>\n</ul>\n<h3 id=\"网络安全-防火墙\"><a href=\"#网络安全-防火墙\" class=\"headerlink\" title=\"网络安全-防火墙\"></a>网络安全-防火墙</h3><ul>\n<li>网络级：包过滤、状态校验</li>\n<li>应用级：双穴主机、屏蔽主机、屏蔽子网</li>\n</ul>\n","site":{"data":{}},"wordcount":884,"excerpt":"","more":"<h3 id=\"信息系统安全属性\"><a href=\"#信息系统安全属性\" class=\"headerlink\" title=\"信息系统安全属性\"></a>信息系统安全属性</h3><ul>\n<li>保密性：最小授权原则、防暴露、信息加密、物理保密</li>\n<li>完整性：安全协议、校验码、密码校验、数字签名、公证</li>\n<li>可用性：综合保障（IP过滤、业务流控制、路由选择控制、审计跟踪）</li>\n<li>不可抵赖性：数字签名</li>\n</ul>\n<h3 id=\"非对称加密技术\"><a href=\"#非对称加密技术\" class=\"headerlink\" title=\"非对称加密技术\"></a>非对称加密技术</h3><p>优点：安全，不易破解</p>\n<p>缺点：计算量大，不适合传递大数据，加密速度慢</p>\n<ul>\n<li>RSA:512位（或者1024位）密钥、计算量大、难破解</li>\n<li>ECC：椭圆曲线算法</li>\n<li>Elgamal:</li>\n<li>背包算法、Rabin、D-H</li>\n</ul>\n<h3 id=\"对称加密技术\"><a href=\"#对称加密技术\" class=\"headerlink\" title=\"对称加密技术\"></a>对称加密技术</h3><p>优点：计算量小，速度快</p>\n<p>缺点：不安全</p>\n<ul>\n<li><p>DES：替换+移位、56位密钥、64位数据块、速度快、密钥易产生</p>\n<p>3DES（三重DES）：两个56位的密钥K1/K2</p>\n<p>加密：K1加密-&gt;K2解密-&gt;K1加密</p>\n<p>解密：K1解密-&gt;K2加密-&gt;K1解密</p>\n</li>\n<li><p>AES</p>\n</li>\n<li><p>RC-5</p>\n</li>\n<li><p>IDEA算法</p>\n</li>\n</ul>\n<h3 id=\"信息摘要\"><a href=\"#信息摘要\" class=\"headerlink\" title=\"信息摘要\"></a>信息摘要</h3><ul>\n<li><p>写论文时使用，有论文摘要</p>\n</li>\n<li><p>单向散列（Hash）函数、固定长度的散列值</p>\n</li>\n<li><p>MD5</p>\n</li>\n<li><p>SHA:使用密钥较长，比MD5安全一丢丢</p>\n<p>一般用于校验文件的完整性</p>\n</li>\n</ul>\n<h3 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h3><ul>\n<li><p>A发送B</p>\n<p>A的数字签名：A签名（相当于私钥加密）-&gt;B签名验证（相当于使用A的公钥解密）</p>\n<p>结合信息摘要使用，仅签名信息摘要</p>\n</li>\n</ul>\n<h3 id=\"数字信封与PGP\"><a href=\"#数字信封与PGP\" class=\"headerlink\" title=\"数字信封与PGP\"></a>数字信封与PGP</h3><ul>\n<li><p>数字信封：</p>\n<p>发送方将原文用对称密钥加密传输，而将对称密钥用接收方公钥加密发送给对方。</p>\n<p>接收方收到电子信封，用自己的私钥解密信封，去除对称密钥解密得原文。</p>\n</li>\n<li><p>数字证书（类似身份证，唯一标识）：</p>\n<p>为了在非对称加密的时候，获取对方公钥时，防止被他人截获更改公钥数据，导致传递数据不一致</p>\n</li>\n</ul>\n<h3 id=\"网络安全-各个网络层次的安全保障\"><a href=\"#网络安全-各个网络层次的安全保障\" class=\"headerlink\" title=\"网络安全-各个网络层次的安全保障\"></a>网络安全-各个网络层次的安全保障</h3><ul>\n<li>Http(明文传输) Https(密文传输 Http+SSL)</li>\n<li>物理层：隔离、屏蔽</li>\n<li>数据链路层：链路加密、PPTP、L2TP</li>\n<li>网络层：防火墙、IPSec</li>\n<li>传输层：SSL/TLS/SET</li>\n<li>会话层、表示层、应用层：PGP（邮件/文件加密）、Https</li>\n</ul>\n<h3 id=\"网络安全-网络威胁与攻击（1）\"><a href=\"#网络安全-网络威胁与攻击（1）\" class=\"headerlink\" title=\"网络安全-网络威胁与攻击（1）\"></a>网络安全-网络威胁与攻击（1）</h3><ul>\n<li>重放攻击（ARP）</li>\n<li>拒绝服务（DOS）</li>\n<li>窃听：</li>\n<li>业务流分析：长期</li>\n<li>信息泄漏</li>\n<li>破坏完整性</li>\n<li>非授权访问</li>\n</ul>\n<h3 id=\"网络安全-网络威胁与攻击（2）\"><a href=\"#网络安全-网络威胁与攻击（2）\" class=\"headerlink\" title=\"网络安全-网络威胁与攻击（2）\"></a>网络安全-网络威胁与攻击（2）</h3><ul>\n<li>假冒</li>\n<li>旁路控制</li>\n<li>授权侵犯</li>\n<li>特洛伊木马</li>\n<li>陷阱门</li>\n<li>抵赖</li>\n</ul>\n<h3 id=\"网络安全-防火墙\"><a href=\"#网络安全-防火墙\" class=\"headerlink\" title=\"网络安全-防火墙\"></a>网络安全-防火墙</h3><ul>\n<li>网络级：包过滤、状态校验</li>\n<li>应用级：双穴主机、屏蔽主机、屏蔽子网</li>\n</ul>\n"},{"title":"计算机网络","date":"2022-09-14T02:42:00.000Z","_content":"\n### IP地址与子网划分\n\n1. A类 B类 C类 D类\n\n```\n0.0.0.0 \n00000000 00000000 0000000 00000000\n255.255.255.255\n11111111 11111111 11111111 11111111\n```\nA类 首位标志位\t0-127\nB类 前两位标志位\t127-191\nC类 前三位标志位\t192-223\nD类 前四位标志位\t224-239\n\n2. 子网划分\n\n\t- 子网掩码\n\t- 将一个网络划分成多个子网\n\nIP地址 ：：={<网络前缀>,<主机>}\n127.14.21.0/20\n\n### 特殊含义的IP地址\n\n- 127网段（回播地址）\n\n- 网络号全0地址（当前子网中的地址）\n\n- 全1地址（本地子网的广播）\n\n- 主机号全1地址（特定子网的广播）\n\n- 10.0.0.1至10.255.255.254\n\n  172.16.0.1至172.31.255.254\n\n  192.168.0.1至192.168.255.254（局域网IP）\n\n- 169.254.0.0（保留地址，用于DHCP失效 win）\n\n- 0.0.0.0（保留地址，用于DHCP失效 linux）\n\n### IPv6\n\n为了解决IPv4地址不足问题\n\n1. 单播地址\n2. 任播地址\n3. 组播地址\n\n### 无线网\n\n1. 无线局域网（WLAN,802.11,Wi-Fi）\n2. 无线城域网\n3. 无线广域网（WWAN 3G/4G/5G）\n4. 无线个人网（WPAN 蓝牙）\n\n### 网络接入技术\n\n1. 有线接入（PSTN,DDN,ISDN,ADSL,HFC）\n\n2. 无线接入（WiFi，蓝牙，红外，WAPI）\n\n3. 3G/4G/5G（WCDMA,CDMA2000,TD-SCDMA中国移动）\n\n   LTE 4G 分为TDD时分，FDD频分\n\n### HTML标签\n\n|   <a>    |           锚点           |\n| :------: | :----------------------: |\n|   <b>    |           粗体           |\n|  <body>  |           主体           |\n| <button> |           按钮           |\n| <center> |           居中           |\n|  <col>   | 定义表格一个或多个列属性 |\n|  <font>  |         字体属性         |\n|  <form>  |           表单           |\n| <frame>  |         框架窗口         |\n|   <h1>   |         一级标题         |\n|   <hr>   |          水平线          |\n|  <html>  |         html文档         |\n|  <img>   |           图片           |\n|   <p>    |           段落           |\n| <script> |           脚本           |\n| <strong> |         强调文本         |\n| <table>  |           表格           |\n|   <td>   |         表格单元         |\n|   <tr>   |          表格行          |\n| <title>  |           标题           |","source":"_posts/2022-09-14-计算机网络.md","raw":"---\ntitle: 计算机网络\ndate: 2022-09-14 10:42:00\ntags:\n- 软件设计师【软考】\n- 计算机网络\ncategories:\n- 学习【资料整理记录】\n---\n\n### IP地址与子网划分\n\n1. A类 B类 C类 D类\n\n```\n0.0.0.0 \n00000000 00000000 0000000 00000000\n255.255.255.255\n11111111 11111111 11111111 11111111\n```\nA类 首位标志位\t0-127\nB类 前两位标志位\t127-191\nC类 前三位标志位\t192-223\nD类 前四位标志位\t224-239\n\n2. 子网划分\n\n\t- 子网掩码\n\t- 将一个网络划分成多个子网\n\nIP地址 ：：={<网络前缀>,<主机>}\n127.14.21.0/20\n\n### 特殊含义的IP地址\n\n- 127网段（回播地址）\n\n- 网络号全0地址（当前子网中的地址）\n\n- 全1地址（本地子网的广播）\n\n- 主机号全1地址（特定子网的广播）\n\n- 10.0.0.1至10.255.255.254\n\n  172.16.0.1至172.31.255.254\n\n  192.168.0.1至192.168.255.254（局域网IP）\n\n- 169.254.0.0（保留地址，用于DHCP失效 win）\n\n- 0.0.0.0（保留地址，用于DHCP失效 linux）\n\n### IPv6\n\n为了解决IPv4地址不足问题\n\n1. 单播地址\n2. 任播地址\n3. 组播地址\n\n### 无线网\n\n1. 无线局域网（WLAN,802.11,Wi-Fi）\n2. 无线城域网\n3. 无线广域网（WWAN 3G/4G/5G）\n4. 无线个人网（WPAN 蓝牙）\n\n### 网络接入技术\n\n1. 有线接入（PSTN,DDN,ISDN,ADSL,HFC）\n\n2. 无线接入（WiFi，蓝牙，红外，WAPI）\n\n3. 3G/4G/5G（WCDMA,CDMA2000,TD-SCDMA中国移动）\n\n   LTE 4G 分为TDD时分，FDD频分\n\n### HTML标签\n\n|   <a>    |           锚点           |\n| :------: | :----------------------: |\n|   <b>    |           粗体           |\n|  <body>  |           主体           |\n| <button> |           按钮           |\n| <center> |           居中           |\n|  <col>   | 定义表格一个或多个列属性 |\n|  <font>  |         字体属性         |\n|  <form>  |           表单           |\n| <frame>  |         框架窗口         |\n|   <h1>   |         一级标题         |\n|   <hr>   |          水平线          |\n|  <html>  |         html文档         |\n|  <img>   |           图片           |\n|   <p>    |           段落           |\n| <script> |           脚本           |\n| <strong> |         强调文本         |\n| <table>  |           表格           |\n|   <td>   |         表格单元         |\n|   <tr>   |          表格行          |\n| <title>  |           标题           |","slug":"2022-09-14-计算机网络","published":1,"updated":"2022-09-14T03:49:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82i5br20003mppvc6mlan6c","content":"<h3 id=\"IP地址与子网划分\"><a href=\"#IP地址与子网划分\" class=\"headerlink\" title=\"IP地址与子网划分\"></a>IP地址与子网划分</h3><ol>\n<li>A类 B类 C类 D类</li>\n</ol>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">0.0</span> <br><span class=\"hljs-symbol\">00000000 </span><span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">0000000</span> <span class=\"hljs-number\">00000000</span><br><span class=\"hljs-number\">255.255</span>.<span class=\"hljs-number\">255.255</span><br><span class=\"hljs-symbol\">11111111 </span><span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span><br></code></pre></td></tr></table></figure>\n<p>A类 首位标志位    0-127<br>B类 前两位标志位    127-191<br>C类 前三位标志位    192-223<br>D类 前四位标志位    224-239</p>\n<ol start=\"2\">\n<li><p>子网划分</p>\n<ul>\n<li>子网掩码</li>\n<li>将一个网络划分成多个子网</li>\n</ul>\n</li>\n</ol>\n<p>IP地址 ：：={&lt;网络前缀&gt;,&lt;主机&gt;}<br>127.14.21.0/20</p>\n<h3 id=\"特殊含义的IP地址\"><a href=\"#特殊含义的IP地址\" class=\"headerlink\" title=\"特殊含义的IP地址\"></a>特殊含义的IP地址</h3><ul>\n<li><p>127网段（回播地址）</p>\n</li>\n<li><p>网络号全0地址（当前子网中的地址）</p>\n</li>\n<li><p>全1地址（本地子网的广播）</p>\n</li>\n<li><p>主机号全1地址（特定子网的广播）</p>\n</li>\n<li><p>10.0.0.1至10.255.255.254</p>\n<p>172.16.0.1至172.31.255.254</p>\n<p>192.168.0.1至192.168.255.254（局域网IP）</p>\n</li>\n<li><p>169.254.0.0（保留地址，用于DHCP失效 win）</p>\n</li>\n<li><p>0.0.0.0（保留地址，用于DHCP失效 linux）</p>\n</li>\n</ul>\n<h3 id=\"IPv6\"><a href=\"#IPv6\" class=\"headerlink\" title=\"IPv6\"></a>IPv6</h3><p>为了解决IPv4地址不足问题</p>\n<ol>\n<li>单播地址</li>\n<li>任播地址</li>\n<li>组播地址</li>\n</ol>\n<h3 id=\"无线网\"><a href=\"#无线网\" class=\"headerlink\" title=\"无线网\"></a>无线网</h3><ol>\n<li>无线局域网（WLAN,802.11,Wi-Fi）</li>\n<li>无线城域网</li>\n<li>无线广域网（WWAN 3G/4G/5G）</li>\n<li>无线个人网（WPAN 蓝牙）</li>\n</ol>\n<h3 id=\"网络接入技术\"><a href=\"#网络接入技术\" class=\"headerlink\" title=\"网络接入技术\"></a>网络接入技术</h3><ol>\n<li><p>有线接入（PSTN,DDN,ISDN,ADSL,HFC）</p>\n</li>\n<li><p>无线接入（WiFi，蓝牙，红外，WAPI）</p>\n</li>\n<li><p>3G/4G/5G（WCDMA,CDMA2000,TD-SCDMA中国移动）</p>\n<p>LTE 4G 分为TDD时分，FDD频分</p>\n</li>\n</ol>\n<h3 id=\"HTML标签\"><a href=\"#HTML标签\" class=\"headerlink\" title=\"HTML标签\"></a>HTML标签</h3><table>\n<thead>\n<tr>\n<th align=\"center\"><a></th>\n<th align=\"center\">锚点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><b></td>\n<td align=\"center\">粗体</td>\n</tr>\n<tr>\n<td align=\"center\"><body></td>\n<td align=\"center\">主体</td>\n</tr>\n<tr>\n<td align=\"center\"><button></td>\n<td align=\"center\">按钮</td>\n</tr>\n<tr>\n<td align=\"center\"><center></td>\n<td align=\"center\">居中</td>\n</tr>\n<tr>\n<td align=\"center\"><col></td>\n<td align=\"center\">定义表格一个或多个列属性</td>\n</tr>\n<tr>\n<td align=\"center\"><font></td>\n<td align=\"center\">字体属性</td>\n</tr>\n<tr>\n<td align=\"center\"><form></td>\n<td align=\"center\">表单</td>\n</tr>\n<tr>\n<td align=\"center\"><frame></td>\n<td align=\"center\">框架窗口</td>\n</tr>\n<tr>\n<td align=\"center\"><h1></td>\n<td align=\"center\">一级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><hr></td>\n<td align=\"center\">水平线</td>\n</tr>\n<tr>\n<td align=\"center\"><html></td>\n<td align=\"center\">html文档</td>\n</tr>\n<tr>\n<td align=\"center\"><img></td>\n<td align=\"center\">图片</td>\n</tr>\n<tr>\n<td align=\"center\"><p></td>\n<td align=\"center\">段落</td>\n</tr>\n<tr>\n<td align=\"center\"><script></td>\n<td align=\"center\">脚本</td>\n</tr>\n<tr>\n<td align=\"center\"><strong></td>\n<td align=\"center\">强调文本</td>\n</tr>\n<tr>\n<td align=\"center\"><table></td>\n<td align=\"center\">表格</td>\n</tr>\n<tr>\n<td align=\"center\"><td></td>\n<td align=\"center\">表格单元</td>\n</tr>\n<tr>\n<td align=\"center\"><tr></td>\n<td align=\"center\">表格行</td>\n</tr>\n<tr>\n<td align=\"center\"><title></td>\n<td align=\"center\">标题</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"wordcount":709,"excerpt":"","more":"<h3 id=\"IP地址与子网划分\"><a href=\"#IP地址与子网划分\" class=\"headerlink\" title=\"IP地址与子网划分\"></a>IP地址与子网划分</h3><ol>\n<li>A类 B类 C类 D类</li>\n</ol>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">0.0</span> <br><span class=\"hljs-symbol\">00000000 </span><span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">0000000</span> <span class=\"hljs-number\">00000000</span><br><span class=\"hljs-number\">255.255</span>.<span class=\"hljs-number\">255.255</span><br><span class=\"hljs-symbol\">11111111 </span><span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span><br></code></pre></td></tr></table></figure>\n<p>A类 首位标志位    0-127<br>B类 前两位标志位    127-191<br>C类 前三位标志位    192-223<br>D类 前四位标志位    224-239</p>\n<ol start=\"2\">\n<li><p>子网划分</p>\n<ul>\n<li>子网掩码</li>\n<li>将一个网络划分成多个子网</li>\n</ul>\n</li>\n</ol>\n<p>IP地址 ：：={&lt;网络前缀&gt;,&lt;主机&gt;}<br>127.14.21.0/20</p>\n<h3 id=\"特殊含义的IP地址\"><a href=\"#特殊含义的IP地址\" class=\"headerlink\" title=\"特殊含义的IP地址\"></a>特殊含义的IP地址</h3><ul>\n<li><p>127网段（回播地址）</p>\n</li>\n<li><p>网络号全0地址（当前子网中的地址）</p>\n</li>\n<li><p>全1地址（本地子网的广播）</p>\n</li>\n<li><p>主机号全1地址（特定子网的广播）</p>\n</li>\n<li><p>10.0.0.1至10.255.255.254</p>\n<p>172.16.0.1至172.31.255.254</p>\n<p>192.168.0.1至192.168.255.254（局域网IP）</p>\n</li>\n<li><p>169.254.0.0（保留地址，用于DHCP失效 win）</p>\n</li>\n<li><p>0.0.0.0（保留地址，用于DHCP失效 linux）</p>\n</li>\n</ul>\n<h3 id=\"IPv6\"><a href=\"#IPv6\" class=\"headerlink\" title=\"IPv6\"></a>IPv6</h3><p>为了解决IPv4地址不足问题</p>\n<ol>\n<li>单播地址</li>\n<li>任播地址</li>\n<li>组播地址</li>\n</ol>\n<h3 id=\"无线网\"><a href=\"#无线网\" class=\"headerlink\" title=\"无线网\"></a>无线网</h3><ol>\n<li>无线局域网（WLAN,802.11,Wi-Fi）</li>\n<li>无线城域网</li>\n<li>无线广域网（WWAN 3G/4G/5G）</li>\n<li>无线个人网（WPAN 蓝牙）</li>\n</ol>\n<h3 id=\"网络接入技术\"><a href=\"#网络接入技术\" class=\"headerlink\" title=\"网络接入技术\"></a>网络接入技术</h3><ol>\n<li><p>有线接入（PSTN,DDN,ISDN,ADSL,HFC）</p>\n</li>\n<li><p>无线接入（WiFi，蓝牙，红外，WAPI）</p>\n</li>\n<li><p>3G/4G/5G（WCDMA,CDMA2000,TD-SCDMA中国移动）</p>\n<p>LTE 4G 分为TDD时分，FDD频分</p>\n</li>\n</ol>\n<h3 id=\"HTML标签\"><a href=\"#HTML标签\" class=\"headerlink\" title=\"HTML标签\"></a>HTML标签</h3><table>\n<thead>\n<tr>\n<th align=\"center\"><a></th>\n<th align=\"center\">锚点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><b></td>\n<td align=\"center\">粗体</td>\n</tr>\n<tr>\n<td align=\"center\"><body></td>\n<td align=\"center\">主体</td>\n</tr>\n<tr>\n<td align=\"center\"><button></td>\n<td align=\"center\">按钮</td>\n</tr>\n<tr>\n<td align=\"center\"><center></td>\n<td align=\"center\">居中</td>\n</tr>\n<tr>\n<td align=\"center\"><col></td>\n<td align=\"center\">定义表格一个或多个列属性</td>\n</tr>\n<tr>\n<td align=\"center\"><font></td>\n<td align=\"center\">字体属性</td>\n</tr>\n<tr>\n<td align=\"center\"><form></td>\n<td align=\"center\">表单</td>\n</tr>\n<tr>\n<td align=\"center\"><frame></td>\n<td align=\"center\">框架窗口</td>\n</tr>\n<tr>\n<td align=\"center\"><h1></td>\n<td align=\"center\">一级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><hr></td>\n<td align=\"center\">水平线</td>\n</tr>\n<tr>\n<td align=\"center\"><html></td>\n<td align=\"center\">html文档</td>\n</tr>\n<tr>\n<td align=\"center\"><img></td>\n<td align=\"center\">图片</td>\n</tr>\n<tr>\n<td align=\"center\"><p></td>\n<td align=\"center\">段落</td>\n</tr>\n<tr>\n<td align=\"center\"><script></td>\n<td align=\"center\">脚本</td>\n</tr>\n<tr>\n<td align=\"center\"><strong></td>\n<td align=\"center\">强调文本</td>\n</tr>\n<tr>\n<td align=\"center\"><table></td>\n<td align=\"center\">表格</td>\n</tr>\n<tr>\n<td align=\"center\"><td></td>\n<td align=\"center\">表格单元</td>\n</tr>\n<tr>\n<td align=\"center\"><tr></td>\n<td align=\"center\">表格行</td>\n</tr>\n<tr>\n<td align=\"center\"><title></td>\n<td align=\"center\">标题</td>\n</tr>\n</tbody></table>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl7zte4mw00024qpv41x13zww","category_id":"cl7zte4mz00044qpv7k25ex2m","_id":"cl7zte4n000064qpv4lf6f5jj"},{"post_id":"cl7zwlnyj0000sspv0g8a7dlg","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zwlnyl0002sspv26pn6a67"},{"post_id":"cl7zwlsgp0004sspv58kdd5kk","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zwlsgq0006sspv7qhuhtx6"},{"post_id":"cl7zwn0900008sspv3s4c8n6g","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zwn091000asspv8hbo9hh4"},{"post_id":"cl7zwn1xq000csspv2nzz6r7s","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zwn1xr000esspv7pw6ebpe"},{"post_id":"cl7zwn7ld000fsspv116deer9","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zwn7le000hsspv1sc0h19y"},{"post_id":"cl7zwobn5000jsspvccjw7p8p","category_id":"cl7zwobn6000ksspva1upfn7z","_id":"cl7zwobn6000lsspvcbcva944"},{"post_id":"cl7zwoczc000msspv2g6v8ey7","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zwoczd000osspv71t41q64"},{"post_id":"cl7zwofed000qsspv4l0qhszi","category_id":"cl7zwobn6000ksspva1upfn7z","_id":"cl7zwofee000ssspv4zvy02y8"},{"post_id":"cl7zwouzk000tsspvcn0i7p24","category_id":"cl7zwobn6000ksspva1upfn7z","_id":"cl7zwouzl000vsspv0jn2dnqa"},{"post_id":"cl7zwow9t000zsspvcju187oo","category_id":"cl7zwobn6000ksspva1upfn7z","_id":"cl7zwow9t0011sspv06dx1w8w"},{"post_id":"cl7zwoy8b0014sspv5x446ttz","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zwoy8c0016sspvhmnvg8mt"},{"post_id":"cl7zwozmx0017sspv3osndhzo","category_id":"cl7zwobn6000ksspva1upfn7z","_id":"cl7zwozmy0019sspv92z174ah"},{"post_id":"cl7zwp10s001csspv08yldaof","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zwp10s001esspvbva65t95"},{"post_id":"cl7zz0oan0000hspvh4t5gquf","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0oap0002hspv2xte7sg1"},{"post_id":"cl7zz0oax0005hspv4knedpzz","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0oay0007hspv3kbf53nj"},{"post_id":"cl7zz0ob60008hspvbijs1l19","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0ob6000ahspv3tyx93hw"},{"post_id":"cl7zz0obk000bhspvdsfegt75","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0obk000dhspv3bsvdir8"},{"post_id":"cl7zz0obp000ehspvar9xf54o","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0obq000ghspv03f99h21"},{"post_id":"cl7zz0obr000khspvfail79tn","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0obt000mhspv1pk832iz"},{"post_id":"cl7zz0oca000qhspvb0wo3n71","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0ocb000shspvfm6t9fab"},{"post_id":"cl7zz0ocf000uhspv6b810q2i","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0ocg000whspvd88n85o3"},{"post_id":"cl7zz0ocj000xhspvazb1dfv4","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0ock000zhspv0028bfox"},{"post_id":"cl7zz0od30010hspvdb5wgt6a","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0od40012hspv5ficbvvg"},{"post_id":"cl7zz0od70014hspvh6d31s6h","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0od80016hspv3qiegx5f"},{"post_id":"cl7zz0odu0019hspv1eryhgct","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0odv001bhspvgab84nuf"},{"post_id":"cl7zz0odv001dhspv9ggc5fth","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0odw001fhspv0cwo7ar1"},{"post_id":"cl7zz0oe4001ghspv4hw3azb9","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0oe5001ihspvaj5hdldv"},{"post_id":"cl7zz0oes001mhspvc42m8quv","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl7zz0oet001ohspv8gkv3w3u"},{"post_id":"cl82i5bqo0000mppvbuec2aaw","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl82i5br30004mppv95p972pk"},{"post_id":"cl82i5bqu0001mppvfdu9g0q7","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl82i5br30005mppvagff0p7y"},{"post_id":"cl82i5br20003mppvc6mlan6c","category_id":"cl7zv05ql0001nfpvaz6pdxyd","_id":"cl82i5br60008mppv07xu32zc"}],"PostTag":[{"post_id":"cl7zte4mw00024qpv41x13zww","tag_id":"cl7zte4my00034qpv3l4y9lil","_id":"cl7zte4n000054qpv8x6tdty6"},{"post_id":"cl7zwlnyj0000sspv0g8a7dlg","tag_id":"cl7zwlnyl0001sspv2ygy2pe4","_id":"cl7zwlnym0003sspv543w2tz2"},{"post_id":"cl7zwlsgp0004sspv58kdd5kk","tag_id":"cl7zwlsgq0005sspv1zvdg88o","_id":"cl7zwlsgq0007sspvehpd5sq3"},{"post_id":"cl7zwn0900008sspv3s4c8n6g","tag_id":"cl7zwn0910009sspv357rhhyy","_id":"cl7zwn091000bsspvewn6fj2r"},{"post_id":"cl7zwn1xq000csspv2nzz6r7s","tag_id":"cl7zwn0910009sspv357rhhyy","_id":"cl7zwn1xq000dsspv2vg37xws"},{"post_id":"cl7zwn7ld000fsspv116deer9","tag_id":"cl7zwn7le000gsspv8rgg8hn8","_id":"cl7zwn7le000isspv44ss5f85"},{"post_id":"cl7zwoczc000msspv2g6v8ey7","tag_id":"cl7zwoczd000nsspvhzijhje2","_id":"cl7zwoczd000psspv59ou679d"},{"post_id":"cl7zwofed000qsspv4l0qhszi","tag_id":"cl7zwn0910009sspv357rhhyy","_id":"cl7zwofee000rsspv7yezdiyk"},{"post_id":"cl7zwouzk000tsspvcn0i7p24","tag_id":"cl7zwouzl000usspvhp6n8mjm","_id":"cl7zwouzm000xsspv5vyj61y3"},{"post_id":"cl7zwouzk000tsspvcn0i7p24","tag_id":"cl7zwouzl000wsspv08ll1g1h","_id":"cl7zwouzm000ysspv1y3phudr"},{"post_id":"cl7zwow9t000zsspvcju187oo","tag_id":"cl7zwow9t0010sspv6if0dvv8","_id":"cl7zwow9u0012sspvez9zbncb"},{"post_id":"cl7zwow9t000zsspvcju187oo","tag_id":"cl7zwouzl000wsspv08ll1g1h","_id":"cl7zwow9u0013sspv5wz4bhsi"},{"post_id":"cl7zwoy8b0014sspv5x446ttz","tag_id":"cl7zv05qo0002nfpva15fgw10","_id":"cl7zwoy8c0015sspvc7zg4s2t"},{"post_id":"cl7zwozmx0017sspv3osndhzo","tag_id":"cl7zwozmx0018sspvbvx2esdg","_id":"cl7zwozmy001asspv9n5jhc55"},{"post_id":"cl7zwozmx0017sspv3osndhzo","tag_id":"cl7zwouzl000wsspv08ll1g1h","_id":"cl7zwozmy001bsspv4p2gaw5r"},{"post_id":"cl7zwp10s001csspv08yldaof","tag_id":"cl7zwn0910009sspv357rhhyy","_id":"cl7zwp10t001isspvdwwi2gtz"},{"post_id":"cl7zwp10s001csspv08yldaof","tag_id":"cl7zwp10s001dsspvfo0q85x2","_id":"cl7zwp10t001jsspv3crrhs8i"},{"post_id":"cl7zwp10s001csspv08yldaof","tag_id":"cl7zwp10s001fsspva053823f","_id":"cl7zwp10t001ksspvb7k3ajqe"},{"post_id":"cl7zwp10s001csspv08yldaof","tag_id":"cl7zwp10t001gsspvgw7j84gc","_id":"cl7zwp10t001lsspvgwsqbndp"},{"post_id":"cl7zwp10s001csspv08yldaof","tag_id":"cl7zwp10t001hsspvb2bl0w7f","_id":"cl7zwp10t001msspv3xtxhluc"},{"post_id":"cl7zz0oan0000hspvh4t5gquf","tag_id":"cl7zwn0910009sspv357rhhyy","_id":"cl7zz0oap0003hspv1yq93aft"},{"post_id":"cl7zz0oan0000hspvh4t5gquf","tag_id":"cl7zz0oap0001hspvaolqgv7n","_id":"cl7zz0oaq0004hspv9epe46hf"},{"post_id":"cl7zz0oax0005hspv4knedpzz","tag_id":"cl7zwlsgq0005sspv1zvdg88o","_id":"cl7zz0oay0006hspv9rtu4br0"},{"post_id":"cl7zz0ob60008hspvbijs1l19","tag_id":"cl7zwn0910009sspv357rhhyy","_id":"cl7zz0ob60009hspv9w2159p5"},{"post_id":"cl7zz0obk000bhspvdsfegt75","tag_id":"cl7zwn0910009sspv357rhhyy","_id":"cl7zz0obk000chspvdfb3cs4p"},{"post_id":"cl7zz0obp000ehspvar9xf54o","tag_id":"cl7zz0obq000fhspv736jeis2","_id":"cl7zz0obq000ihspv7x9mdgtg"},{"post_id":"cl7zz0obp000ehspvar9xf54o","tag_id":"cl7zz0obq000hhspv6w141tmv","_id":"cl7zz0obq000jhspve5gxfzo3"},{"post_id":"cl7zz0obr000khspvfail79tn","tag_id":"cl7zz0obs000lhspvd5x44zp3","_id":"cl7zz0obt000ohspv0qb5gqo9"},{"post_id":"cl7zz0obr000khspvfail79tn","tag_id":"cl7zz0obt000nhspva1ny1q7o","_id":"cl7zz0obt000phspv1jui0c2h"},{"post_id":"cl7zz0oca000qhspvb0wo3n71","tag_id":"cl7zz0ocb000rhspv50wb6jtc","_id":"cl7zz0ocb000thspv4xgd0xl6"},{"post_id":"cl7zz0ocf000uhspv6b810q2i","tag_id":"cl7zz0ocb000rhspv50wb6jtc","_id":"cl7zz0ocg000vhspve2289n0s"},{"post_id":"cl7zz0ocj000xhspvazb1dfv4","tag_id":"cl7zz0ocb000rhspv50wb6jtc","_id":"cl7zz0ock000yhspv6e72gbs6"},{"post_id":"cl7zz0od30010hspvdb5wgt6a","tag_id":"cl7zz0od40011hspv6nkx8rvr","_id":"cl7zz0od40013hspv8aw89fp8"},{"post_id":"cl7zz0od70014hspvh6d31s6h","tag_id":"cl7zz0od80015hspvg2193qnm","_id":"cl7zz0od80017hspvb1f1dk3i"},{"post_id":"cl7zz0od70014hspvh6d31s6h","tag_id":"cl7zwouzl000wsspv08ll1g1h","_id":"cl7zz0od80018hspv30e7d849"},{"post_id":"cl7zz0odu0019hspv1eryhgct","tag_id":"cl7zz0odu001ahspvabiyhm1y","_id":"cl7zz0odv001chspvh2skd3w1"},{"post_id":"cl7zz0odv001dhspv9ggc5fth","tag_id":"cl7zz0obs000lhspvd5x44zp3","_id":"cl7zz0odw001ehspvd52fela8"},{"post_id":"cl7zz0oe4001ghspv4hw3azb9","tag_id":"cl7zwn0910009sspv357rhhyy","_id":"cl7zz0oe5001jhspvaiq5271i"},{"post_id":"cl7zz0oe4001ghspv4hw3azb9","tag_id":"cl7zz0odu001ahspvabiyhm1y","_id":"cl7zz0oe5001khspvc70k9u8f"},{"post_id":"cl7zz0oe4001ghspv4hw3azb9","tag_id":"cl7zz0oe5001hhspv32hk01iz","_id":"cl7zz0oe5001lhspvfv44gp3r"},{"post_id":"cl7zz0oes001mhspvc42m8quv","tag_id":"cl7zz0oet001nhspvbmc9a66n","_id":"cl7zz0oet001phspvcu8r8xb9"},{"post_id":"cl82i5bqo0000mppvbuec2aaw","tag_id":"cl82i5bqw0002mppvb21rcr6n","_id":"cl82i5br50007mppv696o5n2z"},{"post_id":"cl82i5bqo0000mppvbuec2aaw","tag_id":"cl7zwp10s001dsspvfo0q85x2","_id":"cl82i5br60009mppv0tzaahj4"},{"post_id":"cl82i5bqo0000mppvbuec2aaw","tag_id":"cl7zwouzl000wsspv08ll1g1h","_id":"cl82i5br7000bmppvbu6lgvln"},{"post_id":"cl82i5bqu0001mppvfdu9g0q7","tag_id":"cl82i5bqw0002mppvb21rcr6n","_id":"cl82i5br8000dmppvg3t2exjm"},{"post_id":"cl82i5bqu0001mppvfdu9g0q7","tag_id":"cl82i5br6000amppv5p61e5a8","_id":"cl82i5br8000emppvh502gsyf"},{"post_id":"cl82i5br20003mppvc6mlan6c","tag_id":"cl82i5bqw0002mppvb21rcr6n","_id":"cl82i5br8000gmppv0dto562f"},{"post_id":"cl82i5br20003mppvc6mlan6c","tag_id":"cl82i5br8000fmppvbn6va6uo","_id":"cl82i5br8000hmppvggihfqs3"}],"Tag":[{"name":"Test","_id":"cl7zte4my00034qpv3l4y9lil"},{"name":"文件整理","_id":"cl7zv05qo0002nfpva15fgw10"},{"name":"Docker","_id":"cl7zwlnyl0001sspv2ygy2pe4"},{"name":"Git","_id":"cl7zwlsgq0005sspv1zvdg88o"},{"name":"Go","_id":"cl7zwn0910009sspv357rhhyy"},{"name":"服务部署","_id":"cl7zwn7le000gsspv8rgg8hn8"},{"name":"windows","_id":"cl7zwoczd000nsspvhzijhje2"},{"name":"麻将","_id":"cl7zwouzl000usspvhp6n8mjm"},{"name":"算法","_id":"cl7zwouzl000wsspv08ll1g1h"},{"name":"跑得快","_id":"cl7zwow9t0010sspv6if0dvv8"},{"name":"炸金花","_id":"cl7zwozmx0018sspvbvx2esdg"},{"name":"数据结构","_id":"cl7zwp10s001dsspvfo0q85x2"},{"name":"设计模式","_id":"cl7zwp10s001fsspva053823f"},{"name":"框架","_id":"cl7zwp10t001gsspvgw7j84gc"},{"name":"更新策略","_id":"cl7zwp10t001hsspvb2bl0w7f"},{"name":"Gin","_id":"cl7zz0oap0001hspvaolqgv7n"},{"name":"Java","_id":"cl7zz0obq000fhspv736jeis2"},{"name":"JDK","_id":"cl7zz0obq000hhspv6w141tmv"},{"name":"Html","_id":"cl7zz0obs000lhspvd5x44zp3"},{"name":"Js","_id":"cl7zz0obt000nhspva1ny1q7o"},{"name":"MySQL","_id":"cl7zz0ocb000rhspv50wb6jtc"},{"name":"产品更新","_id":"cl7zz0od40011hspv6nkx8rvr"},{"name":"二进制","_id":"cl7zz0od80015hspvg2193qnm"},{"name":"Windows","_id":"cl7zz0odu001ahspvabiyhm1y"},{"name":"Linux","_id":"cl7zz0oe5001hhspv32hk01iz"},{"name":"Maven","_id":"cl7zz0oet001nhspvbmc9a66n"},{"name":"软件设计师【软考】","_id":"cl82i5bqw0002mppvb21rcr6n"},{"name":"系统安全分析与设计","_id":"cl82i5br6000amppv5p61e5a8"},{"name":"计算机网络","_id":"cl82i5br8000fmppvbn6va6uo"}]}}